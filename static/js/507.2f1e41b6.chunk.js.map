{"version":3,"file":"static/js/507.2f1e41b6.chunk.js","mappings":"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","sources":["common/hooks/useSingle.ts","random/constants/DefaultFilters.ts","random/components/SearchReload.tsx","random/components/SearchMenu.tsx","random/components/RandomHeader.tsx","random/containers/RandomPage.tsx","recipe_groups/store/actions.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","const defaultFilters: Record<string, string | number> = {\n  limit: 6,\n};\n\nexport default defaultFilters;\n","import { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport '../../common/css/modal.css';\n\nimport Icon from '../../common/components/Icon';\nimport P from '../../common/components/P';\n\nexport interface ISearchReloadProps {\n  onReloadClick: () => void;\n}\n\nconst messages = defineMessages({\n  search_nothing_found_yet_heading: {\n    id: 'random.reload.heading',\n    description: 'Nothing found?',\n    defaultMessage: 'Not the right one?',\n  },\n  search_nothing_found_yet: {\n    id: 'random.reload.text',\n    description: 'Nothing found? Text',\n    defaultMessage: 'Just give it another try.',\n  },\n  search_reload_button: {\n    id: 'random.reload.button',\n    description: 'Title/tooltip of the icon button to reload to recipes.',\n    defaultMessage: 'Reload recipes',\n  },\n});\n\nconst SearchReload: React.FC<ISearchReloadProps> = ({ onReloadClick }: ISearchReloadProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <div className='search-reload reload-container print-hidden'>\n      <div className='search-reload modal-content'>\n        <div className='search-reload-box'>\n          <h2>{formatMessage(messages.search_nothing_found_yet_heading)}</h2>\n          <P>{formatMessage(messages.search_nothing_found_yet)}</P>\n        </div>\n        <div className='search-reload-button-box'>\n          <Button id='reload-random-button' variant='primary' aria-label={formatMessage(messages.search_reload_button)} onClick={onReloadClick}>\n            <Icon icon='arrow-repeat' variant='light' />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchReload;\n","import { useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Dropdown, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { SearchResult } from '../../browse/store/SearchTypes';\nimport { optionallyFormatMessage } from '../../common/utility';\nimport { Course, Cuisine, Season } from '../../recipe/store/RecipeTypes';\n\nconst messages = defineMessages({\n  filter_by_course: {\n    id: 'random.search.menu.filter_by_course_dropdown',\n    description: 'Filter by main/...',\n    defaultMessage: 'Course: {course}',\n  },\n  filter_by_cuisine: {\n    id: 'random.search.menu.filter_by_cuisine_dropdown',\n    description: 'Filter by indian/...',\n    defaultMessage: 'Cuisine: {cuisine}',\n  },\n  filter_by_season: {\n    id: 'random.search.menu.filter_by_season_dropdown',\n    description: 'Filter by spring/...',\n    defaultMessage: 'Season: {season}',\n  },\n  filter_all: {\n    id: 'random.search.menu.filter_all',\n    description: 'Item to not filter at all',\n    defaultMessage: '(All)',\n  },\n});\n\nexport interface ISearchMenuProps {\n  search:   SearchResult | undefined;\n  qs:       Record<string, string>;\n  courses:  Array<Course> | undefined;\n  cuisines: Array<Cuisine> | undefined;\n  seasons:  Array<Season> | undefined;\n  buildUrl: (qsTitle: string, recipeSlug: string, multiSelect?: boolean) => string;\n}\n\nconst SearchMenu: React.FC<ISearchMenuProps> = ({ search, qs, courses, cuisines, seasons, buildUrl }: ISearchMenuProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const filterAllText = formatMessage(messages.filter_all);\n\n  const currentCourse = qs.course__slug ?? '';\n  const handleFilterCourseClick = useCallback((event: React.MouseEvent<HTMLAnchorElement>, filterCourse: string) => {\n    if (currentCourse === filterCourse) {\n      event.preventDefault();\n    }\n  }, [currentCourse]);\n  const courseDropdownItems = courses?.map(course => ({ key: course.title, value: optionallyFormatMessage(intl, 'course.', course.title) })).sort((a, b) => a.value.localeCompare(b.value));\n  courseDropdownItems?.unshift({ key: '', value: filterAllText });\n  const courseDropdownItemsJsx = courseDropdownItems?.map(item => (\n    <Dropdown.Item key={item.key} as={Link} to={buildUrl('course__slug', item.key)} active={currentCourse === item.key} onClick={(event: React.MouseEvent<HTMLAnchorElement>) => handleFilterCourseClick(event, item.key)}>\n      {item.value}\n    </Dropdown.Item>\n  ));\n\n  const currentCuisine = qs.cuisine__slug ?? '';\n  const handleFilterCuisineClick = useCallback((event: React.MouseEvent<HTMLAnchorElement>, filterCuisine: string) => {\n    if (currentCuisine === filterCuisine) {\n      event.preventDefault();\n    }\n  }, [currentCuisine]);\n  const cuisineDropdownItems = cuisines?.map(cuisine => ({ key: cuisine.title, value: optionallyFormatMessage(intl, 'cuisine.', cuisine.title) })).sort((a, b) => a.value.localeCompare(b.value));\n  cuisineDropdownItems?.unshift({ key: '', value: filterAllText });\n  const cuisineDropdownItemsJsx = cuisineDropdownItems?.map(item => (\n    <Dropdown.Item key={item.key} as={Link} to={buildUrl('cuisine__slug', item.key)} active={currentCuisine === item.key} onClick={(event: React.MouseEvent<HTMLAnchorElement>) => handleFilterCuisineClick(event, item.key)}>\n      {item.value}\n    </Dropdown.Item>\n  ));\n\n  const currentSeason = qs.season__slug ?? '';\n  const handleFilterSeasonClick = useCallback((event: React.MouseEvent<HTMLAnchorElement>, filterSeason: string) => {\n    if (currentSeason === filterSeason) {\n      event.preventDefault();\n    }\n  }, [currentSeason]);\n  const seasonDropdownItems = seasons?.map(season => ({ key: season.title, value: optionallyFormatMessage(intl, 'season.', season.title) }));\n  seasonDropdownItems?.unshift({ key: '', value: filterAllText });\n  const seasonDropdownItemsJsx = seasonDropdownItems?.map(item => (\n    <Dropdown.Item key={item.key} as={Link} to={buildUrl('season__slug', item.key)} active={currentSeason === item.key} onClick={(event: React.MouseEvent<HTMLAnchorElement>) => handleFilterSeasonClick(event, item.key)}>\n      {item.value}\n    </Dropdown.Item>\n  ));\n\n  return (\n    <Row xs={1} xl='auto' className='search-menu'>\n      <Dropdown className='filter-course-dropdown'>\n        <Dropdown.Toggle variant='outline-primary' id='filter-course-button' disabled={search == null}>\n          {formatMessage(messages.filter_by_course, { course: currentCourse ? optionallyFormatMessage(intl, 'course.', currentCourse) : filterAllText })}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {courseDropdownItemsJsx}\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown className='filter-cuisine-dropdown'>\n        <Dropdown.Toggle variant='outline-primary' id='filter-cuisine-button' disabled={search == null}>\n          {formatMessage(messages.filter_by_cuisine, { cuisine: currentCuisine ? optionallyFormatMessage(intl, 'cuisine.', currentCuisine) : filterAllText })}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {cuisineDropdownItemsJsx}\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown className='filter-season-dropdown'>\n        <Dropdown.Toggle variant='outline-primary' id='filter-season-button' disabled={search == null}>\n          {formatMessage(messages.filter_by_season, { season: currentSeason ? optionallyFormatMessage(intl, 'season.', currentSeason) : filterAllText })}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {seasonDropdownItemsJsx}\n        </Dropdown.Menu>\n      </Dropdown>\n    </Row>\n  );\n};\n\nexport default SearchMenu;\n","import { Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport P from '../../common/components/P';\nimport { SearchResult } from '../../browse/store/SearchTypes';\nimport SearchMenu from './SearchMenu';\nimport { Course, Cuisine, Season } from '../../recipe/store/RecipeTypes';\n\nconst messages = defineMessages({\n  random_heading: {\n    id: 'random.heading',\n    description: 'Heading of the random page.',\n    defaultMessage: 'Random recipe',\n  },\n  random_text: {\n    id: 'random.heading.text',\n    description: 'Some nice text above the random search results.',\n    defaultMessage: 'Looking for an awesome meal? There are plenty waiting for you!',\n  },\n});\n\nexport interface IRandomHeaderProps {\n  search:   Record<string, SearchResult> | undefined;\n  courses:  Array<Course> | undefined;\n  cuisines: Array<Cuisine> | undefined;\n  seasons:  Array<Season> | undefined;\n  qs:       Record<string, string>;\n  qsString: string;\n\n  buildUrl: (qsTitle: string, recipeSlug: string, multiSelect?: boolean) => string;\n}\n\nconst RandomHeader: React.FC<IRandomHeaderProps> = ({\n    search, courses, cuisines, seasons, qs, qsString,\n    buildUrl }: IRandomHeaderProps) => {\n  const { formatMessage } = useIntl();\n\n  const qsSearchResult = search?.[qsString];\n\n  return (\n    <Row xs={1} sm={2} className='random-header-container'>\n      <div>\n        <h1>{formatMessage(messages.random_heading)}</h1>\n        <P>{formatMessage(messages.random_text)}</P>\n      </div>\n      <SearchMenu\n          qs       = {qs}\n          search   = {qsSearchResult}\n          courses  = {courses}\n          cuisines = {cuisines}\n          seasons  = {seasons}\n          buildUrl = {buildUrl}\n          />\n    </Row>\n  );\n};\n\nexport default RandomHeader;\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSearchParams } from 'react-router-dom';\n\nimport '../css/random.css';\n\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\nimport * as SearchActions from '../../browse/store/SearchActions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\n\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport DefaultFilters from '../constants/DefaultFilters';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport { RootState } from '../../app/Store';\nimport { RecipeList } from '../../recipe/store/RecipeTypes';\nimport { buildSearchUrl, mergeDefaultFilters } from '../../browse/containers/BrowsePage';\nimport SearchReload from '../components/SearchReload';\nimport RandomHeader from '../components/RandomHeader';\nimport useSingle from '../../common/hooks/useSingle';\nimport SearchResults from '../../browse/containers/SearchResults';\nimport { objToSearchString } from '../../common/utility';\n\nconst RandomPage: React.FC = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n\n  const search   = useSelector((state: RootState) => state.browse.browserSearch.items);\n\n  const qs = useMemo(() => Object.fromEntries(searchParams), [searchParams]);\n  const qsMergedDefaults = useMemo(() => mergeDefaultFilters(DefaultFilters, qs), [DefaultFilters, qs]);\n  const qsMergedString = useMemo(() => objToSearchString(qsMergedDefaults), [qsMergedDefaults]);\n\n  const fetchCourses = useCallback(() => { dispatch(RecipeGroupActions.fetchCourses()); }, []);\n  const courses  = useSelector((state: RootState) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses, courses);\n\n  const fetchCuisines = useCallback(() => { dispatch(RecipeGroupActions.fetchCuisines()); }, []);\n  const cuisines  = useSelector((state: RootState) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines, cuisines);\n\n  const fetchSeasons = useCallback(() => { dispatch(RecipeGroupActions.fetchSeasons()); }, []);\n  const seasons  = useSelector((state: RootState) => state.recipeGroups.seasons.items);\n  useSingle(fetchSeasons, seasons);\n\n  const reloadData = useCallback(() => {\n    dispatch(SearchActions.loadRandomRecipes(qsMergedDefaults));\n  }, [qsMergedDefaults]);\n\n  useEffect(() => {\n    reloadData();\n  }, [searchParams]);\n\n  const handleBuildUrl = useCallback((name: string, value: string, multiSelect = false) => (\n    buildSearchUrl('random', qs, name, value, multiSelect)\n  ), [buildSearchUrl, qs]);\n\n  const handleOpenRecipe = useCallback((rec: RecipeList) => {\n    dispatch(RecipeActions.preload(rec));\n  }, []);\n\n  return (\n    <PageWrapper title={intl.messages['nav.recipes'] as string}>\n      <RandomHeader\n          search   = {search}\n          courses  = {courses}\n          cuisines = {cuisines}\n          seasons  = {seasons}\n          qs       = {qs}\n          qsString = {qsMergedString}\n          buildUrl = {handleBuildUrl}\n          />\n      <SearchResults\n          qs       = {qs}\n          qsString = {qsMergedString}\n          buildUrl = {handleBuildUrl}\n          onOpenRecipe = {handleOpenRecipe}\n          />\n      <SearchReload onReloadClick={reloadData} />\n    </PageWrapper>\n  );\n};\n\nexport default RandomPage;\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, toSeason, toTag } from '../../recipe/store/RecipeTypes';\nimport { toBasicAction } from '../../common/store/redux';\nimport { handleError } from '../../common/requestUtils';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, SEASONS_STORE, TAGS_STORE } from './types';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map(toCourse),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map(toCuisine),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchSeasons = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(SEASONS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.season)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          SEASONS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toSeason),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toTag),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["useSingle","getFunction","obj","useEffect","limit","messages","defineMessages","search_nothing_found_yet_heading","id","description","defaultMessage","search_nothing_found_yet","search_reload_button","_ref","onReloadClick","formatMessage","useIntl","_jsx","className","children","_jsxs","P","Button","variant","onClick","Icon","icon","filter_by_course","filter_by_cuisine","filter_by_season","filter_all","_qs$course__slug","_qs$cuisine__slug","_qs$season__slug","search","qs","courses","cuisines","seasons","buildUrl","intl","filterAllText","currentCourse","course__slug","handleFilterCourseClick","useCallback","event","filterCourse","preventDefault","courseDropdownItems","map","course","key","title","value","optionallyFormatMessage","sort","a","b","localeCompare","unshift","courseDropdownItemsJsx","item","Dropdown","Item","as","Link","to","active","currentCuisine","cuisine__slug","handleFilterCuisineClick","filterCuisine","cuisineDropdownItems","cuisine","cuisineDropdownItemsJsx","currentSeason","season__slug","handleFilterSeasonClick","filterSeason","seasonDropdownItems","season","seasonDropdownItemsJsx","Row","xs","xl","Toggle","disabled","Menu","random_heading","random_text","qsString","qsSearchResult","sm","SearchMenu","RandomPage","dispatch","useDispatch","searchParams","useSearchParams","useSelector","state","browse","browserSearch","items","useMemo","Object","fromEntries","qsMergedDefaults","mergeDefaultFilters","DefaultFilters","qsMergedString","objToSearchString","fetchCourses","RecipeGroupActions","recipeGroups","fetchCuisines","fetchSeasons","reloadData","SearchActions","handleBuildUrl","name","multiSelect","arguments","length","undefined","buildSearchUrl","handleOpenRecipe","rec","RecipeActions","PageWrapper","RandomHeader","SearchResults","onOpenRecipe","SearchReload","toBasicAction","COURSES_STORE","ACTION","GET_START","request","get","serverURLs","then","res","GET_SUCCESS","payload","body","results","filter","courseDto","toCourse","catch","err","handleError","CUISINES_STORE","cuisineDto","toCuisine","SEASONS_STORE","toSeason","fetchTags","TAGS_STORE","tag","toTag"],"sourceRoot":""}