{"version":3,"file":"static/js/908.62040d75.chunk.js","mappings":"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","sources":["common/hooks/useSingle.ts","common/components/ReduxForm/ReCreatableSelect.tsx","recipe_form/containers/TagListContainer.tsx","recipe_form/containers/CourseSelectContainer.tsx","recipe_form/containers/CuisineSelectContainer.tsx","recipe_form/containers/RecipeFormToolbar.tsx","common/components/Input/FileSelect.tsx","common/components/ReduxForm/ReFileSelect.tsx","recipe_form/components/RecipeFormImageRow.tsx","recipe_form/utilts/parseIngredient.ts","common/components/Input/TextareaAutocomplete.tsx","common/components/ReduxForm/ReTextareaAutocomplete.tsx","recipe_form/components/TabbedView.tsx","recipe_form/components/IngredientGroupsBox.tsx","recipe_form/components/DirectionBox.tsx","recipe_form/components/RecipeForm.tsx","recipe_form/components/EditGuard.tsx","recipe_form/containers/RecipeFormPage.tsx","recipe_groups/store/actions.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useCallback } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { CreatableSelect, ICreatableSelectValues } from '../Input/Select';\n\nexport interface IReCreatableSelectProps extends Omit<ICreatableSelectValues, 'value' | 'onChange'> {\n  parser: (newValue: any | null) => any | undefined;\n  formatter: (newValue: Array<any> | any) => any;\n}\n\nconst ReCreatableSelect = forwardRef<CreatableSelect, IReCreatableSelectProps>(({\n    parser, formatter,\n    name, required, isMulti,\n    onFocus, onBlur, ...rest }: IReCreatableSelectProps, ref) => {\n  const intl = useIntl();\n\n  const formatValue = useCallback((value: Array<any> | any | undefined) => {\n    if (value == null) {\n      return isMulti ? [] : undefined;\n    } else {\n      return formatter(value);\n    }\n  }, [formatter, isMulti]);\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]}>\n      {fprops => (\n        <CreatableSelect\n            {...rest}\n            isMulti  = {isMulti}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {formatValue(fprops.input.value)}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(_name: string, value: boolean) => { fprops.input.onChange(parser(value)); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReCreatableSelect;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Tag } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ITagListContainerProps {\n  name: string;\n  label: string;\n}\n\nconst TagListContainer: React.FC<ITagListContainerProps> = ({\n    name, label }: ITagListContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchTags = useCallback(() => { dispatch(RecipeGroupActions.fetchTags()); }, []);\n  const tags = useSelector((state: RootState) => state.recipeGroups.tags.items);\n  useSingle(fetchTags, tags);\n\n  const data = useMemo(() => tags\n      ?.filter(t => t.title.length > 0)\n      .map(t => ({ value: t.title, label: optionallyFormatMessage(intl, 'tag.', t.title) }))\n      .sort(sortByLabel), [tags, intl.locale]);\n\n  const parser = useCallback((newValue: Array<string> | undefined): Array<Tag> | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      const selected: Array<Tag> = [];\n      newValue.forEach(v => {\n        const tag = tags?.find(t => t.title === v);\n        selected.push(tag ?? { title: v } as Tag);\n      });\n\n      return selected;\n    }\n  }, [tags]);\n\n  const formatter = useCallback((value: Array<Tag> | Tag): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        isMulti\n        />\n  );\n};\n\nexport default TagListContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Course } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICourseSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CourseSelectContainer: React.FC<ICourseSelectContainerProps> = ({\n    name, label }: ICourseSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCourses = useCallback(() => { dispatch(RecipeGroupActions.fetchCourses()); }, []);\n  const courses = useSelector((state: RootState) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses, courses);\n\n  const data = useMemo(() => courses\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'course.', c.title) }))\n      .sort(sortByLabel), [courses, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Course | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return courses?.find(c => c.title === newValue) ?? { title: newValue } as Course;\n    }\n  }, [courses]);\n\n  const formatter = useCallback((value: Array<Course> | Course): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CourseSelectContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Cuisine } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICuisineSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CuisineSelectContainer: React.FC<ICuisineSelectContainerProps> = ({\n    name, label }: ICuisineSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCuisines = useCallback(() => { dispatch(RecipeGroupActions.fetchCuisines()); }, []);\n  const cuisines = useSelector((state: RootState) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines, cuisines);\n\n  const data = useMemo(() => cuisines\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'cuisine.', c.title) }))\n      .sort(sortByLabel), [cuisines, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Cuisine | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return cuisines?.find(c => c.title === newValue) ?? { title: newValue ?? '' } as Cuisine;\n    }\n  }, [cuisines]);\n\n  const formatter = useCallback((value: Array<Cuisine> | Cuisine): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CuisineSelectContainer;\n","import { Component, forwardRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { FormSpy } from 'react-final-form';\n\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { getRoutePath, isDemoMode } from '../../common/utility';\nimport LoadingSpinner from '../../common/components/LoadingSpinner';\nimport { Toolbar } from '../../common/components/Toolbar';\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\n\nconst messages = defineMessages({\n  submit: {\n    id: 'recipe.create.submit',\n    description: 'Submit recipe button',\n    defaultMessage: 'Submit recipe',\n  },\n  view: {\n    id: 'recipe.create.view',\n    description: 'View recipe button',\n    defaultMessage: 'View',\n  },\n});\n\nconst RecipeFormToolbar: React.FC = () => {\n  const nav = useNavigate();\n  const dispatch = useDispatch();\n\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n\n  const preload = useCallback(() => { if (recipeState.item) dispatch(RecipeActions.preload(recipeState.item)); }, [recipeState.item]);\n  const onLink = useCallback(() => { nav(getRoutePath(`/recipe/${recipeState.item?.slug}`)); }, [recipeState.item?.slug]);\n\n  const id = recipeState.item?.id;\n  const isNew = id == null || id === 0;\n\n  return (\n    <FormSpy subscription={{ pristine: true, submitting: true }}>\n      {({ pristine, submitting }) => (\n        <SubmitViewButton isNew={isNew} pristine={pristine} submitting={submitting} onSubmit={preload} onLink={onLink} />\n      )}\n    </FormSpy>\n  );\n};\n\ninterface ISubmitViewButtonProps {\n  isNew:      boolean;\n  submitting: boolean;\n  pristine:   boolean;\n\n  onSubmit: () => void;\n  onLink: () => void;\n}\n\nconst SubmitViewButton = forwardRef<HTMLButtonElement, ISubmitViewButtonProps>(({\n    isNew, submitting, pristine, onSubmit, onLink, ...rest }: ISubmitViewButtonProps, ref) => {\n  const { formatMessage } = useIntl();\n\n  const asView = !isNew && pristine;\n\n  const onClick = useCallback(() => {\n    // This seems stupid, and it feels stupid.\n    // But we do not want to replace the button,\n    // to prevent losing focus.\n    if (asView) {\n      onLink();\n    } else {\n      onSubmit();\n    }\n  }, [asView, onLink, onSubmit]);\n\n  return (\n    <Toolbar position='end'>\n      <Button\n          variant  = 'primary'\n          type     = {asView ? 'button' : 'submit'}\n          // Do not disable on submitting, to prevent losing focus\n          disabled = {(isDemoMode() && !asView)}\n          onClick = {onClick}\n          accessKey = {asView ? undefined : 's'}\n          {...rest}\n          className = {submitting ? 'disabled' : undefined}\n          ref = {ref}>\n        <span style={{ visibility: submitting ? 'hidden' : 'initial' }}>{formatMessage(asView ? messages.view : messages.submit)}</span>\n        {submitting && <LoadingSpinner style={{ position: 'absolute', color: 'var(--primaryText)' }} />}\n      </Button>\n    </Toolbar>\n  );\n});\n\nexport const SubmittingObserver = forwardRef<SubmittingObserverClass>((_props, ref) => (\n  <FormSpy subscription={{ pristine: true, submitting: true }}>\n    {({ submitting }) => (\n      <SubmittingObserverClass submitting={submitting} ref={ref} />\n    )}\n  </FormSpy>\n));\n\ninterface ISubmittingObserverClassProps {\n  submitting: boolean;\n}\n\nexport class SubmittingObserverClass extends Component<ISubmittingObserverClassProps> {\n  // eslint-disable-next-line react/no-unused-class-component-methods\n  getSubmitting(): boolean {\n    return this.props.submitting;\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default RecipeFormToolbar;\n","import { createRef } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\n\nexport interface IFileSelectProps extends IBaseInputComponentProps {\n  accept?: string;\n  value?:  string;\n\n  onChange?: (name: string, newValue: File | undefined) => void;\n}\n\nclass FileSelect extends BaseInputComponent<IFileSelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  clearValue() { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.value = '';\n    }\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onChange?.(event.target.name, event?.target.files?.[0]);\n  };\n\n  handleClear = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, '' as unknown as File);\n      this.clearValue();\n    }\n  };\n\n  render() {\n    // console.log(`[FileSelect] name=${this.props.name}`);\n\n    const { accept, value, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <Form.Control\n                type   = 'file'\n                name   = {name}\n                accept = {accept}\n                readOnly = {readOnly}\n                disabled = {disabled}\n                onChange = {this.handleChange}\n                {...rest}\n                ref = {this.ref} />\n            {!readOnly && !disabled && onChange\n                && (value || (this.ref.current != null && this.ref.current.value)) && (\n                  <InputGroup.Text className='input-adornment-end button'>\n                    <Button onClick={this.handleClear}><Icon icon='x' variant='light' size='2x' /></Button>\n                  </InputGroup.Text>\n            )}\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport default FileSelect;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport FileSelect, { IFileSelectProps } from '../Input/FileSelect';\n\nexport type IReFileSelectProps = Omit<IFileSelectProps, 'value'>;\n\nconst identity = (value: any) => (value);\n\nconst ReFileSelect = forwardRef<FileSelect, IReFileSelectProps>(({\n    name, required,\n    onChange, onFocus, onBlur,\n    ...rest }: IReFileSelectProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} parse={identity}>\n      {fprops => (\n        <FileSelect\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value ?? false}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: File | undefined) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReFileSelect;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Col, Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { getRecipeImage, getRecipeImagePlaceholder } from '../../common/utility';\nimport WidthHeightRatio from '../../common/components/WidthHeightRatio';\nimport Image from '../../common/components/Image';\nimport ReFileSelect from '../../common/components/ReduxForm/ReFileSelect';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\n\nconst messages = defineMessages({\n  photo_label: {\n    id: 'recipe.create.photo_label',\n    description: 'Photo label',\n    defaultMessage: 'Photo',\n  },\n});\n\nconst RecipeFormImageRow: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const { key } = useLocation();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const photoInputRef = useRef<any>(null);\n  const [imageUrl, setImageUrl] = useState<string | undefined>(undefined);\n  const IMAGE_PLACEHOLDER = useMemo(() => getRecipeImagePlaceholder(), []);\n\n  useEffect(() => {\n    if (photoInputRef.current) {\n      photoInputRef.current.clearValue();\n    }\n    setImageUrl(undefined);\n  }, [key]);\n\n  const handleImageChange = useCallback((_name: string, newValue: File | undefined) => {\n    setImageUrl(newValue ? URL.createObjectURL(newValue) : '');\n  }, []);\n\n  const getDisplayImage = useCallback((recipePhoto: string | undefined) => {\n    if (imageUrl != null) {\n      return imageUrl.length > 0 ? imageUrl : getRecipeImagePlaceholder();\n    } else {\n      return getRecipeImage(recipePhoto || IMAGE_PLACEHOLDER);\n    }\n  }, [imageUrl, IMAGE_PLACEHOLDER]);\n\n  return (\n    <>\n      <Row>\n        <Col xs={12} lg={11} xl={10} xxl={9} style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n          <WidthHeightRatio height={66.67} width={100}>\n            <FieldSpyValues fieldNames={['photo']}>\n              {values => (\n                <Image\n                    src   = {getDisplayImage(values.photo)}\n                    alt   = ''\n                    style = {{ objectFit: 'contain' }} />\n              )}\n            </FieldSpyValues>\n          </WidthHeightRatio>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12}>\n          <ReFileSelect\n              name     = 'photo'\n              label    = {formatMessage(messages.photo_label)}\n              accept   = 'image/*'\n              onChange = {handleImageChange}\n              ref = {photoInputRef} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RecipeFormImageRow;\n","import { IngredientInput } from '../../recipe/store/RecipeTypes';\nimport { GCD } from '../../recipe/utilts/gcd';\n\n/**\n * Parses a string-number to a float,\n * normalizing the thousands and decimal-separators.\n *\n * @param str - \"1.500,50\"\n *\n * @returns 1500.50\n */\nfunction parseFloatIgnoreLocale(str: string): number {\n  let normalized;\n  const ixDot = str.indexOf('.');\n  const ixComma = str.indexOf(',');\n\n  if (ixDot === -1 && ixComma === -1) {\n    normalized = str;\n  } else if (ixDot === -1) {\n    normalized = str.replace(',', '.');\n  } else if (ixComma === -1) {\n    normalized = str;\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (ixDot < ixComma) {\n      normalized = str.replace('.', '');\n      normalized = normalized.replace(',', '.');\n    } else {\n      normalized = str.replace(',', '');\n    }\n  }\n\n  return parseFloat(normalized);\n}\n\n/**\n * Given an array of text values,\n * Convert them into a single Fraction\n *\n * Examples:\n *   * 1 1/2 sugar -> 3/2\n *   * 2 3 inch pieces ginger -> 6/1\n *   * 1/2 3 inch pieces ginger -> 3/2\n *   * 3 1/2 inch pieces ginger -> 7/2\n *   * 1/2 1/2 inch pieces ginger -> 1/4\n *\n * @param textArray - Quantities-Array.\n *\n * @returns - Merged quantities to a single fraction.\n */\nconst buildFraction = (textArray: Array<string>) => {\n  const { numerator, denominator } = textArray.reduce((fraction, text) => {\n    const split = text.split('/');\n    let n = parseFloatIgnoreLocale(split[0]);\n    let d = split.length > 1 ? parseFloatIgnoreLocale(split[1]) : 1;\n\n    // If this is the first run of the func\n    // return the n/d,\n    if (fraction.denominator === 0) { return { numerator: n, denominator: d }; }\n\n    // Multiple if the next number is an int\n    if (split.length === 1) {\n      n *= fraction.numerator;\n      d *= fraction.denominator;\n      const gcd = GCD(n, d);\n      return { numerator: n / gcd, denominator: d / gcd };\n    }\n\n    // If given a fraction, add them.\n    n = fraction.numerator * d + fraction.denominator * n;\n    d *= fraction.denominator;\n    const gcd = GCD(n, d);\n    return { numerator: n / gcd, denominator: d / gcd };\n  }, { numerator: 0, denominator: 0 });\n\n  return {\n    numerator,\n    denominator,\n  };\n};\n\nconst numberSplit = (number: string): { amount: string, rest: string } => {\n  let last = -1;\n  const length = number.length;\n  const numbers = ['1','2','3','4','5','6','7','8','9','0'];\n\n  numbers.forEach(n => {\n    if (number.lastIndexOf(n) > last) {\n      last = number.lastIndexOf(n);\n    }\n  });\n  if (length === (last + 1)) {\n    return { amount: number, rest: '' };\n  }\n  return { amount: number.substring(0, last + 1), rest: number.substring(last + 1, length) };\n};\n\nconst parseFraction = (fraction: string): Array<string> => {\n  const normalized = fraction.normalize('NFKD');\n  return normalized.split('\\u2044'); // '⁄'\n};\n\n/**\n * Given an Ingredient as text, parse it into an Ingredient object.\n *\n * @param parser - Mapping localized measurement -> normalized measurement.\n * @param line - The actual line of text to parse.\n */\nexport default (parser: Record<string, string>, line: string): IngredientInput => {\n  // Just some examples...\n  // 1g salt -> 1 | gram | salt\n  // 1 cup orange juice -> 1 | cup | orange juice\n  // 1 1/2cup wheat flour -> 1 1/2 | cup | wheat flour\n  // 2 chicken wings -> 2 | | chicken wings\n\n  // Basically, iterate the line.\n  // Accept up to 2 numbers for quantities.\n  // The first non number may be the measurement.\n  // Anything else is the title. Stop parsing.\n\n  // Split the line by the space char\n  const tags = line.split(' ');\n\n  const quantities: Array<string> = [];\n  let measurement: string | undefined;\n\n  let noMoreQuantities = false;\n  let ix;\n  for (ix = 0; ix < tags.length - 1; ++ix) {\n    const nextTag = tags[ix];\n    if (nextTag.length === 0) continue;\n\n    const vulgarFraction = !noMoreQuantities ? parseFraction(nextTag[0]) : [];\n\n    if (!noMoreQuantities && !Number.isNaN(parseInt(nextTag[0]))) {\n      // The next element starts with a number.\n      // Parse the number.\n      // The element may be followed by text, e. g. 1kg. Parse this as measurement, if it is some.\n      let { amount, rest } = numberSplit(nextTag); // eslint-disable-line prefer-const\n      quantities.push(amount);\n      if (rest) {\n        // OPT The fraction handling is hard to read.\n        // The first char of the rest could be a fraction, e. g. 1¾cup flour.\n        const restFrac = parseFraction(rest[0]);\n        if (restFrac[1]) {\n          noMoreQuantities = true;\n          quantities.push(`${restFrac[0]}/${restFrac[1]}`);\n          if (rest.length > 1) {\n            rest = rest.substring(1);\n          } else {\n            continue;\n          }\n        }\n        measurement = parser[rest.toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n          break;\n        }\n      }\n      if (quantities.length >= 2) {\n        noMoreQuantities = true;\n      }\n    } else if (!noMoreQuantities && vulgarFraction[1]) {\n      // Parse the fraction.\n      // After the fraction, no more quantities may follow up, but the measurement.\n      // E. g. ¾cup flour.\n      noMoreQuantities = true;\n      quantities.push(`${vulgarFraction[0]}/${vulgarFraction[1]}`);\n      if (nextTag.length > 1) {\n        measurement = parser[nextTag.substring(1).toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n        }\n        break;\n      }\n    } else {\n      // No number and no fraction, that is plain old text, maybe a measurement.\n      noMoreQuantities = true;\n      measurement = parser[nextTag.toLocaleLowerCase()];\n      if (measurement) {\n        ++ix;\n      }\n      break;\n    }\n  }\n\n  const { numerator, denominator } = buildFraction(quantities);\n  const title = tags.slice(ix).join(' ');\n  return { numerator: numerator === 0 ? undefined : numerator, denominator: denominator, measurement: measurement, title: title };\n};\n","import { createRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport ReactTextareaAutocomplete, { TriggerType } from '@webscopeio/react-textarea-autocomplete';\n\nimport '../../css/input.css';\nimport '../../css/textarea_autocomplete.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\n\nexport type AutocompleteListItem = {\n  name: string;\n  char: string;\n}\n\nexport interface ITextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem> extends IBaseInputComponentProps {\n  value?: string;\n  rows?: number;\n  placeholder?: string;\n\n  trigger: TriggerType<TListItem>;\n\n  onChange?: (name: string, newValue: string) => void;\n}\n\nconst Loading = () => <div className='loading'>Loading...</div>;\n\nexport default class TextareaAutocomplete<TListItem extends string | object = AutocompleteListItem> extends BaseInputComponent<ITextareaAutocompleteProps<TListItem>> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  getLabel(): React.ReactNode | undefined { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.props.label == null) {\n      return null;\n    } else if (this.props.tooltip) {\n      return (\n        <>\n          {this.props.label}\n          &nbsp;\n          <Icon icon='info-circle' className='tooltip-icon' />\n        </>\n      );\n    } else {\n      return this.props.label;\n    }\n  }\n\n  render() {\n    // console.log(`[TextareaAutocomplete] name=${this.props.name}, value=${this.props.value}`);\n\n    const { value = '', rows = 4, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <ReactTextareaAutocomplete<TListItem>\n                name     = {name}\n                value    = {value}\n                rows     = {rows}\n\n                loadingComponent = {Loading}\n                className = 'form-control'\n                movePopupAsYouType\n\n                onChange  = {this.handleChange}\n\n                {...rest}\n                ref = {this.ref}\n              />\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useMemo } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { composeValidators, formatValidation, requiredValidator, ValueValidatorFunction } from '../../store/Validation';\nimport TextareaAutocomplete, { AutocompleteListItem, ITextareaAutocompleteProps } from '../Input/TextareaAutocomplete';\n\nexport interface IReTextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem>\n    extends ITextareaAutocompleteProps<TListItem> {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n}\n\nconst ReTextareaAutocomplete = forwardRef<any, IReTextareaAutocompleteProps>(({\n    name, required, format, parse,\n    onChange, onFocus, onBlur, ...rest }: IReTextareaAutocompleteProps, ref) => {\n  const intl = useIntl();\n\n  const validators = useMemo(() => {\n    const vals: Array<ValueValidatorFunction> = [];\n\n    if (required) {\n      vals.push(requiredValidator);\n    }\n\n    return composeValidators(...vals);\n  }, [required]);\n\n  return (\n    <Field name={name} validate={validators} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <TextareaAutocomplete\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref as any} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReTextareaAutocomplete;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport Icon from '../../common/components/Icon';\nimport Tooltip from '../../common/components/Tooltip';\n\nexport interface ITabbedViewProps {\n  id:          string;\n  labels:      Array<string>;\n  tooltips?:   Array<string>;\n\n  initialTab?: string;\n  activeTab?:  string;\n  onSelect?:   (newActiveTab: string) => void;\n\n  errors?:     string;\n  children:    Array<React.ReactNode>;\n}\n\nconst messages = defineMessages({\n  preview: {\n    id: 'recipe.create.preview',\n    description: 'Preview',\n    defaultMessage: 'Preview',\n  },\n});\n\nconst TabbedView: React.FC<ITabbedViewProps> = ({\n    id, labels, errors, tooltips,\n    initialTab, activeTab, onSelect,\n    children } : ITabbedViewProps) => {\n  const { formatMessage } = useIntl();\n\n  const contentClassName = classNames('content', {\n    'has-error': !!errors,\n  });\n\n  const navClassName = classNames('nav', 'nav-tabs', {\n    'has-error': !!errors,\n  });\n\n  const tabs = children.slice(0, children.length - 1).map((childr, index) => (\n    <Tab\n        // eslint-disable-next-line react/no-array-index-key\n        key = {index.toString()}\n        title = {(\n          <>\n            {labels[index]}\n            {tooltips?.[index] && (\n              <>\n                &nbsp;\n                <Tooltip\n                    id = {`${labels[index]}-tooltip`}\n                    tooltip   = {tooltips[index]}>\n                  <Icon icon='info-circle' className='tooltip-icon' aria-label={tooltips[index]} aria-describedby={undefined} />\n                </Tooltip>\n              </>\n            )}\n          </>\n        )}\n        eventKey  = {index.toString()}\n        className = 'editor'>\n      <div className={contentClassName}>{childr}</div>\n    </Tab>\n  ));\n\n  const handleSelect = useCallback((selectedKey: string | null) => {\n    if (selectedKey) {\n      onSelect?.(selectedKey);\n    }\n  }, [onSelect]);\n\n  return (\n    <div className='live-editor'>\n      <Tabs\n          id = {`${id}-tabs`}\n          defaultActiveKey = {initialTab || '0'}\n          activeKey = {activeTab}\n          onSelect  = {handleSelect}\n          className = {navClassName}>\n        {tabs}\n        <Tab\n            title = {formatMessage(messages.preview)}\n            className = 'preview'\n            eventKey  = 'preview'>\n          <div className={contentClassName}>{children[children.length - 1]}</div>\n        </Tab>\n      </Tabs>\n      <div className='help-text error'>{errors}</div>\n    </div>\n  );\n};\n\nexport default TabbedView;\n","import { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\nimport { FormSpy } from 'react-final-form';\nimport { ValidationErrors } from 'final-form';\n\nimport '../css/smart_text_box.css';\n\nimport IngredientGroups from '../../recipe/components/IngredientGroups';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport parseIngredient from '../utilts/parseIngredient';\nimport { Ingredient, IngredientGroup, IngredientInput, SubRecipe } from '../../recipe/store/RecipeTypes';\nimport SubRecipes from '../../recipe/components/SubRecipes';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReTextareaAutocomplete from '../../common/components/ReduxForm/ReTextareaAutocomplete';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport TabbedView from './TabbedView';\nimport { slugify } from '../../common/utility';\n\nconst messages = defineMessages({\n  ingredients_label: {\n    id: 'recipe.create.ingredients_label',\n    description: 'Recipe ingredients label',\n    defaultMessage: 'Ingredients',\n  },\n  ingredients_tooltip: {\n    id: 'recipe.create.ing.info_desc',\n    description: 'info_desc',\n    defaultMessage: 'Each Ingredient should be on its own line. You can form groups by ending the groups first line with a colon (\":\").',\n  },\n  ingredients_placeholder: {\n    id: 'recipe.create.ing.ingredients_placeholder',\n    description: 'Example for writing ingredients',\n    defaultMessage: 'Dough:\\n300 g flour\\n100 ml milk\\n\\nDip:\\n100 ml olive oil\\n...',\n  },\n\n  subrecipes_label: {\n    id: 'recipe.create.subrecipes_label',\n    description: 'Recipe links label',\n    defaultMessage: 'Recipe links',\n  },\n  subrecipes_tooltip: {\n    id: 'recipe.create.subrecipes.tooltip',\n    description: 'Subrecipes tooltip',\n    defaultMessage: 'If the recipe is made of several subrecipes, then link them here. Each Recipe Link should be on its own line.',\n  },\n  subrecipes_placeholder: {\n    id: 'recipe.create.subrecipes.placeholder',\n    description: 'Subreceipes placeholder',\n    defaultMessage: ':dough-1\\n:olive-oil-dip-1',\n  },\n});\n\nfunction normalizeLine(line: string): string {\n  let res = line.replace(/\\t/g, ' ');\n  res = res.trim();\n  return res;\n}\n\n/* IngredientGroups */\n\nexport function ingredientsFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<IngredientGroup>): string {\n  let tr = '';\n  if (values) {\n    values.filter(ig => ig.title.trim().length > 0 || ig.ingredients.length > 0).forEach(ig => {\n      if (ig.title) {\n        tr += `${ig.title}:\\n`;\n      }\n      ig.ingredients.forEach(i => {\n        const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n        tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n        tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n        tr += `${i.title}\\n`;\n      });\n      tr += '\\n';\n    });\n  }\n  if (tr.endsWith('\\n')) {\n    return tr.substring(0, tr.length - 2);\n  }\n  return tr;\n}\n\nexport function ingredientsParser(parser: Record<string, string>, value: string | undefined): Array<IngredientGroup> {\n  if (!value) return [];\n  const dict = [{ slug: 'default', title: '', ingredients: [] }];\n  let igTitle = '';\n  let ings: Array<IngredientInput> | undefined = dict.find(t => t.title === '')?.ingredients; // Should always exist, as it is the init group.\n  if (ings == null) throw new Error('Invalid state: ings may not be null.');\n  if (value) {\n    const tags = value.split('\\n').map(normalizeLine).filter(t => t.length > 0);\n    tags.forEach(line => {\n      if (line.length > 0) {\n        // Check if the line is an IG title\n        // If line is IG title, update igTitle and continue\n        // Else add ing to the current ig group\n        if (line.endsWith(':') && line.length > 1) {\n          igTitle = line.substring(0, line.length - 1);\n          dict.push({ slug: slugify(igTitle), title: igTitle, ingredients: [] });\n          ings = dict.find(t => t.title === igTitle)?.ingredients; // Should always exist, as we just pushed it.\n          if (ings == null) throw new Error('Invalid state: The create ings may not be null.');\n        } else {\n          if (ings == null) throw new Error('Invalid state: ings may not be null.');\n          ings.push(parseIngredient(parser, line));\n        }\n      }\n    });\n  }\n  return dict;\n}\n\n/* SubRecipe */\n\nexport function subrecipesFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<SubRecipe>) {\n  let tr = '';\n  if (values) {\n    values.forEach(i => {\n      const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n      tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n      tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n      tr += `${i.title}\\n`;\n    });\n  }\n  return tr.substring(0, tr.length - 1);\n}\n\nexport function subrecipesParser(parser: Record<string, string>, value: string | undefined): Array<SubRecipe> {\n  if (!value) return [];\n  const ings: Array<SubRecipe> = [];\n  const subRecipes = value.split('\\n').map(normalizeLine).filter(t => t.length > 1 && !t.startsWith(':'));\n  subRecipes.forEach(sr => {\n    if (sr.length > 0) {\n      ings.push(parseIngredient(parser, sr) as SubRecipe);\n    }\n  });\n  return ings;\n}\n\ninterface IItemProps {\n  entity: AutocompleteListItem;\n}\nconst Item = ({ entity: { char } }: IItemProps) => <div>{char}</div>;\n\nexport interface IIngredientGroupsBoxProps {\n  nameIg:   string;\n  nameSub:  string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<Array<AutocompleteListItem>>;\n}\n\nconst IngredientGroupsBox: React.FC<IIngredientGroupsBoxProps> = ({\n    nameIg, nameSub, fetchRecipeList }: IIngredientGroupsBoxProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const location = useLocation();\n\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const checkErrorneous = useCallback((errors: ValidationErrors, touched: Record<string, boolean> | undefined) => {\n    if (touched?.[nameIg] === true && errors?.[nameIg] != null) {\n      return formatValidation(intl, errors?.[nameIg]);\n    } else if (touched?.[nameSub] && errors?.[nameSub] != null) {\n      return formatValidation(intl, errors?.[nameSub]);\n    } else {\n      return undefined;\n    }\n  }, [intl]);\n\n  return (\n    <FormSpy subscription={{ errors: true, touched: true, initialValues: true }}>\n      {({ errors, touched, initialValues }) => (\n        <TabbedView\n            id       = 'ingredients'\n            labels   = {[formatMessage(messages.ingredients_label), formatMessage(messages.subrecipes_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors   = {checkErrorneous(errors, touched)}\n            tooltips = {[formatMessage(messages.ingredients_tooltip), formatMessage(messages.subrecipes_tooltip)]}>\n          <FieldSpyValues fieldNames={[nameSub]}>\n            {values => (\n              <ReInput\n                  name     = {nameIg}\n                  rows     = {8}\n                  placeholder = {formatMessage(messages.ingredients_placeholder)}\n                  required = {initialValues && !values[nameSub]} />\n            )}\n          </FieldSpyValues>\n          <div className='form-group'>\n            <ReTextareaAutocomplete\n                name  = {nameSub}\n                rows = {8}\n                placeholder = {formatMessage(messages.subrecipes_placeholder)}\n                trigger={{\n                ':': {\n                  dataProvider: token => fetchRecipeList(token),\n                  component: Item,\n                  output: item => item.char,\n                },\n              }} />\n          </div>\n          <FieldSpyValues fieldNames={[nameIg, nameSub]}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <IngredientsPreview\n                      igData = {ingredientsParser(measurementsContext.parser, values[nameIg])}\n                      srData = {subrecipesParser(measurementsContext.parser,  values[nameSub])} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IIngredientsPreviewProps {\n  igData: Array<IngredientGroup>;\n  srData: Array<SubRecipe>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst IngredientsPreview: React.FC<IIngredientsPreviewProps> = ({ igData, srData }: IIngredientsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(igData, i => {\n      const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n      return { ...i, quantity: custom };\n    }), [igData]);\n\n  const srDataFormatted = useMemo(() => srData.map(i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [igData]);\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className='ingredients-panel'>\n          <div className='ingredient-groups'>\n            <SubRecipes subRecipes={srDataFormatted} />\n            <IngredientGroups groups={igDataFormatted} hasSubrecipes={srData.length > 0} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientGroupsBox;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { FormSpy } from 'react-final-form';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport Directions from '../../recipe/components/Directions';\nimport { Ingredient, IngredientGroup } from '../../recipe/store/RecipeTypes';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport { ingredientsParser } from './IngredientGroupsBox';\nimport TabbedView from './TabbedView';\n\nconst messages = defineMessages({\n  directions_label: {\n    id: 'recipe.create.directions_label',\n    description: 'Directions label',\n    defaultMessage: 'Directions',\n  },\n  directions_tooltip: {\n    id: 'recipe.create.dir.tooltip',\n    description: 'Directions Tooltip',\n    defaultMessage: 'Each Direction should be on its own line. You can form chapters by ending the chapters heading with a colon (\":\").',\n  },\n  directions_placeholder: {\n    id: 'recipe.create.dir.placeholder',\n    description: 'Directions Placeholder',\n    defaultMessage: 'Dough:\\nPrepare the dough.\\n\\nDip:\\nPrepare the dip.\\n...',\n  },\n});\n\nexport interface IDirectionBox {\n  name:       string;\n}\n\nconst DirectionBox: React.FC<IDirectionBox> = ({\n    name }: IDirectionBox) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  return (\n    <FormSpy subscription={{ errors: true }}>\n      {({ errors }) => (\n        <TabbedView\n            id        = 'directions'\n            labels    = {[formatMessage(messages.directions_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors    = {formatValidation(intl, errors?.[name])}\n            tooltips  = {[formatMessage(messages.directions_tooltip)]}>\n          <ReInput\n              name = {name}\n              rows     = {8}\n              placeholder = {formatMessage(messages.directions_placeholder)} />\n          <FieldSpyValues fieldNames={[name, 'ingredientGroupsS']}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <DirectionsPreview\n                      directions = {values[name] ?? ''}\n                      ingredients = {ingredientsParser(measurementsContext.parser, values.ingredientGroupsS)} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IDirectionsPreviewProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst DirectionsPreview: React.FC<IDirectionsPreviewProps> = ({ directions, ingredients }: IDirectionsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(ingredients, i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [ingredients]);\n\n  const isMultiDirections = directions.includes(':\\n');\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className={classNames('directions-panel', { 'multi-directions': isMultiDirections })}>\n          <div className='direction-groups'>\n            <Directions directions={directions} ingredients={igDataFormatted} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default DirectionBox;\n","import { useCallback, useContext, useMemo, useRef } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Col, Container, Form, Row } from 'react-bootstrap';\nimport { Form as ReduxForm } from 'react-final-form';\n\nimport '../../recipe/css/recipe.css';\nimport '../css/recipe_form.css';\n\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport TagListContainer from '../containers/TagListContainer';\nimport CourseSelectContainer from '../containers/CourseSelectContainer';\nimport CuisineSelectContainer from '../containers/CuisineSelectContainer';\nimport RecipeFormToolbar, { SubmittingObserver, SubmittingObserverClass } from '../containers/RecipeFormToolbar';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReCheckbox from '../../common/components/ReduxForm/ReCheckbox';\nimport InitialValuesResetter from '../../common/components/ReduxForm/ReInitialValuesResetter';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport ReFormStatus from '../../common/components/ReduxForm/ReFormStatus';\nimport RecipeFormImageRow from './RecipeFormImageRow';\nimport IngredientGroupsBox, { ingredientsFormatter, ingredientsParser, subrecipesFormatter, subrecipesParser } from './IngredientGroupsBox';\nimport DirectionBox from './DirectionBox';\nimport { ValidationResult } from '../../common/store/Validation';\n\nconst messages = defineMessages({\n  name_label: {\n    id: 'recipe.create.name_label',\n    description: 'Recipe name label',\n    defaultMessage: 'Recipe name',\n  },\n  course_label: {\n    id: 'recipe.create.course_label',\n    description: 'Course label',\n    defaultMessage: 'Course',\n  },\n  cuisine_label: {\n    id: 'recipe.create.cuisine_label',\n    description: 'Cuisine label',\n    defaultMessage: 'Cuisine',\n  },\n  tags_label: {\n    id: 'recipe.create.tags_label',\n    description: 'Tags label',\n    defaultMessage: 'Tags',\n  },\n  prep_time_label: {\n    id: 'recipe.create.prep_time_label',\n    description: 'Prep time label',\n    defaultMessage: 'Prep time (min)',\n  },\n  cooking_time_label: {\n    id: 'recipe.create.cooking_time_label',\n    description: 'Cooking time label',\n    defaultMessage: 'Cooking time (min)',\n  },\n  servings_label: {\n    id: 'recipe.create.servings_label',\n    description: 'Servings label',\n    defaultMessage: 'Servings',\n  },\n  information_label: {\n    id: 'recipe.create.information_label',\n    description: 'Recipe information label',\n    defaultMessage: 'Recipe information',\n  },\n  information_placeholder: {\n    id: 'recipe.create.information_placeholder',\n    description: 'Recipe information placeholder',\n    defaultMessage: 'A quick description of the recipe',\n  },\n  source_label: {\n    id: 'recipe.create.source_label',\n    description: 'Rating source label',\n    defaultMessage: 'Source',\n  },\n  source_tooltip: {\n    id: 'recipe.create.source_tooltip',\n    description: 'Rating source tooltip',\n    defaultMessage: 'Where the original recipe is from.',\n  },\n  public_label: {\n    id: 'recipe.create.public_label',\n    description: 'Recipe set public label',\n    defaultMessage: 'Public Recipe',\n  },\n});\n\nexport interface IRecipeFormProps {\n  recipe: Recipe | undefined;\n  isNew: boolean;\n  location: string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<AutocompleteListItem[]>;\n  onSubmit: (form: Recipe) => Promise<ValidationResult>;\n}\n\ninterface RecipeFormatted extends Recipe {\n  ingredientGroupsS: string;\n  subrecipesS: string;\n}\n\nconst RecipeForm: React.FC<IRecipeFormProps> = ({\n    recipe, isNew, location,\n    fetchRecipeList, onSubmit } : IRecipeFormProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const submittingObserverRef = useRef<SubmittingObserverClass>(null);\n  const handleSubmit = useCallback((form: RecipeFormatted) => {\n    // Do not disable the submit-button on submitting, to prevent losing focus.\n    if (submittingObserverRef.current?.getSubmitting()) return Promise<null>;\n\n    return onSubmit({\n      ...form,\n      ingredientGroups: ingredientsParser(measurementsContext.parser, form.ingredientGroupsS),\n      subrecipes:        subrecipesParser(measurementsContext.parser, form.subrecipesS),\n    });\n  }, [measurementsContext.parser, submittingObserverRef.current]);\n\n  const initialValues: Partial<RecipeFormatted> | undefined = useMemo(() => {\n    if (isNew && !recipe) {\n      return {\n        slug: '',\n        public: true,\n        servings: 1,\n      };\n    } else {\n      return recipe\n        ? {\n        ...recipe,\n        ingredientGroupsS: ingredientsFormatter(intl, measurementsContext.formatter, recipe.ingredientGroups),\n        subrecipesS:        subrecipesFormatter(intl, measurementsContext.formatter, recipe.subrecipes),\n        } : undefined;\n    }\n    }, [recipe, isNew, location]);\n\n  // console.log(`[RecipeForm] recipe=${JSON.stringify(recipe)}, initialValues=${JSON.stringify(initialValues)}`);\n\n  return (\n    <ReduxForm\n        initialValues = {initialValues}\n        onSubmit = {handleSubmit}\n        subscription = {{ submitting: true }}\n        render = {({ form, handleSubmit: renderSubmit }) => (\n          <Form className='recipe-form' onSubmit={renderSubmit}>\n            <InitialValuesResetter form={form} initialValues={initialValues} />\n            <SubmittingObserver ref={submittingObserverRef} />\n            <Container>\n              <ReFormStatus />\n              <Row>\n                <Col id='recipe-meta' md={5} lg={4}>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name      = 'title'\n                          label     = {formatMessage(messages.name_label)}\n                          maxLength = {250}\n                          required\n                          />\n                    </Col>\n                  </Row>\n\n                  <RecipeFormImageRow />\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <CourseSelectContainer\n                          name     = 'course'\n                          label    = {formatMessage(messages.course_label)} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <CuisineSelectContainer\n                          name     = 'cuisine'\n                          label    = {formatMessage(messages.cuisine_label)} />\n                    </Col>\n                    <Col xs={12}>\n                      <TagListContainer\n                          name     = 'tags'\n                          label    = {formatMessage(messages.tags_label)} />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'prepTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.prep_time_label)}\n                          min      = {1}\n                          max      = {999} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'cookTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.cooking_time_label)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'servings'\n                          type     = 'number'\n                          label    = {formatMessage(messages.servings_label)}\n                          min      = {1}\n                          max      = {999}\n                          required />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'source'\n                          label    = {formatMessage(messages.source_label)}\n                          tooltip  = {formatMessage(messages.source_tooltip)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReCheckbox\n                          name      = 'public'\n                          label     = {formatMessage(messages.public_label)} />\n                    </Col>\n                  </Row>\n\n                </Col>\n                <Col id='recipe' md={7} lg={8}>\n                  <ReInput\n                      name     = 'info'\n                      rows     = {3}\n                      label    = {formatMessage(messages.information_label)}\n                      placeholder = {formatMessage(messages.information_placeholder)} />\n                  <IngredientGroupsBox\n                      nameIg   = 'ingredientGroupsS'\n                      nameSub  = 'subrecipesS'\n                      fetchRecipeList = {fetchRecipeList} />\n                  <DirectionBox\n                      name       = 'directions' />\n\n                  <RecipeFormToolbar />\n                </Col>\n              </Row>\n            </Container>\n          </Form>\n    )} />\n  );\n};\n\nexport default RecipeForm;\n","import { useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport * as _ from 'lodash-es';\n\nimport { RootState } from '../../app/Store';\nimport { useSelector } from '../../common/store/redux';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport { getRoutePath } from '../../common/utility';\nimport UserRole from '../../common/types/UserRole';\n\nconst EditGuard: React.FC = () => {\n  const params = useParams();\n  const nav = useNavigate();\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const accountState = useSelector((state: RootState) => state.account);\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n  const recipe = recipeState.item;\n  const { pending } = recipeState.meta;\n  const wasRenderedRef = useRef<boolean>(false);\n\n  const user = accountState.item;\n  const mayEdit = user != null && (isNew || (user.id === recipe?.author || user.role === UserRole.STAFF || user.role === UserRole.ADMIN));\n\n  useEffect(() => {\n    if (user != null && pending === PendingState.COMPLETED && recipe != null && !mayEdit) {\n      nav(getRoutePath(`/recipe/${recipeSlug}`));\n    }\n  }, [user, recipeState, mayEdit]);\n\n  useEffect(() => {\n    if (recipe?.slug != null && pending === PendingState.COMPLETED && isNew && wasRenderedRef.current) {\n      setTimeout(() => {\n        nav(getRoutePath(`/recipe/edit/${recipe.slug}`));\n      }, 250);\n    }\n    wasRenderedRef.current = true;\n  }, [pending]);\n\n  const recipeMeta = recipeState.meta;\n  // If recipe not found, redirect to NotFound-Page\n  useEffect(() => {\n    if (_.get(recipeMeta.error, 'status') === 404) {\n      nav(getRoutePath('/NotFound'));\n    }\n  }, [recipeMeta.error]);\n\n  return null;\n};\n\nexport default EditGuard;\n","import { useCallback, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport RecipeForm from '../components/RecipeForm';\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport EditGuard from '../components/EditGuard';\n\nconst RecipeFormPage: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    new_recipe: {\n      id: 'recipe_form.new_recipe',\n      description: 'New Recipe documentTitle',\n      defaultMessage: 'New Recipe',\n    },\n  });\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  const location = useLocation();\n\n  const fetchRecipeList = RecipeFormActions.fetchRecipeList;\n  const handleSubmit = useCallback(async (data: Recipe) => RecipeFormActions.save(dispatch, data), []);\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const recipe = useSelector((state: RootState) => state.recipeForm.item);\n\n  // Load Recipe / or init.\n  useEffect(() => {\n    if (recipeSlug) {\n      if (isNew) {\n        dispatch(RecipeFormActions.reset());\n      } else {\n        dispatch(RecipeFormActions.load(recipeSlug));\n      }\n    }\n  }, [recipeSlug, location.key]);\n\n  // componentWillUnmount\n  useEffect(() => () => {\n    dispatch(RecipeFormActions.reset());\n  }, []);\n\n  return (\n    <PageWrapper title={isNew ? formatMessage(messages.new_recipe) : recipe?.title}>\n      <EditGuard />\n      <RecipeForm\n          recipe = {recipe}\n          isNew  = {isNew}\n          location = {location.key}\n          fetchRecipeList = {fetchRecipeList}\n          onSubmit = {handleSubmit} />\n    </PageWrapper>\n  );\n};\n\nexport default RecipeFormPage;\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, toTag } from '../../recipe/store/RecipeTypes';\nimport { toBasicAction } from '../../common/store/redux';\nimport { handleError } from '../../common/requestUtils';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, TAGS_STORE } from './types';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map(toCourse),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map(toCuisine),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toTag),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["useSingle","getFunction","obj","useEffect","forwardRef","_ref","ref","parser","formatter","name","required","isMulti","onFocus","onBlur","rest","intl","useIntl","formatValue","useCallback","value","undefined","_jsx","Field","validate","requiredValidator","validateFields","children","fprops","CreatableSelect","input","errors","formatValidation","meta","error","dirtySinceLastSubmit","submitError","onChange","_name","event","label","dispatch","useDispatch","fetchTags","RecipeGroupActions","tags","useSelector","state","recipeGroups","items","data","useMemo","filter","t","title","length","map","optionallyFormatMessage","sort","sortByLabel","locale","newValue","selected","forEach","v","tag","find","push","_","ReCreatableSelect","fetchCourses","courses","c","_courses$find","fetchCuisines","cuisines","_cuisines$find","messages","defineMessages","submit","id","description","defaultMessage","view","SubmitViewButton","_ref2","isNew","submitting","pristine","onSubmit","onLink","formatMessage","asView","onClick","Toolbar","position","_jsxs","Button","variant","type","disabled","isDemoMode","accessKey","className","style","visibility","LoadingSpinner","color","SubmittingObserver","_props","FormSpy","subscription","_ref3","SubmittingObserverClass","Component","getSubmitting","this","props","render","RecipeFormToolbar","_recipeState$item2","_recipeState$item3","nav","useNavigate","recipeState","recipeForm","preload","item","RecipeActions","_recipeState$item","getRoutePath","concat","slug","FileSelect","BaseInputComponent","constructor","arguments","createRef","handleChange","_this$props$onChange","_this$props","_event$target$files","call","target","files","handleClear","clearValue","current","focus","accept","tooltip","readOnly","helpText","Form","Group","getGroupProps","controlId","getFormGroupClassNames","ConditionalWrapper","condition","childr","Tooltip","getLabel","getHelpText","getErrorMessage","InputGroup","Control","Text","Icon","icon","size","identity","parse","_fprops$input$value","namee","photo_label","RecipeFormImageRow","key","useLocation","photoInputRef","useRef","imageUrl","setImageUrl","useState","IMAGE_PLACEHOLDER","getRecipeImagePlaceholder","handleImageChange","URL","createObjectURL","getDisplayImage","recipePhoto","getRecipeImage","_Fragment","Row","Col","xs","lg","xl","xxl","marginLeft","marginRight","WidthHeightRatio","height","width","FieldSpyValues","fieldNames","values","Image","src","photo","alt","objectFit","ReFileSelect","parseFloatIgnoreLocale","str","normalized","ixDot","indexOf","ixComma","replace","parseFloat","numberSplit","number","last","n","lastIndexOf","amount","substring","parseFraction","fraction","normalize","split","line","quantities","measurement","ix","noMoreQuantities","nextTag","vulgarFraction","Number","isNaN","parseInt","toLocaleLowerCase","restFrac","numerator","denominator","textArray","reduce","text","d","gcd","GCD","buildFraction","slice","join","Loading","TextareaAutocomplete","rows","ReactTextareaAutocomplete","loadingComponent","movePopupAsYouType","format","validators","vals","composeValidators","preview","labels","tooltips","initialTab","activeTab","onSelect","contentClassName","classNames","navClassName","tabs","index","Tab","eventKey","toString","handleSelect","selectedKey","Tabs","defaultActiveKey","activeKey","ingredients_label","ingredients_tooltip","ingredients_placeholder","subrecipes_label","subrecipes_tooltip","subrecipes_placeholder","normalizeLine","res","trim","ingredientsFormatter","tr","ig","ingredients","i","locMsrmnt","formatQuantity","itemCount","endsWith","ingredientsParser","_dict$find","dict","igTitle","ings","Error","_dict$find2","slugify","parseIngredient","subrecipesFormatter","subrecipesParser","startsWith","sr","Item","entity","char","IngredientsPreview","_ref4","igData","srData","igDataFormatted","recurseIngredients","cb","custom","quantity","srDataFormatted","SubRecipes","subRecipes","IngredientGroups","groups","hasSubrecipes","nameIg","nameSub","fetchRecipeList","location","setActiveTab","pathname","NEW_ITEM_URL_ID","measurementsContext","useContext","MeasurementContext","checkErrorneous","touched","initialValues","TabbedView","ReInput","placeholder","ReTextareaAutocomplete","trigger","dataProvider","token","component","output","directions_label","directions_tooltip","directions_placeholder","DirectionsPreview","directions","isMultiDirections","includes","Directions","_values$name","ingredientGroupsS","name_label","course_label","cuisine_label","tags_label","prep_time_label","cooking_time_label","servings_label","information_label","information_placeholder","source_label","source_tooltip","public_label","recipe","submittingObserverRef","handleSubmit","form","_submittingObserverRe","Promise","ingredientGroups","subrecipes","subrecipesS","public","servings","ReduxForm","renderSubmit","InitialValuesResetter","Container","ReFormStatus","md","maxLength","sm","CourseSelectContainer","CuisineSelectContainer","TagListContainer","min","max","ReCheckbox","IngredientGroupsBox","DirectionBox","EditGuard","_params$recipe","params","useParams","recipeSlug","accountState","account","pending","wasRenderedRef","user","mayEdit","author","role","UserRole","STAFF","ADMIN","PendingState","COMPLETED","setTimeout","recipeMeta","RecipeFormPage","new_recipe","RecipeFormActions","async","PageWrapper","RecipeForm","toBasicAction","COURSES_STORE","ACTION","GET_START","request","get","serverURLs","course","then","GET_SUCCESS","payload","body","results","courseDto","toCourse","catch","err","handleError","CUISINES_STORE","cuisine","cuisineDto","toCuisine","TAGS_STORE","toTag"],"sourceRoot":""}