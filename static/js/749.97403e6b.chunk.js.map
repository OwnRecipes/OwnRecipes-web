{"version":3,"file":"static/js/749.97403e6b.chunk.js","mappings":"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","sources":["common/components/Input/Select.tsx","common/components/PageWrapper.tsx","common/hooks/useBlocker.ts","common/components/NavigationPrompt.tsx","common/components/FormStatus.tsx","common/components/ReInput/ReFormStatus.tsx","common/components/Toast.tsx","common/components/Toolbar.tsx","recipe/store/RecipeActions.ts"],"sourcesContent":["import { createRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { defineMessages, injectIntl, WrappedComponentProps } from 'react-intl';\nimport SelectReact, { MultiValue, SingleValue } from 'react-select';\nimport CreatableSelectReact from 'react-select/creatable';\nimport AsyncReact from 'react-select/async';\n\nimport '../../css/select.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Tooltip from '../Tooltip';\n\nconst selectCommonMessages = defineMessages({\n  no_options: {\n    id: 'select.no_options',\n    description: 'Info text when opening a select dropdown with no options.',\n    defaultMessage: 'No options',\n  },\n});\n\nexport interface SelectDataType {\n  value: string;\n  label: string;\n}\n\nexport interface ISelectProps extends IBaseInputComponentProps {\n  value?: string;\n  data?:  Array<SelectDataType>;\n\n  onChange?: (name: string, newValue: string | undefined) => void;\n}\nexport interface ISelectMultiProps extends IBaseInputComponentProps {\n  value?: Array<string>;\n  data?:  Array<SelectDataType>;\n  isMulti: true;\n\n  onChange?: (name: string, newValue: Array<string>) => void;\n}\nexport const isMultiSelect = (props: unknown): props is ISelectMultiProps => (props as ISelectMultiProps).isMulti === true;\n\nfunction findSelectedOptions(options: Array<SelectDataType>, value: Array<string> | string | undefined): Array<SelectDataType> | SelectDataType {\n  if (Array.isArray(value)) {\n    return options.filter(o => value.includes(o.value));\n  } else {\n    return options.find(o => o.value === value) ?? '' as unknown as SelectDataType;\n  }\n}\n\nexport class SelectBase extends BaseInputComponent<(ISelectProps | ISelectMultiProps) & WrappedComponentProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType> | MultiValue<SelectDataType>) => {\n    if (isMultiSelect(this.props)) {\n      this.props.onChange?.(this.props.name, (data as MultiValue<SelectDataType>).map(d => d.value));\n    } else {\n      this.props.onChange?.(this.props.name, (data as SingleValue<SelectDataType>)?.value);\n    }\n  };\n\n  render() {\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const dataOptions = data ?? [];\n    const selectedOptions = findSelectedOptions(dataOptions, value);\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <SelectReact\n              inputId     = {`${name}-input`}\n              name        = {name}\n              value       = {selectedOptions}\n              options     = {data}\n              noOptionsMessage={() => this.props.intl.formatMessage(selectCommonMessages.no_options)}\n\n              isDisabled  = {readOnly || disabled}\n\n              onChange    = {this.handleChange}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport const Select = injectIntl(SelectBase, { forwardRef: true });\n\nexport interface IAsyncSelectProps extends Omit<ISelectProps, 'data'> {\n  initialValueLabel?: string;\n  loadOptions: (searchTerm: string) => Promise<Array<SelectDataType>>;\n}\n\ninterface IAsyncSelectState {\n  data: Array<SelectDataType> | undefined;\n}\n\nexport class AsyncSelectBase extends BaseInputComponent<IAsyncSelectProps & WrappedComponentProps, IAsyncSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: IAsyncSelectProps & WrappedComponentProps) {\n    super(props);\n\n    this.state = {\n      data: undefined,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType>) => {\n    this.props.onChange?.(this.props.name, data?.value);\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleLoadOptions = (searchTerm: string, callback: any) => {\n    if (!searchTerm) return callback([]);\n    return this.props.loadOptions(searchTerm).then(res => {\n      this.setState({ data: res });\n      return res;\n    });\n  };\n\n  render() {\n    const { onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, value, initialValueLabel, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, loadOptions, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    let selectedOption = this.state.data?.find(o => o.value === value);\n    if (value && initialValueLabel && this.state.data == null) {\n      selectedOption = { value: value, label: initialValueLabel };\n    }\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <AsyncReact\n              inputId     = {`${name}-input`}\n              name        = {name}\n              value       = {selectedOption}\n              loadOptions = {this.handleLoadOptions}\n\n              isDisabled  = {readOnly || disabled}\n\n              onChange    = {this.handleChange}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              placeholder = ''\n              noOptionsMessage={() => this.props.intl.formatMessage(selectCommonMessages.no_options)}\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport const AsyncSelect = injectIntl(AsyncSelectBase, { forwardRef: true });\n\nexport interface ICreatableSelectValues extends IBaseInputComponentProps {\n  value?:   Array<string> | string;\n  data?:    Array<SelectDataType>;\n  isMulti?: boolean;\n}\ninterface ICreatableSelectProps extends ICreatableSelectValues {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onChange?: (name: string, newValue: any | undefined) => void;\n}\n\ninterface ICreatableSelectState {\n  options: Array<SelectDataType>;\n}\n\nconst isValidNewOption = (value: string): boolean => !!value;\n\nexport class CreatableSelect extends BaseInputComponent<ICreatableSelectProps, ICreatableSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: ICreatableSelectProps) {\n    super(props);\n\n    this.state = {\n      options: [],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ICreatableSelectProps, state: ICreatableSelectState) {\n    if (nextProps.data == null || nextProps.data.length === 0 || state.options.length === 0) return state;\n    const dataIdents = nextProps.data.map(d => d.value);\n    const nextOptions = [...state.options];\n\n    for (let index = nextOptions.length - 1; index >= 0; --index) {\n      if (dataIdents.includes(nextOptions[index].value)) {\n        nextOptions.splice(index, 1);\n      }\n    }\n\n    if (state.options.length === nextOptions.length) return state;\n\n    return {\n      ...state,\n      options: nextOptions,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: MultiValue<SelectDataType> | SingleValue<SelectDataType>) => {\n    if (this.props.onChange) {\n      const val = data != null && Array.isArray(data) ? data.map(dat => dat.value) : (data as SingleValue<SelectDataType>)?.value;\n      this.props.onChange(\n        this.props.name,\n        val\n      );\n    }\n  };\n\n  handleCreate = (inputValue: string) => {\n    const newOption: SelectDataType = { value: inputValue, label: inputValue };\n    this.setState(prev => (\n        {\n          options: [...prev.options, newOption],\n        }\n      ),\n      () => {\n        if (!this.props.isMulti) {\n          this.handleChange(newOption);\n        } else {\n          const dataOptions = this.props.data ?? [];\n          const options = dataOptions.concat(this.state.options);\n          const selectedOptions = findSelectedOptions(options, [...(this.props.value as Array<string> | undefined ?? []), inputValue]);\n          this.handleChange(selectedOptions);\n        }\n      });\n  };\n\n  render() {\n    // console.log(`[Select] name=${this.props.name}, value=${JSON.stringify(this.props.value)}`);\n\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const dataOptions = data ?? [];\n    const options = dataOptions.concat(this.state.options);\n    const selectedOptions = findSelectedOptions(options, value);\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <CreatableSelectReact\n              inputId = {`${name}-input`}\n              onChange = {this.handleChange}\n              isValidNewOption = {isValidNewOption}\n              onCreateOption = {this.handleCreate}\n              isClearable\n              value = {selectedOptions}\n              isDisabled  = {readOnly || disabled}\n\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              options = {options}\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","import { useContext, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router';\nimport classNames from 'classnames';\n\nimport { AnyComponent } from '../../types/Types';\nimport DynamicHeightContext from '../context/DynamicHeightContext';\nimport ArrayReducerType from '../store/ArrayReducerType';\nimport ItemReducerType from '../store/ItemReducerType';\nimport { getEnv, getRoutePath } from '../utility';\nimport ErrorBoundary from './ErrorBoundary';\n\n/** {@link PageTitleFixer} Props. */\ninterface IPageWrapperProps {\n  /** Page title. */\n  title?:   string;\n  id?:      string;\n  state?:   ItemReducerType<unknown> | ArrayReducerType<unknown>;\n  className?: string;\n  /** Page component to render. */\n  children: AnyComponent;\n}\n\n/**\n * Strips slashes etc. of the path.\n *\n * Example:\n * location.pathname = /browse/\n * toCleanLocationPath = browse\n *\n * @param path - location.pathname\n *\n * @return Nice path without gibberish.\n */\nfunction toCleanLocationPath(path: string): string {\n  const pathNoHost      = path.startsWith(getEnv('PUBLIC_URL') ?? '') ? path.substring((getEnv('PUBLIC_URL') ?? '').length) : path;\n  const startsWithSlash = pathNoHost.startsWith('/');\n  const endsWithSlash   = pathNoHost.endsWith('/');\n  const pathNoSlashes   = pathNoHost.substring(startsWithSlash ? 1 : 0, endsWithSlash ? pathNoHost.length - 1 : undefined);\n\n  return pathNoSlashes;\n}\n\n/**\n * HOC to properly set the browser title to assure accessibilty.\n */\n const PageWrapper: React.FC<IPageWrapperProps> = ({ title, id, state, className, children }: IPageWrapperProps) => {\n  const nav = useNavigate();\n  const location = useLocation();\n  const error = state?.meta.error;\n\n  const dynamicHeightContext = useContext(DynamicHeightContext);\n\n  useEffect(() => {\n    // ARIA: Titles should contain the application name and page title.\n    document.title = (`${title != null && title.length > 0 ? `${title} | ` : ''}OwnRecipes`);\n  }, [title]);\n\n  useEffect(() => {\n    if (error && id == null) {\n      const p = getRoutePath('/NotFound');\n      // console.log(`[PageWrapper] nav to \"${p}\"`);\n      nav(p);\n    }\n  }, [id, error]);\n\n  return (\n    <Container id='main-container' as='main' className={classNames(toCleanLocationPath(location.pathname), className)} style={{ marginTop: `${dynamicHeightContext.toolbarHeight}px` }}>\n      <ErrorBoundary verbose printStack>\n        {children}\n      </ErrorBoundary>\n    </Container>\n  );\n};\n\nexport default PageWrapper;\n","import { History, Transition } from 'history';\nimport { useCallback, useContext, useEffect } from 'react';\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom';\n\ntype ExtendNavigator = Navigator & Pick<History, 'block'>;\n\nexport function useBlocker(blocker: (tx: Transition) => void, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    const unblock = (navigator as unknown as ExtendNavigator).block(tx => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    // eslint-disable-next-line consistent-return\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\nexport default function usePrompt(message: string, when = true) {\n  const blocker = useCallback((tx: Transition) => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm(message)) tx.retry();\n  }, [message]);\n\n  useBlocker(blocker, when);\n}\n","import { useMemo } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { Beforeunload } from 'react-beforeunload';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport useBlocker from '../hooks/useBlocker';\n\nconst messages = defineMessages({\n  navigation_warning: {\n    id: 'navigationprompt.warning',\n    description: 'Prompt displayed when navigating on a dirty page (unsaved changes).',\n    defaultMessage: 'You have unsaved changed. If you continue, those change may be lost.',\n  },\n});\n\ninterface INavigationPromptProps {\n  isDirty?: boolean | undefined;\n}\n\nconst NavigationPrompt: React.FC<INavigationPromptProps> = ({ isDirty }: INavigationPromptProps) => {\n  const { formatMessage } = useIntl();\n\n  const promptMsg = useMemo(() => formatMessage(messages.navigation_warning), [formatMessage]);\n\n  const dirtyBlocker = useBlocker(promptMsg, isDirty);\n\n  return (\n    <>\n      {isDirty && (\n        <Beforeunload onBeforeunload={() => promptMsg} />\n      )}\n\n      {dirtyBlocker}\n    </>\n  );\n};\n\nexport default NavigationPrompt;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport '../css/form_errors.css';\n\nimport { formatValidation, ValidationError } from '../store/Validation';\nimport Alert from './Alert';\nimport NavigationPrompt from './NavigationPrompt';\nimport P from './P';\nimport Toast from './Toast';\n\nconst messages = defineMessages({\n  form_errors_title: {\n    id: 'status.form_errors_title',\n    description: 'Title for the form error box.',\n    defaultMessage: 'The form contains an error.',\n  },\n  form_errors_alert: {\n    id: 'status.form_errors_alert',\n    description: 'Alert text for the form error box.',\n    defaultMessage: 'Please fix the described error(s) and continue.',\n  },\n  form_errors_table_heading_error: {\n    id: 'status.form_errors_table_heading_error',\n    description: 'The form-errors will be displayed as table, with an error column. This is the column\\'s title.',\n    defaultMessage: 'Error',\n  },\n  form_errors_table_heading_message: {\n    id: 'status.form_errors_table_heading_message',\n    description: 'The form-errors will be displayed as table, with a message column. This is the column\\'s title.',\n    defaultMessage: 'Message',\n  },\n\n  save_success: {\n    id: 'status.save_success',\n    description: 'Toast for successfully saved form.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\nfunction joinSentences(msgs: Array<string>, separator = '\\n', defLineEnding = '.'): string {\n  const msgsWithLineEnding = msgs.map(s => s.trim()).map(s => ((s.endsWith('.') || s.endsWith('!') || s.endsWith('?')) ? s : `${s}${defLineEnding}`));\n\n  return msgsWithLineEnding.join(separator);\n}\n\ninterface IFormStatusProps {\n  dirty: boolean;\n  submitting: boolean;\n  errors: Record<string, ValidationError> | undefined;\n\n  onSubmitSuccess?: () => void;\n}\n\nconst FormStatus: React.FC<IFormStatusProps> = ({\n    // eslint-disable-next-line arrow-body-style\n    dirty, submitting, errors, onSubmitSuccess }: IFormStatusProps) => {\n  // console.log(`[FormStatus] dirty=${dirty}, submitting=${submitting}, errors=${JSON.stringify(errors)}`);\n  return (\n    <>\n      <NavigationPrompt isDirty={dirty} />\n      <FormErrors errors={errors} />\n      <SubmitSuccess dirty={dirty} submitting={submitting} onSubmitSuccess={onSubmitSuccess} errors={errors} />\n    </>\n  );\n};\n\ninterface IFormErrorRowErrorProps {\n  name: string;\n  err: ValidationError;\n}\n\nconst FormErrorRowError: React.FC<IFormErrorRowErrorProps> = ({ name, err }: IFormErrorRowErrorProps) => {\n  const intl = useIntl();\n\n  const label = document.querySelector(`[data-api-field=\"${name}\"] > label`)?.textContent ?? name;\n\n  const errMsgs: Array<string> = _.castArray(err).map(errr => formatValidation(intl, errr) || errr.message);\n\n  return (\n    <tr>\n      <td>{label}</td>\n      <td>{joinSentences(errMsgs)}</td>\n    </tr>\n  );\n};\n\nfunction getVisibleErrors(errors: Record<string, ValidationError>): Record<string, ValidationError> {\n  const visibleErrorsArray = Object.entries(errors).filter(([key]) => !key.startsWith('_'));\n  return Object.fromEntries(visibleErrorsArray);\n}\n\ninterface IFormErrorsProps {\n  errors: Record<string, ValidationError> | undefined;\n}\n\nconst FormErrors: React.FC<IFormErrorsProps> = ({ errors }: IFormErrorsProps) => {\n  const { formatMessage } = useIntl();\n\n  const visibleErrors = useMemo(() => (\n    errors != null ? getVisibleErrors(errors) : undefined\n  ), [errors]);\n\n  const errorTableRowsJsx = useMemo(() => {\n    if (visibleErrors == null || Object.keys(visibleErrors).length === 0) return [];\n    const res: Array<React.ReactNode> = [];\n    Object.keys(visibleErrors).forEach(key => {\n      const nextErr = visibleErrors[key];\n      res.push(<FormErrorRowError key={key} name={key} err={nextErr} />);\n    });\n    return res;\n  }, [visibleErrors]);\n\n  if (visibleErrors == null || Object.keys(visibleErrors).length === 0) return null;\n\n  // console.log(`[FormErrors] ${JSON.stringify(visibleErrors)}`);\n\n  const errorTableJsx = (\n    <table>\n      <thead>\n        <tr>\n          <th>{formatMessage(messages.form_errors_table_heading_error)}</th>\n          <th>{formatMessage(messages.form_errors_table_heading_message)}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {errorTableRowsJsx}\n      </tbody>\n    </table>\n  );\n\n  return (\n    <Alert\n        severity = 'danger'\n        className = 'form-errors'\n        title = {formatMessage(messages.form_errors_title)}>\n      {errorTableJsx}\n      <P className='alert-post-message'>{formatMessage(messages.form_errors_alert)}</P>\n    </Alert>\n  );\n};\n\ninterface ISubmitSuccessProps {\n  dirty: boolean;\n  submitting: boolean;\n  errors: Record<string, ValidationError> | undefined;\n\n  onSubmitSuccess?: () => void;\n}\n\nconst SubmitSuccess: React.FC<ISubmitSuccessProps> = ({ dirty, submitting, errors, onSubmitSuccess }: ISubmitSuccessProps) => {\n  const { formatMessage } = useIntl();\n\n  const prevSubmitting = useRef<boolean>(false);\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (prevSubmitting.current === true && submitting === false && errors == null) {\n      setShowSaveSuccess(true);\n      onSubmitSuccess?.();\n    }\n\n    prevSubmitting.current = submitting;\n  }, [submitting]);\n\n  useEffect(() => {\n    if (dirty && showSaveSuccess) {\n      setShowSaveSuccess(false);\n    }\n  }, [dirty]);\n\n  const handleCloseSaveSuccessToast = useCallback(() => {\n    setShowSaveSuccess(false);\n  }, []);\n\n  return (\n    <Toast\n        show = {showSaveSuccess}\n        variant = 'success'\n        anchorOrigin={{ horizontal: 'center', vertical: 'bottom' }}\n        onClose = {handleCloseSaveSuccessToast}>\n      {formatMessage(messages.save_success)}\n    </Toast>\n  );\n};\n\nexport default FormStatus;\n","import { FormSpy } from 'react-final-form';\nimport { ValidationError } from '../../store/Validation';\nimport FormStatus from '../FormStatus';\n\nexport interface IReFormStatusProps {\n  onSubmitSuccess?: () => void;\n}\n\nconst ReFormStatus: React.FC<IReFormStatusProps> = ({\n  onSubmitSuccess }: IReFormStatusProps) => (\n    <FormSpy subscription={{ dirty: true, submitting: true, submitErrors: true }}>\n      {({ dirty, submitting, submitErrors }) => (\n        <FormStatus\n            dirty = {dirty}\n            submitting = {submitting}\n            errors = {submitErrors as Record<string, ValidationError>}\n            onSubmitSuccess = {onSubmitSuccess} />\n      )}\n    </FormSpy>\n);\n\nexport default ReFormStatus;\n","import { forwardRef } from 'react';\nimport { Toast as ReactBootstrapToast } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport '../css/toast.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport Icon from './Icon';\n\nexport interface AnchorOriginPosition {\n  horizontal: 'center' | 'left' | 'right';\n  vertical: 'bottom' | 'top';\n}\n\nexport interface IToastProps extends CommonProps {\n  show: boolean;\n  autoHide?: number;\n\n  variant?: 'success';\n  anchorOrigin?: AnchorOriginPosition;\n\n  onClose?: () => void;\n\n  children: React.ReactNode;\n}\n\nfunction capitalize(str: string): string {\n  if (str.length === 0) {\n    return '';\n  } else if (str.length === 1) {\n    return str.toUpperCase();\n  } else {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n}\n\nconst Toast = forwardRef<HTMLDivElement, IToastProps>(({\n    show, autoHide = 6000, variant, anchorOrigin, onClose, children,\n    className, ...rest }: IToastProps, ref) => {\n  const anchorString = anchorOrigin != null ? `Toast-anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}` : undefined;\n\n  return (\n    <ReactBootstrapToast\n        show      = {show}\n        delay     = {autoHide}\n        autohide  = {autoHide > 0}\n        className = {classNames('simple-toast', className, anchorString, {\n          success: variant === 'success',\n        })}\n        onClose   = {onClose}\n        {...rest}\n        ref = {ref}>\n      <ReactBootstrapToast.Header closeButton={onClose != null}>\n        <>\n          {variant === 'success' && <div className='toast-icon'><Icon icon='check' variant='light' size='2x' /></div>}\n          <span className='toast-title'>{children}</span>\n        </>\n      </ReactBootstrapToast.Header>\n    </ReactBootstrapToast>\n  );\n});\n\nexport default Toast;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/toolbar.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IToolbarProps extends CommonProps {\n  position?: 'start' | 'center' | 'end';\n  children: React.ReactNode;\n}\n\nexport const Toolbar = forwardRef<HTMLDivElement, IToolbarProps>(({\n  position = 'start',\n  children, className, ...rest }: IToolbarProps, ref) => (\n    <div className={classNames('toolbar', className, { [position]: position })} {...rest} ref={ref}>\n      {children}\n    </div>\n));\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { toBasicAction } from '../../common/store/redux';\nimport { handleError } from '../../common/requestUtils';\nimport { Recipe, RecipeAction, RecipeActionTypes, RecipeDispatch, RecipeDto, RECIPE_STORE, toRecipe } from './RecipeTypes';\n\nexport const getRecipeSuccess = (recipe: Recipe): RecipeAction => (\n  { ...toBasicAction(RECIPE_STORE, ACTION.GET_SUCCESS), payload: recipe }\n);\n\nexport const load = (recipeSlug: string) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.GET_START) });\n  request()\n    .get(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(res => {\n      dispatch(getRecipeSuccess(toRecipe(res.body as RecipeDto)));\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_STORE)));\n};\n\nexport const deleteRecipe = (id: number, recipeSlug: string) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.DELETE_START) });\n  request()\n    .delete(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(() => {\n      dispatch({ ...toBasicAction(RECIPE_STORE, RecipeActionTypes.RECIPE_DELETE), payload: { id: id } });\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_STORE)));\n};\n\nexport const updateServings = (recipeSlug: string, value: number) => (dispatch: RecipeDispatch) => {\n  dispatch({\n    ...toBasicAction(\n      RECIPE_STORE,\n      RecipeActionTypes.RECIPE_INGREDIENT_SERVINGS_UPDATE\n    ),\n    payload: {\n      recipeSlug: recipeSlug,\n      customServings: value,\n    },\n  });\n};\n\nexport const preload = (recipe: Partial<Recipe>) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.PRELOAD), payload: recipe });\n};\n\nexport const reset = () => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.RESET) });\n};\n"],"names":["selectCommonMessages","defineMessages","no_options","id","description","defaultMessage","findSelectedOptions","options","value","Array","isArray","filter","o","includes","_options$find","find","SelectBase","BaseInputComponent","constructor","arguments","ref","createRef","handleChange","data","_this$props$onChange","_this$props","_this$props$onChange2","_this$props2","this","props","isMulti","onChange","call","name","map","d","focus","current","render","style","tooltip","readOnly","disabled","label","className","helpText","errors","meta","rest","selectedOptions","_jsx","Form","Group","getGroupProps","getFormGroupClassNames","children","_jsxs","ConditionalWrapper","condition","childr","Tooltip","getLabel","htmlFor","getHelpText","getErrorMessage","SelectReact","inputId","noOptionsMessage","intl","formatMessage","isDisabled","classNamePrefix","placeholder","Select","injectIntl","forwardRef","AsyncSelectBase","super","_this$props$onChange3","_this$props3","handleLoadOptions","searchTerm","callback","loadOptions","then","res","setState","state","undefined","_this$state$data","initialValueLabel","selectedOption","AsyncReact","AsyncSelect","isValidNewOption","CreatableSelect","val","dat","handleCreate","inputValue","newOption","prev","_this$props$data","_ref","concat","getDerivedStateFromProps","nextProps","length","dataIdents","nextOptions","index","splice","CreatableSelectReact","onCreateOption","isClearable","toCleanLocationPath","path","_getEnv","_getEnv2","pathNoHost","startsWith","getEnv","substring","startsWithSlash","endsWithSlash","endsWith","title","nav","useNavigate","location","useLocation","error","dynamicHeightContext","useContext","DynamicHeightContext","useEffect","document","p","getRoutePath","Container","as","classNames","pathname","marginTop","toolbarHeight","ErrorBoundary","verbose","printStack","usePrompt","message","when","blocker","navigator","NavigationContext","unblock","block","tx","autoUnblockingTx","retry","useBlocker","useCallback","window","confirm","messages","navigation_warning","isDirty","useIntl","promptMsg","useMemo","dirtyBlocker","_Fragment","Beforeunload","onBeforeunload","form_errors_title","form_errors_alert","form_errors_table_heading_error","form_errors_table_heading_message","save_success","joinSentences","msgs","separator","defLineEnding","s","trim","join","FormErrorRowError","_ref2","_document$querySelect","_document$querySelect2","err","querySelector","textContent","errMsgs","_","errr","formatValidation","FormErrors","_ref4","visibleErrors","visibleErrorsArray","Object","entries","_ref3","key","fromEntries","getVisibleErrors","errorTableRowsJsx","keys","forEach","nextErr","push","errorTableJsx","Alert","severity","P","SubmitSuccess","_ref5","dirty","submitting","onSubmitSuccess","prevSubmitting","useRef","showSaveSuccess","setShowSaveSuccess","useState","handleCloseSaveSuccessToast","Toast","show","variant","anchorOrigin","horizontal","vertical","onClose","NavigationPrompt","FormSpy","subscription","submitErrors","FormStatus","capitalize","str","toUpperCase","charAt","slice","autoHide","anchorString","ReactBootstrapToast","delay","autohide","success","Header","closeButton","Icon","icon","size","Toolbar","position","getRecipeSuccess","recipe","toBasicAction","RECIPE_STORE","ACTION","GET_SUCCESS","payload","load","recipeSlug","dispatch","GET_START","request","get","serverURLs","toRecipe","body","catch","handleError","deleteRecipe","DELETE_START","delete","RecipeActionTypes","RECIPE_DELETE","updateServings","RECIPE_INGREDIENT_SERVINGS_UPDATE","customServings","preload","PRELOAD","reset","RESET"],"sourceRoot":""}