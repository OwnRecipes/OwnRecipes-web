{"version":3,"file":"static/js/252.cad28cf9.chunk.js","mappings":"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","sources":["common/hooks/useSingle.ts","common/components/ReduxForm/ReCreatableSelect.tsx","recipe_form/containers/TagListContainer.tsx","recipe_form/containers/CourseSelectContainer.tsx","recipe_form/containers/CuisineSelectContainer.tsx","recipe_form/containers/RecipeFormToolbar.tsx","common/components/Input/FileSelect.tsx","common/components/ReduxForm/ReFileSelect.tsx","recipe_form/components/RecipeFormImageRow.tsx","recipe_form/utilts/parseIngredient.ts","common/components/Input/TextareaAutocomplete.tsx","common/components/ReduxForm/ReTextareaAutocomplete.tsx","recipe_form/components/TabbedView.tsx","recipe_form/components/IngredientGroupsBox.tsx","recipe_form/components/DirectionBox.tsx","recipe_form/components/RecipeForm.tsx","recipe_form/components/EditGuard.tsx","recipe_form/containers/RecipeFormPage.tsx","recipe_groups/store/actions.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useCallback } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { CreatableSelect, ICreatableSelectValues } from '../Input/Select';\n\nexport interface IReCreatableSelectProps extends Omit<ICreatableSelectValues, 'value' | 'onChange'> {\n  parser: (newValue: any | null) => any | undefined;\n  formatter: (newValue: Array<any> | any) => any;\n}\n\nconst ReCreatableSelect = forwardRef<CreatableSelect, IReCreatableSelectProps>(({\n    parser, formatter,\n    name, required, isMulti,\n    onFocus, onBlur, ...rest }: IReCreatableSelectProps, ref) => {\n  const intl = useIntl();\n\n  const formatValue = useCallback((value: Array<any> | any | undefined) => {\n    if (value == null) {\n      return isMulti ? [] : undefined;\n    } else {\n      return formatter(value);\n    }\n  }, [formatter, isMulti]);\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]}>\n      {fprops => (\n        <CreatableSelect\n            {...rest}\n            isMulti  = {isMulti}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {formatValue(fprops.input.value)}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(_name: string, value: boolean) => { fprops.input.onChange(parser(value)); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReCreatableSelect;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Tag } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ITagListContainerProps {\n  name: string;\n  label: string;\n}\n\nconst TagListContainer: React.FC<ITagListContainerProps> = ({\n    name, label }: ITagListContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchTags = useCallback(() => dispatch(RecipeGroupActions.fetchTags()), [dispatch, RecipeFormActions]);\n  const tags = useSelector((state: RootState) => state.recipeGroups.tags.items);\n  useSingle(fetchTags, tags);\n\n  const data = useMemo(() => tags\n      ?.filter(t => t.title.length > 0)\n      .map(t => ({ value: t.title, label: optionallyFormatMessage(intl, 'tag.', t.title) }))\n      .sort(sortByLabel), [tags, intl.locale]);\n\n  const parser = useCallback((newValue: Array<string> | undefined): Array<Tag> | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      const selected: Array<Tag> = [];\n      newValue.forEach(v => {\n        const tag = tags?.find(t => t.title === v);\n        selected.push(tag ?? { title: v } as Tag);\n      });\n\n      return selected;\n    }\n  }, [tags]);\n\n  const formatter = useCallback((value: Array<Tag> | Tag): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  }, []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        isMulti\n        />\n  );\n};\n\nexport default TagListContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Course } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICourseSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CourseSelectContainer: React.FC<ICourseSelectContainerProps> = ({\n    name, label }: ICourseSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCourses = useCallback(() => dispatch(RecipeGroupActions.fetchCourses()) , [dispatch, RecipeGroupActions]);\n  const courses  = useSelector((state: RootState) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses , courses);\n\n  const data = useMemo(() => courses\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'course.', c.title) }))\n      .sort(sortByLabel), [courses, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Course | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return courses?.find(c => c.title === newValue) ?? { title: newValue } as Course;\n    }\n  }, [courses]);\n\n  const formatter = useCallback((value: Array<Course> | Course): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  }, []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CourseSelectContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Cuisine } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICuisineSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CuisineSelectContainer: React.FC<ICuisineSelectContainerProps> = ({\n    name, label }: ICuisineSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCuisines = useCallback(() => dispatch(RecipeGroupActions.fetchCuisines()), [dispatch, RecipeFormActions]);\n  const cuisines = useSelector((state: RootState) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines, cuisines);\n\n  const data = useMemo(() => cuisines\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'cuisine.', c.title) }))\n      .sort(sortByLabel), [cuisines, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Cuisine | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return cuisines?.find(c => c.title === newValue) ?? { title: newValue ?? '' } as Cuisine;\n    }\n  }, [cuisines]);\n\n  const formatter = useCallback((value: Array<Cuisine> | Cuisine): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  }, []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CuisineSelectContainer;\n","import { Component, forwardRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { FormSpy } from 'react-final-form';\n\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { getRoutePath, isDemoMode } from '../../common/utility';\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\nimport LoadingSpinner from '../../common/components/LoadingSpinner';\n\nconst messages = defineMessages({\n  submit: {\n    id: 'recipe.create.submit',\n    description: 'Submit recipe button',\n    defaultMessage: 'Submit recipe',\n  },\n  view: {\n    id: 'recipe.create.view',\n    description: 'View recipe button',\n    defaultMessage: 'View',\n  },\n});\n\nconst RecipeFormToolbar: React.FC = () => {\n  const nav = useNavigate();\n  const dispatch = useDispatch();\n\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n\n  const preload = useCallback(() => { if (recipeState.item) dispatch(RecipeActions.preload(recipeState.item)); }, [dispatch, recipeState.item]);\n  const onLink = useCallback(() => nav(getRoutePath(`/recipe/${recipeState.item?.slug}`)), [recipeState.item?.slug]);\n\n  const id = recipeState.item?.id;\n  const isNew = id == null || id === 0;\n\n  return (\n    <FormSpy subscription={{ pristine: true, submitting: true }}>\n      {({ pristine, submitting }) => (\n        <SubmitViewButton isNew={isNew} pristine={pristine} submitting={submitting} onSubmit={preload} onLink={onLink} />\n      )}\n    </FormSpy>\n  );\n};\n\ninterface ISubmitViewButtonProps {\n  isNew:      boolean;\n  submitting: boolean;\n  pristine:   boolean;\n\n  onSubmit: () => void;\n  onLink: () => void;\n}\n\nconst SubmitViewButton = forwardRef<HTMLButtonElement, ISubmitViewButtonProps>(({\n    isNew, submitting, pristine, onSubmit, onLink, ...rest }: ISubmitViewButtonProps, ref) => {\n  const { formatMessage } = useIntl();\n\n  const asView = !isNew && pristine;\n\n  const onClick = useCallback(() => {\n    // This seems stupid, and it feels stupid.\n    // But we do not want to replace the button,\n    // to prevent losing focus.\n    if (asView) {\n      onLink();\n    } else {\n      onSubmit();\n    }\n  }, [asView, onLink, onSubmit]);\n\n  return (\n    <Button\n        variant  = 'primary'\n        type     = {asView ? 'button' : 'submit'}\n        // Do not disable on submitting, to prevent losing focus\n        disabled = {(isDemoMode() && !asView)}\n        onClick = {onClick}\n        accessKey = {asView ? undefined : 's'}\n        {...rest}\n        className = {submitting ? 'disabled' : undefined}\n        ref = {ref}>\n      <span style={{ visibility: submitting ? 'hidden' : 'initial' }}>{formatMessage(asView ? messages.view : messages.submit)}</span>\n      {submitting && <LoadingSpinner style={{ position: 'absolute', color: 'var(--primaryText)' }} />}\n    </Button>\n  );\n});\n\nexport const SubmittingObserver = forwardRef<SubmittingObserverClass>((_props, ref) => (\n  <FormSpy subscription={{ pristine: true, submitting: true }}>\n    {({ submitting }) => (\n      <SubmittingObserverClass submitting={submitting} ref={ref} />\n    )}\n  </FormSpy>\n));\n\ninterface ISubmittingObserverClassProps {\n  submitting: boolean;\n}\n\nexport class SubmittingObserverClass extends Component<ISubmittingObserverClassProps> {\n  // eslint-disable-next-line react/no-unused-class-component-methods\n  getSubmitting(): boolean {\n    return this.props.submitting;\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default RecipeFormToolbar;\n","import { createRef } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\n\nexport interface IFileSelectProps extends IBaseInputComponentProps {\n  accept?: string;\n  value?:  string;\n\n  onChange?: (name: string, newValue: File | undefined) => void;\n}\n\nclass FileSelect extends BaseInputComponent<IFileSelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  clearValue() { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.value = '';\n    }\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onChange?.(event.target.name, event?.target.files?.[0]);\n  };\n\n  handleClear = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, '' as unknown as File);\n      this.clearValue();\n    }\n  };\n\n  render() {\n    // console.log(`[FileSelect] name=${this.props.name}`);\n\n    const { accept, value, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <Form.Control\n                type   = 'file'\n                name   = {name}\n                accept = {accept}\n                readOnly = {readOnly}\n                disabled = {disabled}\n                onChange = {this.handleChange}\n                {...rest}\n                ref = {this.ref} />\n            {!readOnly && !disabled && onChange\n                && (value || (this.ref.current != null && this.ref.current.value)) && (\n                  <InputGroup.Text className='input-adornment-end button'>\n                    <Button onClick={this.handleClear}><Icon icon='x' variant='light' size='2x' /></Button>\n                  </InputGroup.Text>\n            )}\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport default FileSelect;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport FileSelect, { IFileSelectProps } from '../Input/FileSelect';\n\nexport type IReFileSelectProps = Omit<IFileSelectProps, 'value'>;\n\nconst identity = (value: any) => (value);\n\nconst ReFileSelect = forwardRef<FileSelect, IReFileSelectProps>(({\n    name, required,\n    onChange, onFocus, onBlur,\n    ...rest }: IReFileSelectProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} parse={identity}>\n      {fprops => (\n        <FileSelect\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value ?? false}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: File | undefined) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReFileSelect;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Col, Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { getRecipeImage, getRecipeImagePlaceholder } from '../../common/utility';\nimport WidthHeightRatio from '../../common/components/WidthHeightRatio';\nimport Image from '../../common/components/Image';\nimport ReFileSelect from '../../common/components/ReduxForm/ReFileSelect';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\n\nconst messages = defineMessages({\n  photo_label: {\n    id: 'recipe.create.photo_label',\n    description: 'Photo label',\n    defaultMessage: 'Photo',\n  },\n});\n\nconst RecipeFormImageRow: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const { key } = useLocation();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const photoInputRef = useRef<any>(null);\n  const [imageUrl, setImageUrl] = useState<string | undefined>(undefined);\n  const IMAGE_PLACEHOLDER = useMemo(() => getRecipeImagePlaceholder(), []);\n\n  useEffect(() => {\n    if (photoInputRef.current) {\n      photoInputRef.current.clearValue();\n    }\n    setImageUrl(undefined);\n  }, [key]);\n\n  const handleImageChange = useCallback((_name: string, newValue: File | undefined) => {\n    setImageUrl(newValue ? URL.createObjectURL(newValue) : '');\n  }, []);\n\n  const getDisplayImage = useCallback((recipePhoto: string | undefined) => {\n    if (imageUrl != null) {\n      return imageUrl.length > 0 ? imageUrl : getRecipeImagePlaceholder();\n    } else {\n      return getRecipeImage(recipePhoto || IMAGE_PLACEHOLDER);\n    }\n  }, [imageUrl, IMAGE_PLACEHOLDER]);\n\n  return (\n    <>\n      <Row>\n        <Col xs={12} lg={11} xl={10} xxl={9} style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n          <WidthHeightRatio height={66.67} width={100}>\n            <FieldSpyValues fieldNames={['photo']}>\n              {values => (\n                <Image\n                    src   = {getDisplayImage(values.photo)}\n                    alt   = ''\n                    style = {{ objectFit: 'contain' }} />\n              )}\n            </FieldSpyValues>\n          </WidthHeightRatio>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12}>\n          <ReFileSelect\n              name     = 'photo'\n              label    = {formatMessage(messages.photo_label)}\n              accept   = 'image/*'\n              onChange = {handleImageChange}\n              ref = {photoInputRef} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RecipeFormImageRow;\n","import { IngredientInput } from '../../recipe/store/RecipeTypes';\nimport { GCD } from '../../recipe/utilts/gcd';\n\n/**\n * Parses a string-number to a float,\n * normalizing the thousands and decimal-separators.\n *\n * @param str - \"1.500,50\"\n *\n * @returns 1500.50\n */\nfunction parseFloatIgnoreLocale(str: string): number {\n  let normalized;\n  const ixDot = str.indexOf('.');\n  const ixComma = str.indexOf(',');\n\n  if (ixDot === -1 && ixComma === -1) {\n    normalized = str;\n  } else if (ixDot === -1) {\n    normalized = str.replace(',', '.');\n  } else if (ixComma === -1) {\n    normalized = str;\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (ixDot < ixComma) {\n      normalized = str.replace('.', '');\n      normalized = normalized.replace(',', '.');\n    } else {\n      normalized = str.replace(',', '');\n    }\n  }\n\n  return parseFloat(normalized);\n}\n\n/**\n * Given an array of text values,\n * Convert them into a single Fraction\n *\n * Examples:\n *   * 1 1/2 sugar -> 3/2\n *   * 2 3 inch pieces ginger -> 6/1\n *   * 1/2 3 inch pieces ginger -> 3/2\n *   * 3 1/2 inch pieces ginger -> 7/2\n *   * 1/2 1/2 inch pieces ginger -> 1/4\n *\n * @param textArray - Quantities-Array.\n *\n * @returns - Merged quantities to a single fraction.\n */\nconst buildFraction = (textArray: Array<string>) => {\n  const { numerator, denominator } = textArray.reduce((fraction, text) => {\n    const split = text.split('/');\n    let n = parseFloatIgnoreLocale(split[0]);\n    let d = split.length > 1 ? parseFloatIgnoreLocale(split[1]) : 1;\n\n    // If this is the first run of the func\n    // return the n/d,\n    if (fraction.denominator === 0) { return { numerator: n, denominator: d }; }\n\n    // Multiple if the next number is an int\n    if (split.length === 1) {\n      n *= fraction.numerator;\n      d *= fraction.denominator;\n      const gcd = GCD(n, d);\n      return { numerator: n / gcd, denominator: d / gcd };\n    }\n\n    // If given a fraction, add them.\n    n = fraction.numerator * d + fraction.denominator * n;\n    d *= fraction.denominator;\n    const gcd = GCD(n, d);\n    return { numerator: n / gcd, denominator: d / gcd };\n  }, { numerator: 0, denominator: 0 });\n\n  return {\n    numerator,\n    denominator,\n  };\n};\n\nconst numberSplit = (number: string): { amount: string, rest: string } => {\n  let last = -1;\n  const length = number.length;\n  const numbers = ['1','2','3','4','5','6','7','8','9','0'];\n\n  numbers.forEach(n => {\n    if (number.lastIndexOf(n) > last) {\n      last = number.lastIndexOf(n);\n    }\n  });\n  if (length === (last + 1)) {\n    return { amount: number, rest: '' };\n  }\n  return { amount: number.substring(0, last + 1), rest: number.substring(last + 1, length) };\n};\n\nconst parseFraction = (fraction: string): Array<string> => {\n  const normalized = fraction.normalize('NFKD');\n  return normalized.split('\\u2044'); // '⁄'\n};\n\n/**\n * Given an Ingredient as text, parse it into an Ingredient object.\n *\n * @param parser - Mapping localized measurement -> normalized measurement.\n * @param line - The actual line of text to parse.\n */\nexport default (parser: Record<string, string>, line: string): IngredientInput => {\n  // Just some examples...\n  // 1g salt -> 1 | gram | salt\n  // 1 cup orange juice -> 1 | cup | orange juice\n  // 1 1/2cup wheat flour -> 1 1/2 | cup | wheat flour\n  // 2 chicken wings -> 2 | | chicken wings\n\n  // Basically, iterate the line.\n  // Accept up to 2 numbers for quantities.\n  // The first non number may be the measurement.\n  // Anything else is the title. Stop parsing.\n\n  // Split the line by the space char\n  const tags = line.split(' ');\n\n  const quantities: Array<string> = [];\n  let measurement: string | undefined;\n\n  let noMoreQuantities = false;\n  let ix;\n  for (ix = 0; ix < tags.length - 1; ++ix) {\n    const nextTag = tags[ix];\n    if (nextTag.length === 0) continue;\n\n    const vulgarFraction = !noMoreQuantities ? parseFraction(nextTag[0]) : [];\n\n    if (!noMoreQuantities && !Number.isNaN(parseInt(nextTag[0]))) {\n      // The next element starts with a number.\n      // Parse the number.\n      // The element may be followed by text, e. g. 1kg. Parse this as measurement, if it is some.\n      let { amount, rest } = numberSplit(nextTag); // eslint-disable-line prefer-const\n      quantities.push(amount);\n      if (rest) {\n        // OPT The fraction handling is hard to read.\n        // The first char of the rest could be a fraction, e. g. 1¾cup flour.\n        const restFrac = parseFraction(rest[0]);\n        if (restFrac[1]) {\n          noMoreQuantities = true;\n          quantities.push(`${restFrac[0]}/${restFrac[1]}`);\n          if (rest.length > 1) {\n            rest = rest.substring(1);\n          } else {\n            continue;\n          }\n        }\n        measurement = parser[rest.toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n          break;\n        }\n      }\n      if (quantities.length >= 2) {\n        noMoreQuantities = true;\n      }\n    } else if (!noMoreQuantities && vulgarFraction[1]) {\n      // Parse the fraction.\n      // After the fraction, no more quantities may follow up, but the measurement.\n      // E. g. ¾cup flour.\n      noMoreQuantities = true;\n      quantities.push(`${vulgarFraction[0]}/${vulgarFraction[1]}`);\n      if (nextTag.length > 1) {\n        measurement = parser[nextTag.substring(1).toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n        }\n        break;\n      }\n    } else {\n      // No number and no fraction, that is plain old text, maybe a measurement.\n      noMoreQuantities = true;\n      measurement = parser[nextTag.toLocaleLowerCase()];\n      if (measurement) {\n        ++ix;\n      }\n      break;\n    }\n  }\n\n  const { numerator, denominator } = buildFraction(quantities);\n  const title = tags.slice(ix).join(' ');\n  return { numerator: numerator === 0 ? undefined : numerator, denominator: denominator, measurement: measurement, title: title };\n};\n","import { createRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport ReactTextareaAutocomplete, { TriggerType } from '@webscopeio/react-textarea-autocomplete';\n\nimport '../../css/input.css';\nimport '../../css/textarea_autocomplete.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\n\nexport type AutocompleteListItem = {\n  name: string;\n  char: string;\n}\n\nexport interface ITextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem> extends IBaseInputComponentProps {\n  value?: string;\n  rows?: number;\n  placeholder?: string;\n\n  trigger: TriggerType<TListItem>;\n\n  onChange?: (name: string, newValue: string) => void;\n}\n\nconst Loading = () => <div className='loading'>Loading...</div>;\n\nexport default class TextareaAutocomplete<TListItem extends string | object = AutocompleteListItem> extends BaseInputComponent<ITextareaAutocompleteProps<TListItem>> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  getLabel(): React.ReactNode | undefined { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.props.label == null) {\n      return null;\n    } else if (this.props.tooltip) {\n      return (\n        <>\n          {this.props.label}\n          &nbsp;\n          <Icon icon='info-circle' className='tooltip-icon' />\n        </>\n      );\n    } else {\n      return this.props.label;\n    }\n  }\n\n  render() {\n    // console.log(`[TextareaAutocomplete] name=${this.props.name}, value=${this.props.value}`);\n\n    const { value = '', rows = 4, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <ReactTextareaAutocomplete<TListItem>\n                name     = {name}\n                value    = {value}\n                rows     = {rows}\n\n                loadingComponent = {Loading}\n                className = 'form-control'\n                movePopupAsYouType\n\n                onChange  = {this.handleChange}\n\n                {...rest}\n                ref = {this.ref}\n              />\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useMemo } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { composeValidators, formatValidation, requiredValidator, ValueValidatorFunction } from '../../store/Validation';\nimport TextareaAutocomplete, { AutocompleteListItem, ITextareaAutocompleteProps } from '../Input/TextareaAutocomplete';\n\nexport interface IReTextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem>\n    extends ITextareaAutocompleteProps<TListItem> {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n}\n\nconst ReTextareaAutocomplete = forwardRef<any, IReTextareaAutocompleteProps>(({\n    name, required, format, parse,\n    onChange, onFocus, onBlur, ...rest }: IReTextareaAutocompleteProps, ref) => {\n  const intl = useIntl();\n\n  const validators = useMemo(() => {\n    const vals: Array<ValueValidatorFunction> = [];\n\n    if (required) {\n      vals.push(requiredValidator);\n    }\n\n    return composeValidators(...vals);\n  }, [required]);\n\n  return (\n    <Field name={name} validate={validators} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <TextareaAutocomplete\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref as any} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReTextareaAutocomplete;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport Icon from '../../common/components/Icon';\nimport Tooltip from '../../common/components/Tooltip';\n\nexport interface ITabbedViewProps {\n  id:          string;\n  labels:      Array<string>;\n  tooltips?:   Array<string>;\n\n  initialTab?: string;\n  activeTab?:  string;\n  onSelect?:   (newActiveTab: string) => void;\n\n  errors?:     string;\n  children:    Array<React.ReactNode>;\n}\n\nconst messages = defineMessages({\n  preview: {\n    id: 'recipe.create.preview',\n    description: 'Preview',\n    defaultMessage: 'Preview',\n  },\n});\n\nconst TabbedView: React.FC<ITabbedViewProps> = ({\n    id, labels, errors, tooltips,\n    initialTab, activeTab, onSelect,\n    children } : ITabbedViewProps) => {\n  const { formatMessage } = useIntl();\n\n  const contentClassName = classNames('content', {\n    'has-error': !!errors,\n  });\n\n  const navClassName = classNames('nav', 'nav-tabs', {\n    'has-error': !!errors,\n  });\n\n  const tabs = children.slice(0, children.length - 1).map((childr, index) => (\n    <Tab\n        // eslint-disable-next-line react/no-array-index-key\n        key = {index.toString()}\n        title = {(\n          <>\n            {labels[index]}\n            {tooltips?.[index] && (\n              <>\n                &nbsp;\n                <Tooltip\n                    id = {`${labels[index]}-tooltip`}\n                    tooltip   = {tooltips[index]}>\n                  <Icon icon='info-circle' className='tooltip-icon' aria-label={tooltips[index]} aria-describedby={undefined} />\n                </Tooltip>\n              </>\n            )}\n          </>\n        )}\n        eventKey  = {index.toString()}\n        className = 'editor'>\n      <div className={contentClassName}>{childr}</div>\n    </Tab>\n  ));\n\n  const handleSelect = useCallback((selectedKey: string | null) => {\n    if (selectedKey) {\n      onSelect?.(selectedKey);\n    }\n  }, [onSelect]);\n\n  return (\n    <div className='live-editor'>\n      <Tabs\n          id = {`${id}-tabs`}\n          defaultActiveKey = {initialTab || '0'}\n          activeKey = {activeTab}\n          onSelect  = {handleSelect}\n          className = {navClassName}>\n        {tabs}\n        <Tab\n            title = {formatMessage(messages.preview)}\n            className = 'preview'\n            eventKey  = 'preview'>\n          <div className={contentClassName}>{children[children.length - 1]}</div>\n        </Tab>\n      </Tabs>\n      <div className='help-text error'>{errors}</div>\n    </div>\n  );\n};\n\nexport default TabbedView;\n","import { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\nimport { FormSpy } from 'react-final-form';\nimport { ValidationErrors } from 'final-form';\n\nimport '../css/smart_text_box.css';\n\nimport IngredientGroups from '../../recipe/components/IngredientGroups';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport parseIngredient from '../utilts/parseIngredient';\nimport { Ingredient, IngredientGroup, IngredientInput, SubRecipe } from '../../recipe/store/RecipeTypes';\nimport SubRecipes from '../../recipe/components/SubRecipes';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReTextareaAutocomplete from '../../common/components/ReduxForm/ReTextareaAutocomplete';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport TabbedView from './TabbedView';\nimport { slugify } from '../../common/utility';\n\nconst messages = defineMessages({\n  ingredients_label: {\n    id: 'recipe.create.ingredients_label',\n    description: 'Recipe ingredients label',\n    defaultMessage: 'Ingredients',\n  },\n  ingredients_tooltip: {\n    id: 'recipe.create.ing.info_desc',\n    description: 'info_desc',\n    defaultMessage: 'Each Ingredient should be on its own line. You can form groups by ending the groups first line with a colon (\":\").',\n  },\n  ingredients_placeholder: {\n    id: 'recipe.create.ing.ingredients_placeholder',\n    description: 'Example for writing ingredients',\n    defaultMessage: 'Dough:\\n300 g flour\\n100 ml milk\\n\\nDip:\\n100 ml olive oil\\n...',\n  },\n\n  subrecipes_label: {\n    id: 'recipe.create.subrecipes_label',\n    description: 'Recipe links label',\n    defaultMessage: 'Recipe links',\n  },\n  subrecipes_tooltip: {\n    id: 'recipe.create.subrecipes.tooltip',\n    description: 'Subrecipes tooltip',\n    defaultMessage: 'If the recipe is made of several subrecipes, then link them here. Each Recipe Link should be on its own line.',\n  },\n  subrecipes_placeholder: {\n    id: 'recipe.create.subrecipes.placeholder',\n    description: 'Subreceipes placeholder',\n    defaultMessage: ':dough-1\\n:olive-oil-dip-1',\n  },\n});\n\nfunction normalizeLine(line: string): string {\n  let res = line.replace(/\\t/g, ' ');\n  res = res.trim();\n  return res;\n}\n\n/* IngredientGroups */\n\nexport function ingredientsFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<IngredientGroup>): string {\n  let tr = '';\n  if (values) {\n    values.filter(ig => ig.title.trim().length > 0 || ig.ingredients.length > 0).forEach(ig => {\n      if (ig.title) {\n        tr += `${ig.title}:\\n`;\n      }\n      ig.ingredients.forEach(i => {\n        const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n        tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n        tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n        tr += `${i.title}\\n`;\n      });\n      tr += '\\n';\n    });\n  }\n  if (tr.endsWith('\\n')) {\n    return tr.substring(0, tr.length - 2);\n  }\n  return tr;\n}\n\nexport function ingredientsParser(parser: Record<string, string>, value: string | undefined): Array<IngredientGroup> {\n  if (!value) return [];\n  const dict = [{ slug: 'default', title: '', ingredients: [] }];\n  let igTitle = '';\n  let ings: Array<IngredientInput> | undefined = dict.find(t => t.title === '')?.ingredients; // Should always exist, as it is the init group.\n  if (ings == null) throw new Error('Invalid state: ings may not be null.');\n  if (value) {\n    const tags = value.split('\\n').map(normalizeLine).filter(t => t.length > 0);\n    tags.forEach(line => {\n      if (line.length > 0) {\n        // Check if the line is an IG title\n        // If line is IG title, update igTitle and continue\n        // Else add ing to the current ig group\n        if (line.endsWith(':') && line.length > 1) {\n          igTitle = line.substring(0, line.length - 1);\n          dict.push({ slug: slugify(igTitle), title: igTitle, ingredients: [] });\n          ings = dict.find(t => t.title === igTitle)?.ingredients; // Should always exist, as we just pushed it.\n          if (ings == null) throw new Error('Invalid state: The create ings may not be null.');\n        } else {\n          if (ings == null) throw new Error('Invalid state: ings may not be null.');\n          ings.push(parseIngredient(parser, line));\n        }\n      }\n    });\n  }\n  return dict;\n}\n\n/* SubRecipe */\n\nexport function subrecipesFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<SubRecipe>) {\n  let tr = '';\n  if (values) {\n    values.forEach(i => {\n      const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n      tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n      tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n      tr += `${i.title}\\n`;\n    });\n  }\n  return tr.substring(0, tr.length - 1);\n}\n\nexport function subrecipesParser(parser: Record<string, string>, value: string | undefined): Array<SubRecipe> {\n  if (!value) return [];\n  const ings: Array<SubRecipe> = [];\n  const subRecipes = value.split('\\n').map(normalizeLine).filter(t => t.length > 1 && !t.startsWith(':'));\n  subRecipes.forEach(sr => {\n    if (sr.length > 0) {\n      ings.push(parseIngredient(parser, sr) as SubRecipe);\n    }\n  });\n  return ings;\n}\n\ninterface IItemProps {\n  entity: AutocompleteListItem;\n}\nconst Item = ({ entity: { char } }: IItemProps) => <div>{char}</div>;\n\nexport interface IIngredientGroupsBoxProps {\n  nameIg:   string;\n  nameSub:  string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<Array<AutocompleteListItem>>;\n}\n\nconst IngredientGroupsBox: React.FC<IIngredientGroupsBoxProps> = ({\n    nameIg, nameSub, fetchRecipeList }: IIngredientGroupsBoxProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const location = useLocation();\n\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const checkErrorneous = useCallback((errors: ValidationErrors, touched: Record<string, boolean> | undefined) => {\n    if (touched?.[nameIg] === true && errors?.[nameIg] != null) {\n      return formatValidation(intl, errors?.[nameIg]);\n    } else if (touched?.[nameSub] && errors?.[nameSub] != null) {\n      return formatValidation(intl, errors?.[nameSub]);\n    } else {\n      return undefined;\n    }\n  }, [intl]);\n\n  return (\n    <FormSpy subscription={{ errors: true, touched: true, initialValues: true }}>\n      {({ errors, touched, initialValues }) => (\n        <TabbedView\n            id       = 'ingredients'\n            labels   = {[formatMessage(messages.ingredients_label), formatMessage(messages.subrecipes_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors   = {checkErrorneous(errors, touched)}\n            tooltips = {[formatMessage(messages.ingredients_tooltip), formatMessage(messages.subrecipes_tooltip)]}>\n          <FieldSpyValues fieldNames={[nameSub]}>\n            {values => (\n              <ReInput\n                  name     = {nameIg}\n                  rows     = {8}\n                  placeholder = {formatMessage(messages.ingredients_placeholder)}\n                  required = {initialValues && !values[nameSub]} />\n            )}\n          </FieldSpyValues>\n          <div className='form-group'>\n            <ReTextareaAutocomplete\n                name  = {nameSub}\n                rows = {8}\n                placeholder = {formatMessage(messages.subrecipes_placeholder)}\n                trigger={{\n                ':': {\n                  dataProvider: token => fetchRecipeList(token),\n                  component: Item,\n                  output: item => item.char,\n                },\n              }} />\n          </div>\n          <FieldSpyValues fieldNames={[nameIg, nameSub]}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <IngredientsPreview\n                      igData = {ingredientsParser(measurementsContext.parser, values[nameIg])}\n                      srData = {subrecipesParser(measurementsContext.parser,  values[nameSub])} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IIngredientsPreviewProps {\n  igData: Array<IngredientGroup>;\n  srData: Array<SubRecipe>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst IngredientsPreview: React.FC<IIngredientsPreviewProps> = ({ igData, srData }: IIngredientsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(igData, i => {\n      const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n      return { ...i, quantity: custom };\n    }), [igData]);\n\n  const srDataFormatted = useMemo(() => srData.map(i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [igData]);\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className='ingredients-panel'>\n          <div className='ingredient-groups'>\n            <SubRecipes subRecipes={srDataFormatted} />\n            <IngredientGroups groups={igDataFormatted} hasSubrecipes={srData.length > 0} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientGroupsBox;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { FormSpy } from 'react-final-form';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport Directions from '../../recipe/components/Directions';\nimport { Ingredient, IngredientGroup } from '../../recipe/store/RecipeTypes';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport { ingredientsParser } from './IngredientGroupsBox';\nimport TabbedView from './TabbedView';\n\nconst messages = defineMessages({\n  directions_label: {\n    id: 'recipe.create.directions_label',\n    description: 'Directions label',\n    defaultMessage: 'Directions',\n  },\n  directions_tooltip: {\n    id: 'recipe.create.dir.tooltip',\n    description: 'Directions Tooltip',\n    defaultMessage: 'Each Direction should be on its own line. You can form chapters by ending the chapters heading with a colon (\":\").',\n  },\n  directions_placeholder: {\n    id: 'recipe.create.dir.placeholder',\n    description: 'Directions Placeholder',\n    defaultMessage: 'Dough:\\nPrepare the dough.\\n\\nDip:\\nPrepare the dip.\\n...',\n  },\n});\n\nexport interface IDirectionBox {\n  name:       string;\n}\n\nconst DirectionBox: React.FC<IDirectionBox> = ({\n    name }: IDirectionBox) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  return (\n    <FormSpy subscription={{ errors: true }}>\n      {({ errors }) => (\n        <TabbedView\n            id        = 'directions'\n            labels    = {[formatMessage(messages.directions_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors    = {formatValidation(intl, errors?.[name])}\n            tooltips  = {[formatMessage(messages.directions_tooltip)]}>\n          <ReInput\n              name = {name}\n              rows     = {8}\n              placeholder = {formatMessage(messages.directions_placeholder)} />\n          <FieldSpyValues fieldNames={[name, 'ingredientGroupsS']}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <DirectionsPreview\n                      directions = {values[name] ?? ''}\n                      ingredients = {ingredientsParser(measurementsContext.parser, values.ingredientGroupsS)} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IDirectionsPreviewProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst DirectionsPreview: React.FC<IDirectionsPreviewProps> = ({ directions, ingredients }: IDirectionsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(ingredients, i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [ingredients]);\n\n  const isMultiDirections = directions.includes(':\\n');\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className={classNames('directions-panel', { 'multi-directions': isMultiDirections })}>\n          <div className='direction-groups'>\n            <Directions directions={directions} ingredients={igDataFormatted} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default DirectionBox;\n","import { useCallback, useContext, useMemo, useRef } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Col, Container, Form, Row } from 'react-bootstrap';\nimport { Form as ReduxForm } from 'react-final-form';\n\nimport '../../recipe/css/recipe.css';\nimport '../css/recipe_form.css';\n\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport TagListContainer from '../containers/TagListContainer';\nimport CourseSelectContainer from '../containers/CourseSelectContainer';\nimport CuisineSelectContainer from '../containers/CuisineSelectContainer';\nimport RecipeFormToolbar, { SubmittingObserver, SubmittingObserverClass } from '../containers/RecipeFormToolbar';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReCheckbox from '../../common/components/ReduxForm/ReCheckbox';\nimport InitialValuesResetter from '../../common/components/ReduxForm/ReInitialValuesResetter';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport ReFormStatus from '../../common/components/ReduxForm/ReFormStatus';\nimport RecipeFormImageRow from './RecipeFormImageRow';\nimport IngredientGroupsBox, { ingredientsFormatter, ingredientsParser, subrecipesFormatter, subrecipesParser } from './IngredientGroupsBox';\nimport DirectionBox from './DirectionBox';\nimport { ValidationResult } from '../../common/store/Validation';\n\nconst messages = defineMessages({\n  name_label: {\n    id: 'recipe.create.name_label',\n    description: 'Recipe name label',\n    defaultMessage: 'Recipe name',\n  },\n  course_label: {\n    id: 'recipe.create.course_label',\n    description: 'Course label',\n    defaultMessage: 'Course',\n  },\n  cuisine_label: {\n    id: 'recipe.create.cuisine_label',\n    description: 'Cuisine label',\n    defaultMessage: 'Cuisine',\n  },\n  tags_label: {\n    id: 'recipe.create.tags_label',\n    description: 'Tags label',\n    defaultMessage: 'Tags',\n  },\n  prep_time_label: {\n    id: 'recipe.create.prep_time_label',\n    description: 'Prep time label',\n    defaultMessage: 'Prep time (min)',\n  },\n  cooking_time_label: {\n    id: 'recipe.create.cooking_time_label',\n    description: 'Cooking time label',\n    defaultMessage: 'Cooking time (min)',\n  },\n  servings_label: {\n    id: 'recipe.create.servings_label',\n    description: 'Servings label',\n    defaultMessage: 'Servings',\n  },\n  information_label: {\n    id: 'recipe.create.information_label',\n    description: 'Recipe information label',\n    defaultMessage: 'Recipe information',\n  },\n  information_placeholder: {\n    id: 'recipe.create.information_placeholder',\n    description: 'Recipe information placeholder',\n    defaultMessage: 'A quick description of the recipe',\n  },\n  source_label: {\n    id: 'recipe.create.source_label',\n    description: 'Rating source label',\n    defaultMessage: 'Source',\n  },\n  source_tooltip: {\n    id: 'recipe.create.source_tooltip',\n    description: 'Rating source tooltip',\n    defaultMessage: 'Where the original recipe is from.',\n  },\n  public_label: {\n    id: 'recipe.create.public_label',\n    description: 'Recipe set public label',\n    defaultMessage: 'Public Recipe',\n  },\n});\n\nexport interface IRecipeFormProps {\n  recipe: Recipe | undefined;\n  isNew: boolean;\n  location: string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<AutocompleteListItem[]>;\n  onSubmit: (form: Recipe) => Promise<ValidationResult>;\n}\n\ninterface RecipeFormatted extends Recipe {\n  ingredientGroupsS: string;\n  subrecipesS: string;\n}\n\nconst RecipeForm: React.FC<IRecipeFormProps> = ({\n    recipe, isNew, location,\n    fetchRecipeList, onSubmit } : IRecipeFormProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const submittingObserverRef = useRef<SubmittingObserverClass>(null);\n  const handleSubmit = useCallback((form: RecipeFormatted) => {\n    // Do not disable the submit-button on submitting, to prevent losing focus.\n    if (submittingObserverRef.current?.getSubmitting()) return Promise<null>;\n\n    return onSubmit({\n      ...form,\n      ingredientGroups: ingredientsParser(measurementsContext.parser, form.ingredientGroupsS),\n      subrecipes:        subrecipesParser(measurementsContext.parser, form.subrecipesS),\n    });\n  }, [measurementsContext.parser, submittingObserverRef.current]);\n\n  const initialValues: Partial<RecipeFormatted> | undefined = useMemo(() => {\n    if (isNew && !recipe) {\n      return {\n        slug: '',\n        public: true,\n        servings: 1,\n      };\n    } else {\n      return recipe\n        ? {\n        ...recipe,\n        ingredientGroupsS: ingredientsFormatter(intl, measurementsContext.formatter, recipe.ingredientGroups),\n        subrecipesS:        subrecipesFormatter(intl, measurementsContext.formatter, recipe.subrecipes),\n        } : undefined;\n    }\n    }, [recipe, isNew, location]);\n\n  // console.log(`[RecipeForm] recipe=${JSON.stringify(recipe)}, initialValues=${JSON.stringify(initialValues)}`);\n\n  return (\n    <ReduxForm\n        initialValues = {initialValues}\n        onSubmit = {handleSubmit}\n        subscription = {{ submitting: true }}\n        render = {({ form, handleSubmit: renderSubmit }) => (\n          <Form className='recipe-form' onSubmit={renderSubmit}>\n            <InitialValuesResetter form={form} initialValues={initialValues} />\n            <SubmittingObserver ref={submittingObserverRef} />\n            <Container>\n              <ReFormStatus />\n              <Row>\n                <Col id='recipe-meta' md={5} lg={4}>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name      = 'title'\n                          label     = {formatMessage(messages.name_label)}\n                          maxLength = {250}\n                          required\n                          />\n                    </Col>\n                  </Row>\n\n                  <RecipeFormImageRow />\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <CourseSelectContainer\n                          name     = 'course'\n                          label    = {formatMessage(messages.course_label)} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <CuisineSelectContainer\n                          name     = 'cuisine'\n                          label    = {formatMessage(messages.cuisine_label)} />\n                    </Col>\n                    <Col xs={12}>\n                      <TagListContainer\n                          name     = 'tags'\n                          label    = {formatMessage(messages.tags_label)} />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'prepTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.prep_time_label)}\n                          min      = {1}\n                          max      = {999} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'cookTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.cooking_time_label)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'servings'\n                          type     = 'number'\n                          label    = {formatMessage(messages.servings_label)}\n                          min      = {1}\n                          max      = {999}\n                          required />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'source'\n                          label    = {formatMessage(messages.source_label)}\n                          tooltip  = {formatMessage(messages.source_tooltip)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReCheckbox\n                          name      = 'public'\n                          label     = {formatMessage(messages.public_label)} />\n                    </Col>\n                  </Row>\n\n                </Col>\n                <Col id='recipe' md={7} lg={8}>\n                  <ReInput\n                      name     = 'info'\n                      rows     = {3}\n                      label    = {formatMessage(messages.information_label)}\n                      placeholder = {formatMessage(messages.information_placeholder)} />\n                  <IngredientGroupsBox\n                      nameIg   = 'ingredientGroupsS'\n                      nameSub  = 'subrecipesS'\n                      fetchRecipeList = {fetchRecipeList} />\n                  <DirectionBox\n                      name       = 'directions' />\n\n                  <RecipeFormToolbar />\n                </Col>\n              </Row>\n            </Container>\n          </Form>\n    )} />\n  );\n};\n\nexport default RecipeForm;\n","import { useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport * as _ from 'lodash-es';\n\nimport { RootState } from '../../app/Store';\nimport { useSelector } from '../../common/store/redux';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport { getRoutePath } from '../../common/utility';\n\nconst EditGuard: React.FC = () => {\n  const params = useParams();\n  const nav = useNavigate();\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const accountState = useSelector((state: RootState) => state.account);\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n  const recipe = recipeState.item;\n  const { pending } = recipeState.meta;\n  const wasRenderedRef = useRef<boolean>(false);\n\n  const user = accountState.item;\n  const mayEdit = user != null && (isNew || (user.id === recipe?.author));\n\n  useEffect(() => {\n    if (user != null && pending === PendingState.COMPLETED && recipe != null && !mayEdit) {\n      nav(getRoutePath(`/recipe/${recipeSlug}`));\n    }\n  }, [user, recipeState, mayEdit]);\n\n  useEffect(() => {\n    if (recipe?.slug != null && pending === PendingState.COMPLETED && isNew && wasRenderedRef.current) {\n      setTimeout(() => {\n        nav(getRoutePath(`/recipe/edit/${recipe.slug}`));\n      }, 250);\n    }\n    wasRenderedRef.current = true;\n  }, [pending]);\n\n  const recipeMeta = recipeState.meta;\n  // If recipe not found, redirect to NotFound-Page\n  useEffect(() => {\n    if (_.get(recipeMeta.error, 'status') === 404) {\n      nav(getRoutePath('/NotFound'));\n    }\n  }, [recipeMeta.error]);\n\n  return null;\n};\n\nexport default EditGuard;\n","import { useCallback, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport RecipeForm from '../components/RecipeForm';\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport EditGuard from '../components/EditGuard';\n\nconst RecipeFormPage: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    new_recipe: {\n      id: 'recipe_form.new_recipe',\n      description: 'New Recipe documentTitle',\n      defaultMessage: 'New Recipe',\n    },\n  });\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  const location = useLocation();\n\n  const fetchRecipeList = RecipeFormActions.fetchRecipeList;\n  const handleSubmit = useCallback(async (data: Recipe) => RecipeFormActions.save(dispatch, data), [dispatch]);\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const recipe = useSelector((state: RootState) => state.recipeForm.item);\n\n  // Load Recipe / or init.\n  useEffect(() => {\n    if (recipeSlug) {\n      if (isNew) {\n        dispatch(RecipeFormActions.reset());\n      } else {\n        dispatch(RecipeFormActions.load(recipeSlug));\n      }\n    }\n  }, [recipeSlug, location.key]);\n\n  // componentWillUnmount\n  useEffect(() => () => {\n    dispatch(RecipeFormActions.reset());\n  }, []);\n\n  return (\n    <PageWrapper title={isNew ? formatMessage(messages.new_recipe) : recipe?.title}>\n      <EditGuard />\n      <RecipeForm\n          recipe = {recipe}\n          isNew  = {isNew}\n          location = {location.key}\n          fetchRecipeList = {fetchRecipeList}\n          onSubmit = {handleSubmit} />\n    </PageWrapper>\n  );\n};\n\nexport default RecipeFormPage;\n","import { handleError, request } from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, toTag } from '../../recipe/store/RecipeTypes';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, TAGS_STORE } from './types';\nimport { toBasicAction } from '../../common/store/redux';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map(toCourse),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map(toCuisine),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toTag),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["useSingle","getFunction","obj","useEffect","forwardRef","_ref","ref","parser","formatter","name","required","isMulti","onFocus","onBlur","rest","_objectWithoutProperties","_excluded","intl","useIntl","formatValue","useCallback","value","undefined","_jsx","Field","validate","requiredValidator","validateFields","children","fprops","CreatableSelect","_objectSpread","input","errors","formatValidation","meta","error","dirtySinceLastSubmit","submitError","onChange","_name","event","label","dispatch","useDispatch","fetchTags","RecipeGroupActions","RecipeFormActions","tags","useSelector","state","recipeGroups","items","data","useMemo","filter","t","title","length","map","optionallyFormatMessage","sort","sortByLabel","locale","newValue","selected","forEach","v","tag","find","push","Array","isArray","ReCreatableSelect","fetchCourses","courses","c","_courses$find","fetchCuisines","cuisines","_cuisines$find","messages","defineMessages","submit","id","description","defaultMessage","view","SubmitViewButton","_ref2","isNew","submitting","pristine","onSubmit","onLink","formatMessage","asView","onClick","_jsxs","Button","variant","type","disabled","isDemoMode","accessKey","className","style","visibility","LoadingSpinner","position","color","SubmittingObserver","_props","FormSpy","subscription","_ref3","SubmittingObserverClass","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","this","props","Component","_recipeState$item2","_recipeState$item3","nav","useNavigate","recipeState","recipeForm","preload","item","RecipeActions","_recipeState$item","getRoutePath","concat","slug","FileSelect","_BaseInputComponent","_this","_len","args","_key","call","createRef","handleChange","_this$props$onChange","_this$props","_event$target$files","target","files","handleClear","clearValue","current","focus","_this$props2","accept","tooltip","readOnly","helpText","Form","getGroupProps","controlId","getFormGroupClassNames","ConditionalWrapper","condition","render","childr","Tooltip","getLabel","getHelpText","getErrorMessage","InputGroup","Icon","icon","size","BaseInputComponent","identity","parse","_fprops$input$value","namee","photo_label","useLocation","photoInputRef","useRef","_useState","useState","_useState2","_slicedToArray","imageUrl","setImageUrl","IMAGE_PLACEHOLDER","getRecipeImagePlaceholder","handleImageChange","URL","createObjectURL","getDisplayImage","recipePhoto","getRecipeImage","_Fragment","Row","Col","xs","lg","xl","xxl","marginLeft","marginRight","WidthHeightRatio","height","width","FieldSpyValues","fieldNames","values","Image","src","photo","alt","objectFit","ReFileSelect","parseFloatIgnoreLocale","str","normalized","ixDot","indexOf","ixComma","replace","parseFloat","numberSplit","number","last","n","lastIndexOf","amount","substring","parseFraction","fraction","normalize","split","line","measurement","ix","quantities","noMoreQuantities","nextTag","vulgarFraction","Number","isNaN","parseInt","toLocaleLowerCase","_numberSplit","restFrac","_buildFraction","textArray","_textArray$reduce","reduce","text","d","denominator","numerator","gcd","GCD","buildFraction","slice","join","Loading","TextareaAutocomplete","_this$props$value","_this$props$rows","rows","ReactTextareaAutocomplete","loadingComponent","movePopupAsYouType","format","validators","vals","composeValidators","preview","labels","tooltips","initialTab","activeTab","onSelect","contentClassName","classNames","navClassName","tabs","index","Tab","eventKey","toString","handleSelect","selectedKey","Tabs","defaultActiveKey","activeKey","ingredients_label","ingredients_tooltip","ingredients_placeholder","subrecipes_label","subrecipes_tooltip","subrecipes_placeholder","normalizeLine","res","trim","ingredientsFormatter","tr","ig","ingredients","i","locMsrmnt","formatQuantity","itemCount","endsWith","ingredientsParser","_dict$find","dict","igTitle","ings","Error","_dict$find2","slugify","parseIngredient","subrecipesFormatter","subrecipesParser","startsWith","sr","Item","char","entity","IngredientsPreview","_ref4","igData","srData","igDataFormatted","cb","custom","quantity","srDataFormatted","SubRecipes","subRecipes","IngredientGroups","groups","hasSubrecipes","nameIg","nameSub","fetchRecipeList","location","setActiveTab","pathname","NEW_ITEM_URL_ID","measurementsContext","useContext","MeasurementContext","checkErrorneous","touched","initialValues","TabbedView","ReInput","placeholder","ReTextareaAutocomplete","trigger","dataProvider","token","component","output","directions_label","directions_tooltip","directions_placeholder","DirectionsPreview","directions","isMultiDirections","includes","Directions","_values$name","ingredientGroupsS","name_label","course_label","cuisine_label","tags_label","prep_time_label","cooking_time_label","servings_label","information_label","information_placeholder","source_label","source_tooltip","public_label","recipe","submittingObserverRef","handleSubmit","form","_submittingObserverRe","getSubmitting","Promise","ingredientGroups","subrecipes","subrecipesS","public","servings","ReduxForm","renderSubmit","InitialValuesResetter","Container","ReFormStatus","md","maxLength","RecipeFormImageRow","sm","CourseSelectContainer","CuisineSelectContainer","TagListContainer","min","max","ReCheckbox","IngredientGroupsBox","DirectionBox","RecipeFormToolbar","_params$recipe","params","useParams","recipeSlug","accountState","account","pending","wasRenderedRef","user","mayEdit","author","PendingState","setTimeout","recipeMeta","_","new_recipe","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","_x","PageWrapper","EditGuard","RecipeForm","toBasicAction","COURSES_STORE","ACTION","request","get","serverURLs","then","payload","body","results","courseDto","toCourse","catch","err","handleError","CUISINES_STORE","cuisineDto","toCuisine","TAGS_STORE","toTag"],"sourceRoot":""}