{"version":3,"file":"static/js/343.1e98a069.chunk.js","mappings":"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","sources":["common/components/Input/Checkbox.tsx","common/components/ReduxForm/ReCheckbox.tsx","common/hooks/useSingle.ts","common/components/Input/Select.tsx","common/components/ReduxForm/ReCreatableSelect.tsx","recipe_form/containers/TagListContainer.tsx","recipe_form/containers/CourseSelectContainer.tsx","recipe_form/containers/CuisineSelectContainer.tsx","recipe_form/containers/RecipeFormToolbar.tsx","common/components/Input/FileSelect.tsx","common/components/ReduxForm/ReFileSelect.tsx","recipe_form/components/RecipeFormImageRow.tsx","recipe_form/utilts/parseIngredient.ts","common/components/Input/TextareaAutocomplete.tsx","common/components/ReduxForm/ReTextareaAutocomplete.tsx","recipe_form/components/TabbedView.tsx","recipe_form/components/IngredientGroupsBox.tsx","recipe_form/components/DirectionBox.tsx","recipe_form/components/RecipeForm.tsx","recipe_form/components/EditGuard.tsx","recipe_form/containers/RecipeFormPage.tsx","recipe_groups/store/actions.ts"],"sourcesContent":["import { createRef } from 'react';\nimport { Form } from 'react-bootstrap';\n\nimport '../../css/checkbox.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\n\nexport interface ICheckboxProps extends IBaseInputComponentProps {\n  value?: boolean;\n\n  onChange?: (name: string, newValue: boolean) => void;\n}\n\nexport default class Checkbox extends BaseInputComponent<ICheckboxProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  getLabel(): React.ReactNode | undefined { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.props.label == null) {\n      return null;\n    } else if (this.props.tooltip) {\n      return (\n        <>\n          {this.props.label}\n          &nbsp;\n          <Icon icon='info-circle' className='tooltip-icon' />\n        </>\n      );\n    } else {\n      return this.props.label;\n    }\n  }\n\n  handleChange = () => {\n    // event: React.ChangeEvent<HTMLInputElement>\n    // NOTE: bootstrap will pass as event.target.value always \"on\".\n    if (this.props.readOnly || this.props.disabled) return;\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, !this.props.value);\n    }\n  };\n\n  render() {\n    // console.log(`[Checkbox] name=${this.props.name}`);\n\n    return (\n      <Form.Group\n          controlId = {this.props.name}\n          className = {this.getFormGroupClassNames()}>\n        <ConditionalWrapper\n            condition = {this.props.tooltip != null}\n            render    = {childr => <Tooltip id={`${this.props.name}-tooltip`} tooltip={this.props.tooltip}>{childr}</Tooltip>}>\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <Form.Check\n              name  = {this.props.name}\n              checked = {this.props.value}\n              label = {this.getLabel()}\n\n              required  = {this.props.required}\n              readOnly  = {this.props.readOnly}\n              autoComplete = {this.props.autoComplete}\n              autoFocus = {this.props.autoFocus}\n\n              onChange  = {this.handleChange}\n              onBlur    = {this.props.onBlur}\n              onFocus   = {this.props.onFocus}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport Checkbox,  { ICheckboxProps } from '../Input/Checkbox';\n\nexport type IReCheckboxProps = {\n  format?: (value: any, name: string) => boolean;\n  parse?:  (value: any, name: string) => any;\n} & Omit<ICheckboxProps, 'value'>;\n\nconst ReCheckbox = forwardRef<Checkbox, IReCheckboxProps>(({\n    name, required, format, parse,\n    onChange, onFocus, onBlur, ...rest }: IReCheckboxProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <Checkbox\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value ?? false}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: boolean) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReCheckbox;\n","import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","import classNames from 'classnames';\nimport { createRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport SelectReact, { MultiValue, SingleValue } from 'react-select';\nimport CreatableSelectReact from 'react-select/creatable';\n// import AsyncReact from 'react-select/async';\n\nimport '../../css/select.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Tooltip from '../Tooltip';\n\n/*\nexport class Async extends BaseInputComponent {\n  handleChange(data) {\n    this.setState({\n      value: data,\n    });\n\n    if (this.props.change) {\n      this.props.change(this.props.name, data ? data.value : '');\n      this.props.change(this.props.title, data ? data.label : '');\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.props.class} key={this.props.id}>\n        <div className={`form-group ${this.hasErrors() ? 'has-error' : null}`}>\n          { this.props.label ? <label>{ this.props.label }</label> : null }\n          <AsyncReact\n              name = {this.props.name}\n              value = {this.props.value}\n              onChange = {this.handleChange}\n              loadOptions = {this.props.loadOptions}\n          />\n          { this.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n*/\n\nexport type SelectDataType = { value: string, label: string };\n\ninterface ISelectProps extends IBaseInputComponentProps {\n  value?: string;\n  data?:  Array<SelectDataType>;\n\n  onChange?: (name: string, newValue: string | undefined) => void;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport class Select extends BaseInputComponent<ISelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType>) => {\n    this.setState({\n      value: data,\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, data?.value);\n    }\n  };\n\n  render() {\n    const selectedOption = this.props.data?.find(o => o.value === this.props.value);\n    return (\n      <Form.Group\n          controlId = {this.props.name}\n          className = {classNames('form-group', this.props.className, {\n            error:    this.isErrorneous(),\n            readonly: this.props.readOnly,\n            required: this.props.required && !this.props.readOnly,\n          })}>\n        <ConditionalWrapper\n            condition = {this.props.tooltip != null}\n            render    = {childr => <Tooltip id={`${this.props.name}-tooltip`} tooltip={this.props.tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${this.props.name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <SelectReact\n              name     = {this.props.name}\n              value    = {selectedOption}\n              options  = {this.props.data}\n              onChange = {this.handleChange}\n              placeholder = ''\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport interface ICreatableSelectValues extends IBaseInputComponentProps {\n  value?:   Array<string> | string;\n  data?:    Array<SelectDataType>;\n  isMulti?: boolean;\n}\ninterface ICreatableSelectProps extends ICreatableSelectValues {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onChange?: (name: string, newValue: any | undefined) => void;\n}\n\ninterface ICreatableSelectState {\n  options: Array<SelectDataType>;\n}\n\nconst isValidNewOption = (value: string): boolean => !!value;\n\nfunction findSelectedOptions(options: Array<SelectDataType>, value: Array<string> | string | undefined): Array<SelectDataType> | SelectDataType {\n  if (Array.isArray(value)) {\n    return options.filter(o => value.includes(o.value));\n  } else {\n    return options.find(o => o.value === value) ?? '' as unknown as SelectDataType;\n  }\n}\n\nexport class CreatableSelect extends BaseInputComponent<ICreatableSelectProps, ICreatableSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: ICreatableSelectProps) {\n    super(props);\n\n    this.state = {\n      options: [],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ICreatableSelectProps, state: ICreatableSelectState) {\n    if (nextProps.data == null || nextProps.data.length === 0 || state.options.length === 0) return state;\n    const dataIdents = nextProps.data.map(d => d.value);\n    const nextOptions = [...state.options];\n\n    for (let index = nextOptions.length - 1; index >= 0; --index) {\n      if (dataIdents.includes(nextOptions[index].value)) {\n        nextOptions.splice(index, 1);\n      }\n    }\n\n    if (state.options.length === nextOptions.length) return state;\n\n    return {\n      ...state,\n      options: nextOptions,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: MultiValue<SelectDataType> | SingleValue<SelectDataType>) => {\n    if (this.props.onChange) {\n      const val = data != null && Array.isArray(data) ? data.map(dat => dat.value) : (data as SingleValue<SelectDataType>)?.value;\n      this.props.onChange(\n        this.props.name,\n        val\n      );\n    }\n  };\n\n  handleCreate = (inputValue: string) => {\n    const newOption: SelectDataType = { value: inputValue, label: inputValue };\n    this.setState(prev => (\n        {\n          options: [...prev.options, newOption],\n        }\n      ),\n      () => {\n        if (!this.props.isMulti) {\n          this.handleChange(newOption);\n        } else {\n          const dataOptions = this.props.data ?? [];\n          const options = dataOptions.concat(this.state.options);\n          const selectedOptions = findSelectedOptions(options, [...(this.props.value as Array<string> | undefined ?? []), inputValue]);\n          this.handleChange(selectedOptions);\n        }\n      });\n  };\n\n  render() {\n    // console.log(`[Select] name=${this.props.name}, value=${JSON.stringify(this.props.value)}`);\n\n    const dataOptions = this.props.data ?? [];\n    const options = dataOptions.concat(this.state.options);\n    const selectedOptions = findSelectedOptions(options, this.props.value);\n\n    return (\n      <Form.Group\n          className = {classNames('form-group', this.props.className, {\n            error:    this.isErrorneous(),\n            readonly: this.props.readOnly,\n            required: this.props.required && !this.props.readOnly,\n          })}>\n        <ConditionalWrapper\n            condition = {this.props.tooltip != null}\n            render    = {childr => <Tooltip id={`${this.props.name}-tooltip`} tooltip={this.props.tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${this.props.name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <CreatableSelectReact\n              inputId = {`${this.props.name}-input`}\n              onChange = {this.handleChange}\n              onBlur   = {this.props.onBlur}\n              onFocus  = {this.props.onFocus}\n              isValidNewOption = {isValidNewOption}\n              onCreateOption = {this.handleCreate}\n              isClearable\n              isMulti = {this.props.isMulti}\n              value = {selectedOptions}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              options = {options}\n              placeholder = ''\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { CreatableSelect, ICreatableSelectValues } from '../Input/Select';\n\nexport type IReCreatableSelectProps = {\n  parser: (newValue: any | null) => any | undefined;\n  formatter: (newValue: Array<any> | any) => any;\n} & Omit<ICreatableSelectValues, 'value' | 'onChange'>;\n\nconst ReCreatableSelect = forwardRef<CreatableSelect, IReCreatableSelectProps>(({\n    parser, formatter,\n    name, required, isMulti,\n    onFocus, onBlur, ...rest }: IReCreatableSelectProps, ref) => {\n  const intl = useIntl();\n\n  const formatValue = (value: Array<any> | any | undefined) => {\n    if (value == null) {\n      return isMulti ? [] : undefined;\n    } else {\n      return formatter(value);\n    }\n  };\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]}>\n      {fprops => (\n        <CreatableSelect\n            {...rest}\n            isMulti  = {isMulti}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {formatValue(fprops.input.value)}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(_name: string, value: boolean) => { fprops.input.onChange(parser(value)); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReCreatableSelect;\n","import React, { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { CombinedStore } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Tag } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ITagListContainerProps {\n  name: string;\n  label: string;\n}\n\nconst TagListContainer: React.FC<ITagListContainerProps> = ({\n    name, label }: ITagListContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchTags = useCallback(() => dispatch(RecipeGroupActions.fetchTags()), [dispatch, RecipeFormActions]);\n  const tags = useSelector((state: CombinedStore) => state.recipeGroups.tags.items);\n  useSingle(fetchTags, tags);\n\n  const data = useMemo(() => tags\n      ?.filter(t => t.title.length > 0)\n      .map(t => ({ value: t.title, label: optionallyFormatMessage(intl, 'tag.', t.title) }))\n      .sort(sortByLabel), [tags, intl.locale]);\n\n  const parser = (newValue: Array<string> | undefined): Array<Tag> | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      const selected: Array<Tag> = [];\n      newValue.forEach(v => {\n        const tag = tags?.find(t => t.title === v);\n        selected.push(tag ?? { title: v } as Tag);\n      });\n\n      return selected;\n    }\n  };\n\n  const formatter = (value: Array<Tag> | Tag): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  };\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        isMulti\n        />\n  );\n};\n\nexport default TagListContainer;\n","import React, { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { CombinedStore } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Course } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICourseSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CourseSelectContainer: React.FC<ICourseSelectContainerProps> = ({\n    name, label }: ICourseSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCourses = useCallback(() => dispatch(RecipeGroupActions.fetchCourses()) , [dispatch, RecipeGroupActions]);\n  const courses  = useSelector((state: CombinedStore) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses , courses);\n\n  const data = useMemo(() => courses\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'course.', c.title) }))\n      .sort(sortByLabel), [courses, intl.locale]);\n\n  const parser = (newValue: string | undefined): Course | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return courses?.find(c => c.title === newValue) ?? { title: newValue } as Course;\n    }\n  };\n\n  const formatter = (value: Array<Course> | Course): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  };\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CourseSelectContainer;\n","import React, { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { CombinedStore } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Cuisine } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReduxForm/ReCreatableSelect';\n\nexport interface ICuisineSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CuisineSelectContainer: React.FC<ICuisineSelectContainerProps> = ({\n    name, label }: ICuisineSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCuisines = useCallback(() => dispatch(RecipeGroupActions.fetchCuisines()), [dispatch, RecipeFormActions]);\n  const cuisines = useSelector((state: CombinedStore) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines, cuisines);\n\n  const data = useMemo(() => cuisines\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'cuisine.', c.title) }))\n      .sort(sortByLabel), [cuisines, intl.locale]);\n\n  const parser = (newValue: string | undefined): Cuisine | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return cuisines?.find(c => c.title === newValue) ?? { title: newValue ?? '' } as Cuisine;\n    }\n  };\n\n  const formatter = (value: Array<Cuisine> | Cuisine): Array<string> | string => {\n    if (Array.isArray(value)) {\n      return value.map(v => v.title);\n    } else {\n      return value.title;\n    }\n  };\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CuisineSelectContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { CombinedStore } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { getRoutePath, isDemoMode } from '../../common/utility';\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\nimport { FormSpy } from 'react-final-form';\n\nconst RecipeFormToolbar: React.FC = () => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    submit: {\n      id: 'recipe.create.submit',\n      description: 'Submit recipe button',\n      defaultMessage: 'Submit recipe',\n    },\n    save: {\n      id: 'recipe.create.save',\n      description: 'Save recipe button',\n      defaultMessage: 'Save',\n    },\n    view: {\n      id: 'recipe.create.view',\n      description: 'View recipe button',\n      defaultMessage: 'View',\n    },\n  });\n\n  const dispatch = useDispatch();\n\n  const recipeState = useSelector((state: CombinedStore) => state.recipeForm);\n\n  const preload = () => { if (recipeState.item) dispatch(RecipeActions.preload(recipeState.item)); };\n\n  const id = recipeState.item?.id;\n  const isNew = id == null || id === 0;\n\n  // eslint-disable-next-line arrow-body-style\n  const showViewButton = (pristine: boolean) => {\n    return !isNew && pristine;\n  };\n\n  return (\n    <FormSpy subscription={{ pristine: true, submitting: true }}>\n      {({ pristine, submitting }) => (\n        <Button\n            variant  = 'primary'\n            type     = {showViewButton(pristine) ? 'button' : 'submit'}\n            disabled = {submitting || (isDemoMode() && !showViewButton(pristine))}\n            as = {showViewButton(pristine) ? Link as any : undefined} // eslint-disable-line @typescript-eslint/no-explicit-any\n            to = {showViewButton(pristine) ? getRoutePath(`/recipe/${recipeState.item?.slug}`) : null}\n            onClick = {preload}\n            accessKey = {showViewButton(pristine) ? undefined : 's'}>\n          {formatMessage(showViewButton(pristine) ? messages.view : messages.submit)}\n        </Button>\n      )}\n    </FormSpy>\n  );\n};\n\nexport default RecipeFormToolbar;\n","import { createRef } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\n\nexport interface IFileSelectProps extends IBaseInputComponentProps {\n  accept?: string;\n  value?:  string;\n\n  onChange?: (name: string, newValue: File | undefined) => void;\n}\n\nclass FileSelect extends BaseInputComponent<IFileSelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  clearValue() { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.value = '';\n    }\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.props.onChange) {\n      this.props.onChange(event.target.name, event?.target.files?.[0]);\n    }\n  };\n\n  handleClear = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, '' as unknown as File);\n      this.clearValue();\n    }\n  };\n\n  render() {\n    // console.log(`[FileSelect] name=${this.props.name}`);\n\n    return (\n      <Form.Group\n          controlId = {this.props.name}\n          className = {this.getFormGroupClassNames()}>\n        <ConditionalWrapper\n            condition = {this.props.tooltip != null}\n            render    = {childr => <Tooltip id={`${this.props.name}-tooltip`} tooltip={this.props.tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <Form.Control\n                type   = 'file'\n                name   = {this.props.name}\n                accept = {this.props.accept}\n                readOnly = {this.props.readOnly}\n                disabled = {this.props.disabled}\n                onChange = {this.handleChange}\n                onBlur   = {this.props.onBlur}\n                onFocus  = {this.props.onFocus}\n                ref = {this.ref} />\n            {!this.props.readOnly && !this.props.disabled && this.props.onChange\n                && (this.props.value || (this.ref.current != null && this.ref.current.value)) && (\n                  <InputGroup.Text className='input-adornment-end button'>\n                    <Button onClick={this.handleClear}><Icon icon='x' variant='light' size='2x' /></Button>\n                  </InputGroup.Text>\n            )}\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport default FileSelect;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport FileSelect, { IFileSelectProps } from '../Input/FileSelect';\n\nexport type IReFileSelectProps = Omit<IFileSelectProps, 'value'>;\n\nconst identity = (value: any) => (value);\n\nconst ReFileSelect = forwardRef<FileSelect, IReFileSelectProps>(({\n    name, required,\n    onChange, onFocus, onBlur,\n    ...rest }: IReFileSelectProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} parse={identity}>\n      {fprops => (\n        <FileSelect\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value ?? false}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: File | undefined) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReFileSelect;\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Col, Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { getRecipeImage, getRecipeImagePlaceholder } from '../../common/utility';\nimport WidthHeightRatio from '../../common/components/WidthHeightRatio';\nimport Image from '../../common/components/Image';\nimport ReFileSelect from '../../common/components/ReduxForm/ReFileSelect';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\n\nconst RecipeFormImageRow: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    photo_label: {\n      id: 'recipe.create.photo_label',\n      description: 'Photo label',\n      defaultMessage: 'Photo',\n    },\n  });\n\n  const { key } = useLocation();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const photoInputRef = useRef<any>(null);\n  const [imageUrl, setImageUrl] = useState<string | undefined>(undefined);\n  const IMAGE_PLACEHOLDER = useMemo(() => getRecipeImagePlaceholder(), []);\n\n  useEffect(() => {\n    if (photoInputRef.current) {\n      photoInputRef.current.clearValue();\n    }\n    setImageUrl(undefined);\n  }, [key]);\n\n  const handleImageChange = (_name: string, newValue: File | undefined) => {\n    setImageUrl(newValue ? URL.createObjectURL(newValue) : '');\n  };\n\n  const getDisplayImage = (recipePhoto: string | undefined) => {\n    if (imageUrl != null) {\n      return imageUrl.length > 0 ? imageUrl : getRecipeImagePlaceholder();\n    } else {\n      return getRecipeImage(recipePhoto || IMAGE_PLACEHOLDER);\n    }\n  };\n\n  return (\n    <>\n      <Row>\n        <Col xs={12} lg={11} xl={10} xxl={9} style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n          <WidthHeightRatio height={66.67} width={100}>\n            <FieldSpyValues fieldNames={['photo']}>\n              {values => (\n                <Image\n                    src   = {getDisplayImage(values.photo)}\n                    alt   = ''\n                    style = {{ objectFit: 'contain' }} />\n              )}\n            </FieldSpyValues>\n          </WidthHeightRatio>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12}>\n          <ReFileSelect\n              name     = 'photo'\n              label    = {formatMessage(messages.photo_label)}\n              accept   = 'image/*'\n              onChange = {handleImageChange}\n              ref = {photoInputRef} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RecipeFormImageRow;\n","import { IngredientInput } from '../../recipe/store/RecipeTypes';\nimport { GCD } from '../../recipe/utilts/gcd';\n\n/**\n * Parses a string-number to a float,\n * normalizing the thousands and decimal-separators.\n *\n * @param str - \"1.500,50\"\n *\n * @returns 1500.50\n */\nfunction parseFloatIgnoreLocale(str: string): number {\n  let normalized;\n  const ixDot = str.indexOf('.');\n  const ixComma = str.indexOf(',');\n\n  if (ixDot === -1 && ixComma === -1) {\n    normalized = str;\n  } else if (ixDot === -1) {\n    normalized = str.replace(',', '.');\n  } else if (ixComma === -1) {\n    normalized = str;\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (ixDot < ixComma) {\n      normalized = str.replace('.', '');\n      normalized = normalized.replace(',', '.');\n    } else {\n      normalized = str.replace(',', '');\n    }\n  }\n\n  return parseFloat(normalized);\n}\n\n/**\n * Given an array of text values,\n * Convert them into a single Fraction\n *\n * Examples:\n *   * 1 1/2 sugar -> 3/2\n *   * 2 3 inch pieces ginger -> 6/1\n *   * 1/2 3 inch pieces ginger -> 3/2\n *   * 3 1/2 inch pieces ginger -> 7/2\n *   * 1/2 1/2 inch pieces ginger -> 1/4\n *\n * @param textArray - Quantities-Array.\n *\n * @returns - Merged quantities to a single fraction.\n */\nconst buildFraction = (textArray: Array<string>) => {\n  const { numerator, denominator } = textArray.reduce((fraction, text) => {\n    const split = text.split('/');\n    let n = parseFloatIgnoreLocale(split[0]);\n    let d = split.length > 1 ? parseFloatIgnoreLocale(split[1]) : 1;\n\n    // If this is the first run of the func\n    // return the n/d,\n    if (fraction.denominator === 0) { return { numerator: n, denominator: d }; }\n\n    // Multiple if the next number is an int\n    if (split.length === 1) {\n      n *= fraction.numerator;\n      d *= fraction.denominator;\n      const gcd = GCD(n, d);\n      return { numerator: n / gcd, denominator: d / gcd };\n    }\n\n    // If given a fraction, add them.\n    n = fraction.numerator * d + fraction.denominator * n;\n    d *= fraction.denominator;\n    const gcd = GCD(n, d);\n    return { numerator: n / gcd, denominator: d / gcd };\n  }, { numerator: 0, denominator: 0 });\n\n  return {\n    numerator,\n    denominator,\n  };\n};\n\nconst numberSplit = (number: string): { amount: string, rest: string } => {\n  let last = -1;\n  const length = number.length;\n  const numbers = ['1','2','3','4','5','6','7','8','9','0'];\n\n  numbers.forEach(n => {\n    if (number.lastIndexOf(n) > last) {\n      last = number.lastIndexOf(n);\n    }\n  });\n  if (length === (last + 1)) {\n    return { amount: number, rest: '' };\n  }\n  return { amount: number.substring(0, last + 1), rest: number.substring(last + 1, length) };\n};\n\nconst parseFraction = (fraction: string): Array<string> => {\n  const normalized = fraction.normalize('NFKD');\n  return normalized.split('\\u2044'); // '⁄'\n};\n\n/**\n * Given an Ingredient as text, parse it into an Ingredient object.\n *\n * @param parser - Mapping localized measurement -> normalized measurement.\n * @param line - The actual line of text to parse.\n */\nexport default (parser: Record<string, string>, line: string): IngredientInput => {\n  // Just some examples...\n  // 1g salt -> 1 | gram | salt\n  // 1 cup orange juice -> 1 | cup | orange juice\n  // 1 1/2cup wheat flour -> 1 1/2 | cup | wheat flour\n  // 2 chicken wings -> 2 | | chicken wings\n\n  // Basically, iterate the line.\n  // Accept up to 2 numbers for quantities.\n  // The first non number may be the measurement.\n  // Anything else is the title. Stop parsing.\n\n  // Split the line by the space char\n  const tags = line.split(' ');\n\n  const quantities: Array<string> = [];\n  let measurement: string | undefined;\n\n  let noMoreQuantities = false;\n  let ix;\n  for (ix = 0; ix < tags.length - 1; ++ix) {\n    const nextTag = tags[ix];\n    if (nextTag.length === 0) continue;\n\n    const vulgarFraction = !noMoreQuantities ? parseFraction(nextTag[0]) : [];\n\n    if (!noMoreQuantities && !Number.isNaN(parseInt(nextTag[0]))) {\n      // The next element starts with a number.\n      // Parse the number.\n      // The element may be followed by text, e. g. 1kg. Parse this as measurement, if it is some.\n      let { amount, rest } = numberSplit(nextTag); // eslint-disable-line prefer-const\n      quantities.push(amount);\n      if (rest) {\n        // OPT The fraction handling is hard to read.\n        // The first char of the rest could be a fraction, e. g. 1¾cup flour.\n        const restFrac = parseFraction(rest[0]);\n        if (restFrac[1]) {\n          noMoreQuantities = true;\n          quantities.push(`${restFrac[0]}/${restFrac[1]}`);\n          if (rest.length > 1) {\n            rest = rest.substring(1);\n          } else {\n            continue;\n          }\n        }\n        measurement = parser[rest.toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n          break;\n        }\n      }\n      if (quantities.length >= 2) {\n        noMoreQuantities = true;\n      }\n    } else if (!noMoreQuantities && vulgarFraction[1]) {\n      // Parse the fraction.\n      // After the fraction, no more quantities may follow up, but the measurement.\n      // E. g. ¾cup flour.\n      noMoreQuantities = true;\n      quantities.push(`${vulgarFraction[0]}/${vulgarFraction[1]}`);\n      if (nextTag.length > 1) {\n        measurement = parser[nextTag.substring(1).toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n        }\n        break;\n      }\n    } else {\n      // No number and no fraction, that is plain old text, maybe a measurement.\n      noMoreQuantities = true;\n      measurement = parser[nextTag.toLocaleLowerCase()];\n      if (measurement) {\n        ++ix;\n      }\n      break;\n    }\n  }\n\n  const { numerator, denominator } = buildFraction(quantities);\n  const title = tags.slice(ix).join(' ');\n  return { numerator: numerator === 0 ? undefined : numerator, denominator: denominator, measurement: measurement, title: title };\n};\n","import { createRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport ReactTextareaAutocomplete, { TriggerType } from '@webscopeio/react-textarea-autocomplete';\n\nimport '../../css/input.css';\nimport '../../css/textarea_autocomplete.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\n\nexport type AutocompleteListItem = {\n  name: string;\n  char: string;\n}\n\nexport interface ITextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem> extends IBaseInputComponentProps {\n  value?: string;\n  rows?: number;\n  placeholder?: string;\n\n  trigger: TriggerType<TListItem>;\n\n  onChange?: (name: string, newValue: string) => void;\n}\n\nconst Loading = () => <div className='loading'>Loading...</div>;\n\nexport default class TextareaAutocomplete<TListItem extends string | object = AutocompleteListItem> extends BaseInputComponent<ITextareaAutocompleteProps<TListItem>> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  getLabel(): React.ReactNode | undefined { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.props.label == null) {\n      return null;\n    } else if (this.props.tooltip) {\n      return (\n        <>\n          {this.props.label}\n          &nbsp;\n          <Icon icon='info-circle' className='tooltip-icon' />\n        </>\n      );\n    } else {\n      return this.props.label;\n    }\n  }\n\n  render() {\n    // console.log(`[TextareaAutocomplete] name=${this.props.name}, value=${this.props.value}`);\n\n    return (\n      <Form.Group\n          controlId = {this.props.name}\n          className = {this.getFormGroupClassNames()}>\n        <ConditionalWrapper\n            condition = {this.props.tooltip != null}\n            render    = {childr => <Tooltip id={`${this.props.name}-tooltip`} tooltip={this.props.tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <ReactTextareaAutocomplete<TListItem>\n                {...this.props}\n                name     = {this.props.name}\n                value    = {this.props.value ?? ''}\n                rows     = {this.props.rows ?? 4}\n\n                required  = {this.props.required}\n                readOnly  = {this.props.readOnly}\n                autoComplete = {this.props.autoComplete}\n                autoFocus = {this.props.autoFocus}\n\n                loadingComponent = {Loading}\n                className = 'form-control'\n                movePopupAsYouType\n                trigger   = {this.props.trigger}\n\n                onChange  = {this.handleChange}\n                onBlur    = {this.props.onBlur}\n                onFocus   = {this.props.onFocus}\n              />\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useMemo } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { composeValidators, formatValidation, requiredValidator, ValueValidatorFunction } from '../../store/Validation';\nimport TextareaAutocomplete, { AutocompleteListItem, ITextareaAutocompleteProps } from '../Input/TextareaAutocomplete';\n\nexport type IReTextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem> = {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n} & ITextareaAutocompleteProps<TListItem>;\n\nconst ReTextareaAutocomplete = forwardRef<any, IReTextareaAutocompleteProps>(({\n    name, required, format, parse,\n    onChange, onFocus, onBlur, ...rest }: IReTextareaAutocompleteProps, ref) => {\n  const intl = useIntl();\n\n  const validators = useMemo(() => {\n    const vals: Array<ValueValidatorFunction> = [];\n\n    if (required) {\n      vals.push(requiredValidator);\n    }\n\n    return composeValidators(...vals);\n  }, [required]);\n\n  return (\n    <Field name={name} validate={validators} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <TextareaAutocomplete\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref as any} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReTextareaAutocomplete;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport Icon from '../../common/components/Icon';\nimport Tooltip from '../../common/components/Tooltip';\n\nexport interface ITabbedViewProps {\n  id:          string;\n  labels:      Array<string>;\n  tooltips?:   Array<string>;\n\n  initialTab?: string;\n  activeTab?:  string;\n  onSelect?:   (newActiveTab: string) => void;\n\n  errors?:     string;\n  children:    Array<React.ReactNode>;\n}\n\nconst TabbedView: React.FC<ITabbedViewProps> = ({\n    id, labels, errors, tooltips,\n    initialTab, activeTab, onSelect,\n    children } : ITabbedViewProps) => {\n  const intl = useIntl();\n\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    preview: {\n      id: 'recipe.create.preview',\n      description: 'Preview',\n      defaultMessage: 'Preview',\n    },\n  });\n\n  const contentClassName = classNames('content', {\n    'has-error': !!errors,\n  });\n\n  const navClassName = classNames('nav', 'nav-tabs', {\n    'has-error': !!errors,\n  });\n\n  const tabs = children.slice(0, children.length - 1).map((childr, index) => (\n    <Tab\n        // eslint-disable-next-line react/no-array-index-key\n        key = {String(index)}\n        title = {(\n          <>\n            {labels[index]}\n            {tooltips?.[index] && (\n              <>\n                &nbsp;\n                <Tooltip\n                    id = {`${labels[index]}-tooltip`}\n                    placement = 'bottom'\n                    tooltip   = {tooltips[index]}>\n                  <Icon icon='info-circle' className='tooltip-icon' />\n                </Tooltip>\n              </>\n            )}\n          </>\n        )}\n        eventKey  = {String(index)}\n        className = 'editor'>\n      <div className={contentClassName}>{childr}</div>\n    </Tab>\n  ));\n\n  const handleSelect = (selectedKey: string | null) => {\n    if (onSelect && selectedKey) {\n      onSelect(selectedKey);\n    }\n  };\n\n  return (\n    <div className='live-editor'>\n      <Tabs\n          id = {`${id}-tabs`}\n          defaultActiveKey = {initialTab || '0'}\n          activeKey = {activeTab}\n          onSelect  = {handleSelect}\n          className = {navClassName}>\n        {tabs}\n        <Tab\n            title = {formatMessage(messages.preview)}\n            className = 'preview'\n            eventKey  = 'preview'>\n          <div className={contentClassName}>{children[children.length - 1]}</div>\n        </Tab>\n      </Tabs>\n      <div className='help-text error'>{errors}</div>\n    </div>\n  );\n};\n\nexport default TabbedView;\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\nimport { FormSpy } from 'react-final-form';\nimport { ValidationErrors } from 'final-form';\n\nimport '../css/smart_text_box.css';\n\nimport IngredientGroups from '../../recipe/components/IngredientGroups';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport parseIngredient from '../utilts/parseIngredient';\nimport { Ingredient, IngredientGroup, IngredientInput, SubRecipe } from '../../recipe/store/RecipeTypes';\nimport SubRecipes from '../../recipe/components/SubRecipes';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReTextareaAutocomplete from '../../common/components/ReduxForm/ReTextareaAutocomplete';\nimport TabbedView from './TabbedView';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\n\nexport interface IIngredientGroupsBoxProps {\n  nameIg:   string;\n  nameSub:  string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<Array<AutocompleteListItem>>;\n}\n\nfunction normalizeLine(line: string): string {\n  let res = line.replace(/\\t/g, ' ');\n  res = res.trim();\n  return res;\n}\n\n/* IngredientGroups */\n\nexport function ingredientsFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<IngredientGroup>): string {\n  let tr = '';\n  if (values) {\n    values.filter(ig => ig.title.trim().length > 0 || ig.ingredients.length > 0).forEach(ig => {\n      if (ig.title) {\n        tr += `${ig.title}:\\n`;\n      }\n      ig.ingredients.forEach(i => {\n        const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n        tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n        tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n        tr += `${i.title}\\n`;\n      });\n      tr += '\\n';\n    });\n  }\n  if (tr.endsWith('\\n')) {\n    return tr.substring(0, tr.length - 2);\n  }\n  return tr;\n}\n\nexport function ingredientsParser(parser: Record<string, string>, value: string | undefined): Array<IngredientGroup> {\n  if (!value) return [];\n  const dict = [{ title: '', ingredients: [] }];\n  let igTitle = '';\n  let ings: Array<IngredientInput> | undefined = dict.find(t => t.title === '')?.ingredients; // Should always exist, as it is the init group.\n  if (ings == null) throw new Error('Invalid state: ings may not be null.');\n  if (value) {\n    const tags = value.split('\\n').map(line => normalizeLine(line)).filter(t => t.length > 0);\n    tags.forEach(line => {\n      if (line.length > 0) {\n        // Check if the line is an IG title\n        // If line is IG title, update igTitle and continue\n        // Else add ing to the current ig group\n        if (line.endsWith(':') && line.length > 1) {\n          igTitle = line.substring(0, line.length - 1);\n          dict.push({ title: igTitle, ingredients: [] });\n          ings = dict.find(t => t.title === igTitle)?.ingredients; // Should always exist, as we just pushed it.\n          if (ings == null) throw new Error('Invalid state: The create ings may not be null.');\n        } else {\n          if (ings == null) throw new Error('Invalid state: ings may not be null.');\n          ings.push(parseIngredient(parser, line));\n        }\n      }\n    });\n  }\n  return dict;\n}\n\n/* SubRecipe */\n\nexport function subrecipesFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<SubRecipe>) {\n  let tr = '';\n  if (values) {\n    values.forEach(i => {\n      const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n      tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n      tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n      tr += `${i.title}\\n`;\n    });\n  }\n  return tr.substring(0, tr.length - 1);\n}\n\nexport function subrecipesParser(parser: Record<string, string>, value: string | undefined): Array<SubRecipe> {\n  if (!value) return [];\n  const ings: Array<SubRecipe> = [];\n  const subRecipes = value.split('\\n').map(line => normalizeLine(line)).filter(t => t.length > 1 && !t.startsWith(':'));\n  subRecipes.forEach(sr => {\n    if (sr.length > 0) {\n      ings.push(parseIngredient(parser, sr) as SubRecipe);\n    }\n  });\n  return ings;\n}\n\ninterface IItemProps {\n  entity: AutocompleteListItem;\n}\nconst Item = ({ entity: { char } }: IItemProps) => <div>{char}</div>;\n\nconst IngredientGroupsBox: React.FC<IIngredientGroupsBoxProps> = ({\n    nameIg, nameSub, fetchRecipeList }: IIngredientGroupsBoxProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    ingredients_label: {\n      id: 'recipe.create.ingredients_label',\n      description: 'Recipe ingredients label',\n      defaultMessage: 'Ingredients',\n    },\n    ingredients_tooltip: {\n      id: 'recipe.create.ing.info_desc',\n      description: 'info_desc',\n      defaultMessage: 'Each Ingredient should be on its own line. You can form groups by ending the groups first line with a colon (\":\").',\n    },\n    ingredients_placeholder: {\n      id: 'recipe.create.ing.ingredients_placeholder',\n      description: 'Example for writing ingredients',\n      defaultMessage: 'Dough:\\n300 g flour\\n100 ml milk\\n\\nDip:\\n100 ml olive oil\\n...',\n    },\n\n    subrecipes_label: {\n      id: 'recipe.create.subrecipes_label',\n      description: 'Recipe links label',\n      defaultMessage: 'Recipe links',\n    },\n    subrecipes_tooltip: {\n      id: 'recipe.create.subrecipes.tooltip',\n      description: 'Subrecipes tooltip',\n      defaultMessage: 'If the recipe is made of several subrecipes, then link them here. Each Recipe Link should be on its own line.',\n    },\n    subrecipes_placeholder: {\n      id: 'recipe.create.subrecipes.placeholder',\n      description: 'Subreceipes placeholder',\n      defaultMessage: ':dough-1\\n:olive-oil-dip-1',\n    },\n  });\n\n  const location = useLocation();\n\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith('/create')) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const checkErrorneous = (errors: ValidationErrors, touched: Record<string, boolean> | undefined) => {\n    if (touched?.[nameIg] === true && errors?.[nameIg] != null) {\n      return formatValidation(intl, errors?.[nameIg]);\n    } else if (touched?.[nameSub] && errors?.[nameSub] != null) {\n      return formatValidation(intl, errors?.[nameSub]);\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <FormSpy subscription={{ errors: true, touched: true, initialValues: true }}>\n      {({ errors, touched, initialValues }) => (\n        <TabbedView\n            id       = 'ingredients'\n            labels   = {[formatMessage(messages.ingredients_label), formatMessage(messages.subrecipes_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors   = {checkErrorneous(errors, touched)}\n            tooltips = {[formatMessage(messages.ingredients_tooltip), formatMessage(messages.subrecipes_tooltip)]}>\n          <FieldSpyValues fieldNames={[nameSub]}>\n            {values => (\n              <ReInput\n                  name     = {nameIg}\n                  rows     = {8}\n                  placeholder = {formatMessage(messages.ingredients_placeholder)}\n                  required = {initialValues && !values[nameSub]} />\n            )}\n          </FieldSpyValues>\n          <div className='form-group'>\n            <ReTextareaAutocomplete\n                name  = {nameSub}\n                rows = {8}\n                placeholder = {formatMessage(messages.subrecipes_placeholder)}\n                trigger={{\n                ':': {\n                  dataProvider: token => fetchRecipeList(token),\n                  component: Item,\n                  output: item => item.char,\n                },\n              }} />\n          </div>\n          <FieldSpyValues fieldNames={[nameIg, nameSub]}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <IngredientsPreview\n                      igData = {ingredientsParser(measurementsContext.parser, values[nameIg])}\n                      srData = {subrecipesParser(measurementsContext.parser,  values[nameSub])} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IIngredientsPreviewProps {\n  igData: Array<IngredientGroup>;\n  srData: Array<SubRecipe>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(ingredient => cb(ingredient)),\n}));\n\nconst IngredientsPreview: React.FC<IIngredientsPreviewProps> = ({ igData, srData }: IIngredientsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(igData, i => {\n      const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n      return { ...i, quantity: custom };\n    }), [igData]);\n\n  const srDataFormatted = useMemo(() => srData.map(i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [igData]);\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className='ingredients-panel'>\n          <div className='ingredient-groups'>\n            <SubRecipes subRecipes={srDataFormatted} />\n            <IngredientGroups groups={igDataFormatted} hasSubrecipes={srData.length > 0} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientGroupsBox;\n","import classNames from 'classnames';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { FormSpy } from 'react-final-form';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport FieldSpyValues from '../../common/components/ReduxForm/FieldSpyValues';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport Directions from '../../recipe/components/Directions';\nimport { Ingredient, IngredientGroup } from '../../recipe/store/RecipeTypes';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport { ingredientsParser } from './IngredientGroupsBox';\nimport TabbedView from './TabbedView';\n\nexport interface IDirectionBox {\n  name:       string;\n}\n\nconst DirectionBox: React.FC<IDirectionBox> = ({\n    name }: IDirectionBox) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    directions_label: {\n      id: 'recipe.create.directions_label',\n      description: 'Directions label',\n      defaultMessage: 'Directions',\n    },\n    directions_tooltip: {\n      id: 'recipe.create.dir.tooltip',\n      description: 'Directions Tooltip',\n      defaultMessage: 'Each Direction should be on its own line. You can form chapters by ending the chapters heading with a colon (\":\").',\n    },\n    directions_placeholder: {\n      id: 'recipe.create.dir.placeholder',\n      description: 'Directions Placeholder',\n      defaultMessage: 'Dough:\\nPrepare the dough.\\n\\nDip:\\nPrepare the dip.\\n...',\n    },\n  });\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith('/create')) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  return (\n    <FormSpy subscription={{ errors: true }}>\n      {({ errors }) => (\n        <TabbedView\n            id        = 'directions'\n            labels    = {[formatMessage(messages.directions_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors    = {formatValidation(intl, errors?.[name])}\n            tooltips  = {[formatMessage(messages.directions_tooltip)]}>\n          <ReInput\n              name = {name}\n              rows     = {8}\n              placeholder = {formatMessage(messages.directions_placeholder)} />\n          <FieldSpyValues fieldNames={[name, 'ingredientGroupsS']}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <DirectionsPreview\n                      directions = {values[name] ?? ''}\n                      ingredients = {ingredientsParser(measurementsContext.parser, values.ingredientGroupsS)} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IDirectionsPreviewProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(ingredient => cb(ingredient)),\n}));\n\nconst DirectionsPreview: React.FC<IDirectionsPreviewProps> = ({ directions, ingredients }: IDirectionsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(ingredients, i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [ingredients]);\n\n  const isMultiDirections = directions.includes(':\\n');\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className={classNames('directions-panel', { 'multi-directions': isMultiDirections })}>\n          <div className='direction-groups'>\n            <Directions directions={directions} ingredients={igDataFormatted} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default DirectionBox;\n","import React, { useContext, useMemo } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Col, Container, Form, Row } from 'react-bootstrap';\nimport { Form as ReduxForm } from 'react-final-form';\n\nimport '../../recipe/css/recipe.css';\nimport '../css/recipe_form.css';\n\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport TagListContainer from '../containers/TagListContainer';\nimport CourseSelectContainer from '../containers/CourseSelectContainer';\nimport CuisineSelectContainer from '../containers/CuisineSelectContainer';\nimport RecipeFormToolbar from '../containers/RecipeFormToolbar';\nimport ReInput from '../../common/components/ReduxForm/ReInput';\nimport ReCheckbox from '../../common/components/ReduxForm/ReCheckbox';\nimport InitialValuesResetter from '../../common/components/ReduxForm/ReInitialValuesResetter';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport ReFormStatus from '../../common/components/ReduxForm/ReFormStatus';\nimport RecipeFormImageRow from './RecipeFormImageRow';\nimport IngredientGroupsBox, { ingredientsFormatter, ingredientsParser, subrecipesFormatter, subrecipesParser } from './IngredientGroupsBox';\nimport DirectionBox from './DirectionBox';\n\nexport interface IRecipeFormProps {\n  recipe: Recipe | undefined;\n  isNew: boolean;\n  location: string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<AutocompleteListItem[]>;\n  onSubmit: (form: Recipe) => void;\n}\n\ntype RecipeFormatted = {\n  ingredientGroupsS: string;\n  subrecipesS: string;\n} & Recipe;\n\nconst RecipeForm: React.FC<IRecipeFormProps> = ({\n    recipe, isNew, location,\n    fetchRecipeList, onSubmit } : IRecipeFormProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    name_label: {\n      id: 'recipe.create.name_label',\n      description: 'Recipe name label',\n      defaultMessage: 'Recipe name',\n    },\n    course_label: {\n      id: 'recipe.create.course_label',\n      description: 'Course label',\n      defaultMessage: 'Course',\n    },\n    cuisine_label: {\n      id: 'recipe.create.cuisine_label',\n      description: 'Cuisine label',\n      defaultMessage: 'Cuisine',\n    },\n    tags_label: {\n      id: 'recipe.create.tags_label',\n      description: 'Tags label',\n      defaultMessage: 'Tags',\n    },\n    prep_time_label: {\n      id: 'recipe.create.prep_time_label',\n      description: 'Prep time label',\n      defaultMessage: 'Prep time (min)',\n    },\n    cooking_time_label: {\n      id: 'recipe.create.cooking_time_label',\n      description: 'Cooking time label',\n      defaultMessage: 'Cooking time (min)',\n    },\n    servings_label: {\n      id: 'recipe.create.servings_label',\n      description: 'Servings label',\n      defaultMessage: 'Servings',\n    },\n    information_label: {\n      id: 'recipe.create.information_label',\n      description: 'Recipe information label',\n      defaultMessage: 'Recipe information',\n    },\n    information_placeholder: {\n      id: 'recipe.create.information_placeholder',\n      description: 'Recipe information placeholder',\n      defaultMessage: 'A quick description of the recipe',\n    },\n    source_label: {\n      id: 'recipe.create.source_label',\n      description: 'Rating source label',\n      defaultMessage: 'Source',\n    },\n    source_tooltip: {\n      id: 'recipe.create.source_tooltip',\n      description: 'Rating source tooltip',\n      defaultMessage: 'Where the original recipe is from.',\n    },\n    public_label: {\n      id: 'recipe.create.public_label',\n      description: 'Recipe set public label',\n      defaultMessage: 'Public Recipe',\n    },\n  });\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const handleSubmit = (form: RecipeFormatted) => onSubmit({\n    ...form,\n    ingredientGroups: ingredientsParser(measurementsContext.parser, form.ingredientGroupsS),\n    subrecipes:        subrecipesParser(measurementsContext.parser, form.subrecipesS),\n  });\n\n  const initialValues: Partial<RecipeFormatted> | undefined = useMemo(() => {\n    if (isNew && !recipe) {\n      return {\n        slug: '',\n        public: true,\n        servings: 1,\n      };\n    } else {\n      return recipe\n        ? {\n        ...recipe,\n        ingredientGroupsS: ingredientsFormatter(intl, measurementsContext.formatter, recipe.ingredientGroups),\n        subrecipesS:        subrecipesFormatter(intl, measurementsContext.formatter, recipe.subrecipes),\n        } : undefined;\n    }\n    }, [recipe, isNew, location]);\n\n  // console.log(`[RecipeForm] recipe=${JSON.stringify(recipe)}, initialValues=${JSON.stringify(initialValues)}`);\n\n  return (\n    <ReduxForm\n        initialValues = {initialValues}\n        onSubmit = {handleSubmit}\n        subscription = {{}}\n        render = {({ form, handleSubmit: renderSubmit }) => (\n          <Form className='recipe-form' onSubmit={renderSubmit}>\n            <ReFormStatus />\n            <InitialValuesResetter form={form} initialValues={initialValues} />\n            <Container>\n              <Row>\n                <Col id='recipe-meta' md={5} lg={4}>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name      = 'title'\n                          label     = {formatMessage(messages.name_label)}\n                          required\n                          />\n                    </Col>\n                  </Row>\n\n                  <RecipeFormImageRow />\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <CourseSelectContainer\n                          name     = 'course'\n                          label    = {formatMessage(messages.course_label)} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <CuisineSelectContainer\n                          name     = 'cuisine'\n                          label    = {formatMessage(messages.cuisine_label)} />\n                    </Col>\n                    <Col xs={12}>\n                      <TagListContainer\n                          name     = 'tags'\n                          label    = {formatMessage(messages.tags_label)} />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'prepTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.prep_time_label)}\n                          min      = {1}\n                          max      = {999} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'cookTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.cooking_time_label)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'servings'\n                          type     = 'number'\n                          label    = {formatMessage(messages.servings_label)}\n                          min      = {1}\n                          max      = {999}\n                          required />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'source'\n                          label    = {formatMessage(messages.source_label)}\n                          tooltip  = {formatMessage(messages.source_tooltip)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReCheckbox\n                          name      = 'public'\n                          label     = {formatMessage(messages.public_label)} />\n                    </Col>\n                  </Row>\n\n                </Col>\n                <Col id='recipe' md={7} lg={8}>\n                  <ReInput\n                      name     = 'info'\n                      rows     = {3}\n                      label    = {formatMessage(messages.information_label)}\n                      placeholder = {formatMessage(messages.information_placeholder)} />\n                  <IngredientGroupsBox\n                      nameIg   = 'ingredientGroupsS'\n                      nameSub  = 'subrecipesS'\n                      fetchRecipeList = {fetchRecipeList} />\n                  <DirectionBox\n                      name       = 'directions' />\n\n                  <RecipeFormToolbar />\n                </Col>\n              </Row>\n            </Container>\n          </Form>\n    )} />\n  );\n};\n\nexport default RecipeForm;\n","import React, { useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport * as _ from 'lodash-es';\n\nimport { CombinedStore } from '../../app/Store';\nimport { useSelector } from '../../common/store/redux';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport { getRoutePath } from '../../common/utility';\n\nconst EditGuard: React.FC = () => {\n  const params = useParams();\n  const nav = useNavigate();\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const accountState = useSelector((state: CombinedStore) => state.account);\n  const recipeState = useSelector((state: CombinedStore) => state.recipeForm);\n  const recipe = recipeState.item;\n  const { pending } = recipeState.meta;\n  const wasRenderedRef = useRef<boolean>(false);\n\n  const user = accountState.item;\n  const mayEdit = user != null && (isNew || (user.id === recipe?.author));\n\n  useEffect(() => {\n    if (user != null && pending === PendingState.COMPLETED && recipe != null && !mayEdit) {\n      nav(getRoutePath(`/recipe/${recipeSlug}`));\n    }\n  }, [user, recipeState, mayEdit]);\n\n  useEffect(() => {\n    if (recipe?.slug != null && pending === PendingState.COMPLETED && isNew && wasRenderedRef.current) {\n      setTimeout(() => {\n        nav(getRoutePath(`/recipe/edit/${recipe.slug}`));\n      }, 250);\n    }\n    wasRenderedRef.current = true;\n  }, [pending]);\n\n  const recipeMeta = recipeState.meta;\n  // If recipe not found, redirect to NotFound-Page\n  useEffect(() => {\n    if (_.get(recipeMeta.error, 'status') === 404) {\n      nav(getRoutePath('/NotFound'));\n    }\n  }, [recipeMeta.error]);\n\n  return null;\n};\n\nexport default EditGuard;\n","import React, { useCallback, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { CombinedStore } from '../../app/Store';\nimport RecipeForm from '../components/RecipeForm';\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport EditGuard from '../components/EditGuard';\n\nconst RecipeFormPage: React.FC = () => {\n  const intl = useIntl();\n  const messages = defineMessages({\n    new_recipe: {\n      id: 'recipe_form.new_recipe',\n      description: 'New Recipe documentTitle',\n      defaultMessage: 'New Recipe',\n    },\n  });\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  const location = useLocation();\n\n  const fetchRecipeList = RecipeFormActions.fetchRecipeList;\n  const handleSubmit = useCallback(async (data: Recipe) => RecipeFormActions.save(dispatch, data), [dispatch]);\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const recipe = useSelector((state: CombinedStore) => state.recipeForm.item);\n\n  // Load Recipe / or init.\n  useEffect(() => {\n    if (recipeSlug) {\n      window.scrollTo(0, 0);\n      if (recipeSlug === 'create') {\n        dispatch(RecipeFormActions.reset());\n      } else {\n        dispatch(RecipeFormActions.load(recipeSlug));\n      }\n    }\n  }, [recipeSlug, location.key]);\n\n  // componentWillUnmount\n  useEffect(() => () => {\n    dispatch(RecipeFormActions.reset());\n  }, []);\n\n  return (\n    <PageWrapper title={isNew ? intl.formatMessage(messages.new_recipe) : recipe?.title}>\n      <EditGuard />\n      <RecipeForm\n          recipe = {recipe}\n          isNew  = {isNew}\n          location = {location.key}\n          fetchRecipeList = {fetchRecipeList}\n          onSubmit = {handleSubmit} />\n    </PageWrapper>\n  );\n};\n\nexport default RecipeFormPage;\n","import { handleError, request } from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, TagDto, toTag } from '../../recipe/store/RecipeTypes';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, TAGS_STORE } from './types';\nimport { toBasicAction } from '../../common/store/redux';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map((courseDto: CourseDto) => toCourse(courseDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map((cuisineDto: CuisineDto) => toCuisine(cuisineDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map((tagDto: TagDto) => toTag(tagDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["Checkbox","ref","createRef","handleChange","props","readOnly","disabled","onChange","name","value","this","current","focus","label","tooltip","Icon","icon","className","Form","controlId","getFormGroupClassNames","ConditionalWrapper","condition","render","childr","Tooltip","id","getHelpText","getErrorMessage","checked","getLabel","required","autoComplete","autoFocus","onBlur","onFocus","BaseInputComponent","forwardRef","format","parse","rest","intl","useIntl","validate","requiredValidator","undefined","validateFields","fprops","input","errors","formatValidation","meta","error","dirtySinceLastSubmit","submitError","namee","event","useSingle","getFunction","obj","useEffect","isValidNewOption","findSelectedOptions","options","Array","isArray","filter","o","includes","find","CreatableSelect","data","val","map","dat","handleCreate","inputValue","newOption","setState","prev","isMulti","selectedOptions","concat","state","classNames","isErrorneous","readonly","htmlFor","inputId","onCreateOption","isClearable","classNamePrefix","placeholder","nextProps","length","dataIdents","d","nextOptions","index","splice","parser","formatter","_name","dispatch","useDispatch","fetchTags","useCallback","RecipeGroupActions","RecipeFormActions","tags","useSelector","recipeGroups","items","useMemo","t","title","optionallyFormatMessage","sort","sortByLabel","locale","newValue","selected","forEach","v","tag","push","fetchCourses","courses","c","fetchCuisines","cuisines","formatMessage","messages","defineMessages","submit","description","defaultMessage","save","view","recipeState","recipeForm","preload","item","RecipeActions","isNew","showViewButton","pristine","subscription","submitting","Button","variant","type","isDemoMode","as","Link","to","getRoutePath","slug","onClick","accessKey","FileSelect","target","files","handleClear","clearValue","InputGroup","accept","size","identity","photo_label","key","useLocation","photoInputRef","useRef","useState","imageUrl","setImageUrl","IMAGE_PLACEHOLDER","getRecipeImagePlaceholder","Row","Col","xs","lg","xl","xxl","style","marginLeft","marginRight","WidthHeightRatio","height","width","FieldSpyValues","fieldNames","values","Image","src","recipePhoto","photo","getRecipeImage","alt","objectFit","URL","createObjectURL","parseFloatIgnoreLocale","str","normalized","ixDot","indexOf","ixComma","replace","parseFloat","numberSplit","number","last","n","lastIndexOf","amount","substring","parseFraction","fraction","normalize","split","line","measurement","ix","quantities","noMoreQuantities","nextTag","vulgarFraction","Number","isNaN","parseInt","toLocaleLowerCase","restFrac","textArray","reduce","text","denominator","numerator","gcd","GCD","buildFraction","slice","join","Loading","TextareaAutocomplete","rows","loadingComponent","movePopupAsYouType","trigger","validators","vals","composeValidators","labels","tooltips","initialTab","activeTab","onSelect","children","preview","contentClassName","navClassName","tabs","Tab","placement","eventKey","String","Tabs","defaultActiveKey","activeKey","selectedKey","normalizeLine","res","trim","ingredientsFormatter","tr","ig","ingredients","i","locMsrmnt","formatQuantity","itemCount","endsWith","ingredientsParser","dict","igTitle","ings","Error","parseIngredient","subrecipesFormatter","subrecipesParser","startsWith","sr","Item","char","entity","IngredientsPreview","igData","srData","igDataFormatted","cb","custom","quantity","ingredient","srDataFormatted","SubRecipes","subRecipes","IngredientGroups","groups","hasSubrecipes","nameIg","nameSub","fetchRecipeList","ingredients_label","ingredients_tooltip","ingredients_placeholder","subrecipes_label","subrecipes_tooltip","subrecipes_placeholder","location","setActiveTab","pathname","measurementsContext","useContext","MeasurementContext","checkErrorneous","touched","initialValues","ReInput","dataProvider","token","component","output","DirectionsPreview","directions","isMultiDirections","Directions","directions_label","directions_tooltip","directions_placeholder","ingredientGroupsS","recipe","onSubmit","name_label","course_label","cuisine_label","tags_label","prep_time_label","cooking_time_label","servings_label","information_label","information_placeholder","source_label","source_tooltip","public_label","public","servings","ingredientGroups","subrecipesS","subrecipes","form","renderSubmit","handleSubmit","ReFormStatus","Container","md","sm","min","max","ReCheckbox","params","useParams","nav","useNavigate","recipeSlug","accountState","account","pending","wasRenderedRef","user","mayEdit","author","PendingState","setTimeout","recipeMeta","_","new_recipe","window","scrollTo","PageWrapper","toBasicAction","COURSES_STORE","ACTION","request","get","serverURLs","then","payload","body","results","courseDto","toCourse","catch","err","handleError","CUISINES_STORE","cuisineDto","toCuisine","TAGS_STORE","tagDto","toTag"],"sourceRoot":""}