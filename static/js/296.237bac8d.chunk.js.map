{"version":3,"file":"static/js/296.237bac8d.chunk.js","mappings":"8LAaA,MAcA,GAdmBA,EAAAA,EAAAA,aAAgD,CAAAC,EAAoDC,KAAG,IAAtD,QAAEC,EAAO,UAAEC,KAAcC,GAAwBJ,EAAA,OACnHK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACDN,UAAaO,IAAW,aAAcP,GACtCQ,GAAE,IAAAC,OAAQV,GACVW,MAAQ,gCACJT,EACJH,IAAOA,EAAIM,SAAC,UAGhBC,EAAAA,EAAAA,KAACM,EAAAA,EAAY,CAACC,cAAeb,MAC5B,G,0DCZL,MAwBA,GAxBcH,EAAAA,EAAAA,aAA0C,CAAAC,EACIC,KAAS,IADZ,IACrDe,EAAG,YAAEC,EAAW,IAAEC,EAAG,QAAEC,KAAYf,GAAmBJ,EACxD,MAAOoB,EAAUC,IAAYC,EAAAA,EAAAA,WAAkB,IAE/CC,EAAAA,EAAAA,YAAU,KACRF,GAAS,EAAM,GACd,CAACL,IAEJ,MAAMQ,GAAcC,EAAAA,EAAAA,cAAY,KAC9BJ,GAAS,GACF,OAAPF,QAAO,IAAPA,GAAAA,GAAW,GACV,CAACA,IAEJ,OACEX,EAAAA,EAAAA,KAAA,OACIQ,IAAOI,EAAWH,EAAcD,EAChCE,IAAOA,EACPC,QAAWK,KAEPpB,EACJH,IAAOA,GAAO,G,6HCyBf,MAAMyB,UAAeC,EAAAA,EAAiCC,WAAAA,GAAA,SAAAC,WAC3D,KACQ5B,KAAM6B,EAAAA,EAAAA,aAAiB,KAU/BC,aAAgBC,IAAuC,IAADC,EAAAC,EACpDC,KAAKC,SAAS,CACZC,MAAOL,IAGU,QAAnBC,GAAAC,EAAAC,KAAKG,OAAMC,gBAAQ,IAAAN,GAAnBA,EAAAO,KAAAN,EAAsBC,KAAKG,MAAMG,KAAU,OAAJT,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MAAM,CACnD,CAdFK,KAAAA,GACE,QAAgB,MAAZP,KAAKlC,MAAekC,KAAKlC,IAAI0C,WAC/BR,KAAKlC,IAAI0C,QAAQD,SACV,EAGX,CAUAE,MAAAA,GACE,MAAM,MAAEP,EAAK,KAAEL,EAAI,SAAEO,EAAQ,KACzBE,EAAI,MAAEI,EAAK,QAAEC,EAAO,SAAEC,EAAQ,SAAEC,EAAQ,MACxCC,EAAK,UAAE9C,EAAS,SAAE+C,EAAQ,OAAEC,EAAM,KAAEC,KAAShD,GAAS+B,KAAKG,MAEzDe,EAAqB,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAMsB,MAAKC,GAAKA,EAAElB,QAAUA,IACnD,OACE7B,EAAAA,EAAAA,KAACgD,EAAAA,EAAKC,MAAK,IACHtB,KAAKuB,gBACTvD,UAAagC,KAAKwB,yBAClBd,MAAaA,EAAMtC,UACrBF,EAAAA,EAAAA,MAACuD,EAAAA,EAAkB,CACfC,UAAwB,MAAXf,EACbF,OAAakB,IAAUtD,EAAAA,EAAAA,KAACuD,EAAAA,EAAO,CAACC,GAAE,GAAApD,OAAK6B,EAAI,YAAYK,QAASA,EAAQvC,SAAEuD,IAAkBvD,SAAA,CAC7F4B,KAAK8B,SAAS,CAAEC,QAAQ,GAADtD,OAAK6B,EAAI,YAChCN,KAAKgC,cACLhC,KAAKiC,mBACN5D,EAAAA,EAAAA,KAAC6D,EAAAA,GAAW,CACRC,QAAO,GAAA1D,OAAW6B,EAAI,UACtBA,KAAeA,EACfJ,MAAegB,EACfkB,QAAevC,EAEfwC,WAAezB,GAAYC,EAE3BT,SAAeJ,KAAKJ,aACpB5B,UAAY,yBACZsE,gBAAkB,mBAClBxD,YAAc,MAEVb,EACJH,IAAOkC,KAAKlC,UAIxB,EAiBF,MAAMyE,EAAoBrC,KAA6BA,EAEvD,SAASsC,EAAoBJ,EAAgClC,GAC3D,OAAIuC,MAAMC,QAAQxC,GACTkC,EAAQO,QAAOvB,GAAKlB,EAAM0C,SAASxB,EAAElB,SAED,QAA3C2C,EAAOT,EAAQjB,MAAKC,GAAKA,EAAElB,QAAUA,WAAM,IAAA2C,EAAAA,EAAI,GADzC,IAADA,CAGT,CAEO,MAAMC,UAAwBtD,EAAAA,EAInCC,WAAAA,CAAYU,GACV4C,MAAM5C,GAJR,KACQrC,KAAM6B,EAAAA,EAAAA,aAAiB,KAqC/BC,aAAgBC,IACd,GAAIG,KAAKG,MAAMC,SAAU,CACvB,MAAM4C,EAAc,MAARnD,GAAgB4C,MAAMC,QAAQ7C,GAAQA,EAAKoD,KAAIC,GAAOA,EAAIhD,QAAc,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAsCK,MACtHF,KAAKG,MAAMC,SACTJ,KAAKG,MAAMG,KACX0C,EAEJ,GACA,KAEFG,aAAgBC,IACd,MAAMC,EAA4B,CAAEnD,MAAOkD,EAAYtC,MAAOsC,GAC9DpD,KAAKC,UAASqD,IAAI,CAEZlB,QAAS,IAAIkB,EAAKlB,QAASiB,OAG/B,KACE,GAAKrD,KAAKG,MAAMoD,QAET,CAAC,IAADC,EAAA3F,EACL,MAEM4F,EAAkBjB,GAFW,QAAlBgB,EAAGxD,KAAKG,MAAMN,YAAI,IAAA2D,EAAAA,EAAI,IACX/E,OAAOuB,KAAK0D,MAAMtB,SACO,IAAqB,QAApBvE,EAAImC,KAAKG,MAAMD,aAAK,IAAArC,EAAAA,EAAiC,GAAKuF,IAChHpD,KAAKJ,aAAa6D,EACpB,MANEzD,KAAKJ,aAAayD,EAMpB,GACA,EA1DJrD,KAAK0D,MAAQ,CACXtB,QAAS,GAEb,CAEA,+BAAOuB,CAAyBC,EAAkCF,GAChE,GAAsB,MAAlBE,EAAU/D,MAA0C,IAA1B+D,EAAU/D,KAAKgE,QAAyC,IAAzBH,EAAMtB,QAAQyB,OAAc,OAAOH,EAChG,MAAMI,EAAaF,EAAU/D,KAAKoD,KAAIc,GAAKA,EAAE7D,QACvC8D,EAAc,IAAIN,EAAMtB,SAE9B,IAAK,IAAI6B,EAAQD,EAAYH,OAAS,EAAGI,GAAS,IAAKA,EACjDH,EAAWlB,SAASoB,EAAYC,GAAO/D,QACzC8D,EAAYE,OAAOD,EAAO,GAI9B,OAAIP,EAAMtB,QAAQyB,SAAWG,EAAYH,OAAeH,EAEjD,IACFA,EACHtB,QAAS4B,EAEb,CAEAzD,KAAAA,GACE,QAAgB,MAAZP,KAAKlC,MAAekC,KAAKlC,IAAI0C,WAC/BR,KAAKlC,IAAI0C,QAAQD,SACV,EAGX,CA+BAE,MAAAA,GAGE,MAAM,MAAEP,EAAK,KAAEL,EAAI,SAAEO,EAAQ,KACzBE,EAAI,MAAEI,EAAK,QAAEC,EAAO,SAAEC,EAAQ,SAAEC,EAAQ,MACxCC,EAAK,UAAE9C,EAAS,SAAE+C,EAAQ,OAAEC,EAAM,KAAEC,KAAShD,GAAS+B,KAAKG,MAGzDiC,GADkB,OAAJvC,QAAI,IAAJA,EAAAA,EAAQ,IACApB,OAAOuB,KAAK0D,MAAMtB,SACxCqB,EAAkBjB,EAAoBJ,EAASlC,GAErD,OACE7B,EAAAA,EAAAA,KAACgD,EAAAA,EAAKC,MAAK,IACHtB,KAAKuB,gBACTvD,UAAagC,KAAKwB,yBAClBd,MAAaA,EAAMtC,UACrBF,EAAAA,EAAAA,MAACuD,EAAAA,EAAkB,CACfC,UAAwB,MAAXf,EACbF,OAAakB,IAAUtD,EAAAA,EAAAA,KAACuD,EAAAA,EAAO,CAACC,GAAE,GAAApD,OAAK6B,EAAI,YAAYK,QAASA,EAAQvC,SAAEuD,IAAkBvD,SAAA,CAC7F4B,KAAK8B,SAAS,CAAEC,QAAQ,GAADtD,OAAK6B,EAAI,YAChCN,KAAKgC,cACLhC,KAAKiC,mBACN5D,EAAAA,EAAAA,KAAC8F,EAAAA,EAAoB,CACjBhC,QAAO,GAAA1D,OAAO6B,EAAI,UAClBF,SAAYJ,KAAKJ,aACjB2C,iBAAoBA,EACpB6B,eAAkBpE,KAAKmD,aACvBkB,aAAW,EACXnE,MAASuD,EACTpB,WAAezB,GAAYC,EAE3B7C,UAAY,yBACZsE,gBAAkB,mBAClBF,QAAWA,EACXtD,YAAc,MAEVb,EACJH,IAAOkC,KAAKlC,UAIxB,E,2GCxNF,SAASwG,EAAoBC,GAAuB,IAADC,EAAAC,EACjD,MAAMC,EAAkBH,EAAKI,WAA+B,QAArBH,GAACI,EAAAA,EAAAA,IAAO,qBAAa,IAAAJ,EAAAA,EAAI,IAAMD,EAAKM,WAA+B,QAArBJ,GAACG,EAAAA,EAAAA,IAAO,qBAAa,IAAAH,EAAAA,EAAI,IAAIZ,QAAUU,EACtHO,EAAkBJ,EAAWC,WAAW,KACxCI,EAAkBL,EAAWM,SAAS,KAG5C,OAFwBN,EAAWG,UAAUC,EAAkB,EAAI,EAAGC,EAAgBL,EAAWb,OAAS,OAAIoB,EAGhH,CAKC,MA6BD,EA7BkDpH,IAAwD,IAAvD,MAAEa,EAAK,GAAEmD,EAAE,MAAE6B,EAAK,SAAEtF,GAA6BP,EAClG,MAAMqH,GAAMC,EAAAA,EAAAA,MACNC,GAAWC,EAAAA,EAAAA,MACXC,EAAa,OAAL5B,QAAK,IAALA,OAAK,EAALA,EAAOzC,KAAKqE,MAEpBC,GAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,GAexC,OAbArG,EAAAA,EAAAA,YAAU,KAERsG,SAAShH,MAAK,GAAAD,OAAgB,MAATC,GAAiBA,EAAMmF,OAAS,EAAC,GAAApF,OAAMC,EAAK,OAAQ,GAAE,aAAa,GACvF,CAACA,KAEJU,EAAAA,EAAAA,YAAU,KACR,GAAIkG,GAAe,MAANzD,EAAY,CACvB,MAAM8D,GAAIC,EAAAA,EAAAA,IAAa,aAEvBV,EAAIS,EACN,IACC,CAAC9D,EAAIyD,KAGNjH,EAAAA,EAAAA,KAACwH,EAAAA,EAAS,CAAChE,GAAG,iBAAiBiE,GAAG,OAAO9H,UAAWsG,EAAoBc,EAASW,UAAWrF,MAAO,CAAEsF,UAAU,GAADvH,OAAK8G,EAAqBU,cAAa,OAAO7H,UAC1JC,EAAAA,EAAAA,KAAC6H,EAAAA,EAAa,CAACC,SAAO,EAACC,YAAU,EAAAhI,SAC9BA,KAEO,C,+HCxCD,SAASiI,EAAUC,GAA+B,IAAdC,IAAI7G,UAAAmE,OAAA,QAAAoB,IAAAvF,UAAA,KAAAA,UAAA,IAvBhD,SAAoB8G,GAAiD,IAAdD,IAAI7G,UAAAmE,OAAA,QAAAoB,IAAAvF,UAAA,KAAAA,UAAA,GAChE,MAAM,UAAE+G,IAAcjB,EAAAA,EAAAA,YAAWkB,EAAAA,KAEjCtH,EAAAA,EAAAA,YAAU,KACR,IAAKmH,EAAM,OAEX,MAAMI,EAAWF,EAAyCG,OAAMC,IAC9D,MAAMC,EAAmB,IACpBD,EACHE,KAAAA,GACEJ,IACAE,EAAGE,OACL,GAGFP,EAAQM,EAAiB,IAI3B,OAAOH,CAAO,GACb,CAACF,EAAWD,EAASD,GAC1B,CAQES,EALgB1H,EAAAA,EAAAA,cAAauH,IAEvBI,OAAOC,QAAQZ,IAAUO,EAAGE,OAAO,GACtC,CAACT,IAEgBC,EACtB,C,cC5BA,MAAMY,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,mBAAoB,CAClBxF,GAAI,2BACJyF,YAAa,sEACbC,eAAgB,0EA0BpB,EAlB2D1J,IAA0C,IAAzC,QAAE2J,GAAiC3J,EAC7F,MAAM,cAAE4J,IAAkBC,EAAAA,EAAAA,KAEpBC,GAAYC,EAAAA,EAAAA,UAAQ,IAAMH,EAAcN,EAASE,qBAAqB,CAACI,IAEvEI,EAAeb,EAAWW,EAAWH,GAE3C,OACEtJ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGoJ,IACCnJ,EAAAA,EAAAA,KAACyJ,EAAAA,EAAY,CAACC,eAAgBA,IAAMJ,IAGrCE,IACA,E,wBCtBP,MAAMV,GAAWC,EAAAA,EAAAA,IAAe,CAC9BY,kBAAmB,CACjBnG,GAAI,2BACJyF,YAAa,gCACbC,eAAgB,+BAElBU,kBAAmB,CACjBpG,GAAI,2BACJyF,YAAa,qCACbC,eAAgB,mDAElBW,gCAAiC,CAC/BrG,GAAI,yCACJyF,YAAa,gGACbC,eAAgB,SAElBY,kCAAmC,CACjCtG,GAAI,2CACJyF,YAAa,iGACbC,eAAgB,WAGlBa,aAAc,CACZvG,GAAI,sBACJyF,YAAa,qCACbC,eAAgB,oBAIpB,SAASc,EAAcC,GAAqE,IAAhDC,EAAS7I,UAAAmE,OAAA,QAAAoB,IAAAvF,UAAA,GAAAA,UAAA,GAAG,KAAM8I,EAAa9I,UAAAmE,OAAA,QAAAoB,IAAAvF,UAAA,GAAAA,UAAA,GAAG,IAG5E,OAF2B4I,EAAKrF,KAAIwF,GAAKA,EAAEC,SAAQzF,KAAIwF,GAAOA,EAAEzD,SAAS,MAAQyD,EAAEzD,SAAS,MAAQyD,EAAEzD,SAAS,KAAQyD,EAAC,GAAAhK,OAAMgK,GAAChK,OAAG+J,KAExGG,KAAKJ,EACjC,CAUA,MAkBMK,EAAuDC,IAA6C,IAADC,EAAAC,EAAA,IAA3C,KAAEzI,EAAI,IAAE0I,GAA8BH,EAClG,MAAMI,GAAOvB,EAAAA,EAAAA,KAEP5G,EAAiF,QAA5EgI,EAA+D,QAA/DC,EAAGrD,SAASwD,cAAc,oBAADzK,OAAqB6B,EAAI,sBAAa,IAAAyI,OAAA,EAA5DA,EAA8DI,mBAAW,IAAAL,EAAAA,EAAIxI,EAErF8I,EAAyBC,EAAAA,EAAYL,GAAK/F,KAAIqG,IAAQC,EAAAA,EAAAA,IAAiBN,EAAMK,IAASA,EAAKhD,UAEjG,OACEpI,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAK0C,KACLzC,EAAAA,EAAAA,KAAA,MAAAD,SAAKiK,EAAce,OAChB,EAaT,MAAMI,EAAyCC,IAAmC,IAAlC,OAAEzI,GAA0ByI,EAC1E,MAAM,cAAEhC,IAAkBC,EAAAA,EAAAA,KAEpBgC,GAAgB9B,EAAAA,EAAAA,UAAQ,IAClB,MAAV5G,EAbJ,SAA0BA,GACxB,MAAM2I,EAAqBC,OAAOC,QAAQ7I,GAAQ2B,QAAOmH,IAAA,IAAEC,GAAID,EAAA,OAAMC,EAAIpF,WAAW,IAAI,IACxF,OAAOiF,OAAOI,YAAYL,EAC5B,CAUqBM,CAAiBjJ,QAAUiE,GAC3C,CAACjE,IAEEkJ,GAAoBtC,EAAAA,EAAAA,UAAQ,KAChC,GAAqB,MAAjB8B,GAA+D,IAAtCE,OAAOO,KAAKT,GAAe7F,OAAc,MAAO,GAC7E,MAAMuG,EAA8B,GAKpC,OAJAR,OAAOO,KAAKT,GAAeW,SAAQN,IACjC,MAAMO,EAAUZ,EAAcK,GAC9BK,EAAIG,MAAKlM,EAAAA,EAAAA,KAACuK,EAAiB,CAAWtI,KAAMyJ,EAAKf,IAAKsB,GAArBP,GAAiC,IAE7DK,CAAG,GACT,CAACV,IAEJ,GAAqB,MAAjBA,GAA+D,IAAtCE,OAAOO,KAAKT,GAAe7F,OAAc,OAAO,KAI7E,MAAM2G,GACJtM,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKqJ,EAAcN,EAASe,oCAC5B7J,EAAAA,EAAAA,KAAA,MAAAD,SAAKqJ,EAAcN,EAASgB,2CAGhC9J,EAAAA,EAAAA,KAAA,SAAAD,SACG8L,OAKP,OACEhM,EAAAA,EAAAA,MAACuM,EAAAA,EAAK,CACFC,SAAW,SACX1M,UAAY,cACZU,MAAS+I,EAAcN,EAASa,mBAAmB5J,SAAA,CACpDoM,GACDnM,EAAAA,EAAAA,KAACsM,EAAAA,EAAC,CAAC3M,UAAU,qBAAoBI,SAAEqJ,EAAcN,EAASc,uBACpD,EAYN2C,EAA+CC,IAA0E,IAAzE,MAAEC,EAAK,WAAEC,EAAU,OAAE/J,EAAM,gBAAEgK,GAAsCH,EACvH,MAAM,cAAEpD,IAAkBC,EAAAA,EAAAA,KAEpBuD,GAAiBC,EAAAA,EAAAA,SAAgB,IAChCC,EAAiBC,IAAsBjM,EAAAA,EAAAA,WAAkB,IAEhEC,EAAAA,EAAAA,YAAU,MACuB,IAA3B6L,EAAezK,UAAmC,IAAfuK,GAAkC,MAAV/J,IAC7DoK,GAAmB,GACJ,OAAfJ,QAAe,IAAfA,GAAAA,KAGFC,EAAezK,QAAUuK,CAAU,GAClC,CAACA,KAEJ3L,EAAAA,EAAAA,YAAU,KACJ0L,GAASK,GACXC,GAAmB,EACrB,GACC,CAACN,IAEJ,MAAMO,GAA8B/L,EAAAA,EAAAA,cAAY,KAC9C8L,GAAmB,EAAM,GACxB,IAEH,OACE/M,EAAAA,EAAAA,KAACiN,EAAAA,EAAK,CACFC,KAAQJ,EACRK,QAAU,UACVC,aAAc,CAAEC,WAAY,SAAUC,SAAU,UAChDC,QAAWP,EAA4BjN,SACxCqJ,EAAcN,EAASiB,eAClB,EAIZ,EApI+CvK,IAEyB,IAFxB,MAE5CiN,EAAK,WAAEC,EAAU,OAAE/J,EAAM,gBAAEgK,GAAmCnN,EAEhE,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACwN,EAAgB,CAACrE,QAASsD,KAC3BzM,EAAAA,EAAAA,KAACmL,EAAU,CAACxI,OAAQA,KACpB3C,EAAAA,EAAAA,KAACuM,EAAa,CAACE,MAAOA,EAAOC,WAAYA,EAAYC,gBAAiBA,EAAiBhK,OAAQA,MAC9F,EC3CP,EAbmDnD,IAAA,IAAC,gBAClDmN,GAAqCnN,EAAA,OACnCQ,EAAAA,EAAAA,KAACyN,EAAAA,GAAO,CAACC,aAAc,CAAEjB,OAAO,EAAMC,YAAY,EAAMiB,cAAc,GAAO5N,SAC1EyK,IAAA,IAAC,MAAEiC,EAAK,WAAEC,EAAU,aAAEiB,GAAcnD,EAAA,OACnCxK,EAAAA,EAAAA,KAAC4N,EAAU,CACPnB,MAASA,EACTC,WAAcA,EACd/J,OAAUgL,EACVhB,gBAAmBA,GAAmB,GAEpC,C,gGCQd,SAASkB,EAAWC,GAClB,OAAmB,IAAfA,EAAItI,OACC,GACiB,IAAfsI,EAAItI,OACNsI,EAAIC,cAEJD,EAAIE,OAAO,GAAGD,cAAgBD,EAAIG,MAAM,EAEnD,CAEA,MA0BA,GA1Bc1O,EAAAA,EAAAA,aAAwC,CAAAC,EAEfC,KAAS,IAFO,KACnDyN,EAAI,SAAEgB,EAAW,IAAI,QAAEf,EAAO,aAAEC,EAAY,QAAEG,EAAO,SAAExN,EAAQ,UAC/DJ,KAAcC,GAAmBJ,EACnC,MAAM2O,EAA+B,MAAhBf,EAAoB,qBAAAhN,OAAwByN,EAAWT,EAAaE,WAASlN,OAAGyN,EAAWT,EAAaC,kBAAgBzG,EAE7I,OACE5G,EAAAA,EAAAA,KAACoO,EAAAA,EAAmB,CAChBlB,KAAaA,EACbmB,MAAaH,EACbI,SAAaJ,EAAW,EACxBvO,UAAaO,IAAW,eAAgBP,EAAWwO,EAAc,CAC/DI,QAAqB,YAAZpB,IAEXI,QAAaA,KACT3N,EACJH,IAAOA,EAAIM,UACbC,EAAAA,EAAAA,KAACoO,EAAAA,EAAoBI,OAAM,CAACC,YAAwB,MAAXlB,EAAgBxN,UACvDF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACe,YAAZoN,IAAyBnN,EAAAA,EAAAA,KAAA,OAAKL,UAAU,aAAYI,UAACC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAI,CAACC,KAAK,QAAQxB,QAAQ,QAAQyB,KAAK,UAC9F5O,EAAAA,EAAAA,KAAA,QAAML,UAAU,cAAaI,SAAEA,UAGf,G,4EC9CnB,MAAM8O,GAAUtP,EAAAA,EAAAA,aAA0C,CAAAC,EAEhBC,KAAG,IAFc,SAChEqP,EAAW,QAAO,SAClB/O,EAAQ,UAAEJ,KAAcC,GAAqBJ,EAAA,OAC3CQ,EAAAA,EAAAA,KAAA,OAAKL,UAAWO,IAAW,UAAWP,EAAW,CAAE,CAACmP,GAAWA,OAAiBlP,EAAMH,IAAKA,EAAIM,SAC5FA,GACG,G,4ECLV,MAiBA,GAjByBR,EAAAA,EAAAA,aAAmD,CAAAC,EAErBC,KAAG,IAFmB,OAC3EsP,EAAM,MAAEC,EAAK,SAAEjP,EAAQ,UACvBJ,EAAS,MAAE0C,KAAUzC,GAA8BJ,EAAA,OACjDQ,EAAAA,EAAAA,KAAA,OACIqC,MAAS,CACP4M,WAAW,GAAD7O,OAAK2O,EAAM,KACrBC,MAAM,GAAD5O,OAAU4O,EAAK,KACpBF,SAAY,cACTzM,GAEL1C,UAAWO,IAAW,qBAAsBP,MACxCC,EACJH,IAAOA,EAAIM,SACZA,GACG,G,oHCOV,SAASmP,EAAeC,EAAmCC,EAAiBC,EAA2BC,GACrG,GAA0B,IAAtBD,EAAW7J,OAAc,OAE7B,MAAM+J,EAbR,SAA+BH,EAAiBE,GAC9C,MAAME,EAAUF,EAAsBG,WAAUF,GAAMA,EAAGlP,QAAU+O,IACnE,GAAII,GAAW,EAEb,OADYF,EAAsBzJ,OAAO2J,EAAS,GACvC,EAIf,CAKaE,CAAsBN,EAASE,GAE1CH,EAAOjD,KAAK,CACVkD,QAAaA,EACbC,WAAaA,EACbM,YAAaJ,EAAK,CAACA,QAAM3I,GAE7B,CA8FA,MAWA,EAX+CpH,IAAsE,IAAnE6P,WAAYO,EAAgB,YAAED,GAA+BnQ,EAC7G,MAAMqQ,GAA6CtG,EAAAA,EAAAA,UAAQ,IA5E7D,SAAyBqG,EAA0BD,GACjD,MAAML,EAAwB,IAAIK,GAC5BG,EAAcF,EAAiBrL,SAAS,MAExCwL,EAA8C,GACpD,IAAIV,EAA4B,GAC5BW,EAAc,GAoBlB,OAlBIF,GACFF,EAAiBK,MAAM,MAAM3L,QAAO4L,GAAaA,EAAU1K,OAAS,IAAGwG,SAAQkE,IACzEA,EAAUvJ,SAAS,MACrBuI,EAAea,EAAkBC,EAAaX,EAAYC,GAC1DU,EAAcE,EAAU1J,UAAU,EAAG0J,EAAU1K,OAAS,GACxD6J,EAAa,IAEbA,EAAWnD,KAAKgE,EAClB,IAGFhB,EAAea,EAAkBC,EAAaX,EAAYC,IAE1DJ,EAAea,EAAkB,GAAI,CAACH,GAAmBN,GAtC7D,SAAoCH,EAAmCG,GACrE,GAAqC,IAAjCA,EAAsB9J,OAAc,OAExC,MAAM2K,EAAehB,EAAOrM,MAAKsN,IAAOA,EAAGhB,UACvCe,EACEA,EAAaR,YACfQ,EAAaR,YAAYzD,QAAQoD,GAEjCa,EAAaR,YAAc,IAAIL,GAGjCH,EAAOkB,QAAQ,CAAEhB,WAAY,GAAIM,YAAa,IAAIL,KAGpDA,EAAsBzJ,OAAO,EAAGyJ,EAAsB9J,OACxD,CA0BE8K,CAA2BP,EAAkBT,GAEtCS,CACT,CAiDmEQ,CAAgBX,EAAkBD,IAAc,CAACC,EAAkBD,IAC9Ha,GAA8CjH,EAAAA,EAAAA,UAAQ,KAAMkH,OAhD1CpB,EAgD2DQ,GA9ChFvL,QAAO8L,GAAMA,EAAGf,WAAW7J,OAAS,GAAwB,MAAlB4K,EAAGT,aAAuBS,EAAGT,YAAYnK,OAAS,IAC5FZ,KAAIwL,IAAO,IAADM,EACT,IAAIC,EACyB,IAAzBP,EAAGf,WAAW7J,OAChBmL,GACE3Q,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWI,SACvBqQ,EAAGf,WAAW,KAGVe,EAAGf,WAAW7J,OAAS,IAChCmL,GACE3Q,EAAAA,EAAAA,KAAA,MAAIL,UAAU,aAAYI,SACvBqQ,EAAGf,WAAWzK,KAAIsL,IACjBlQ,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtBmQ,GAD4BA,QAQvC,MAAMU,GAAkBR,EAAGhB,QACrByB,GAAcC,EAAAA,EAAAA,IAAkB,QAAXJ,EAACN,EAAGhB,eAAO,IAAAsB,EAAAA,EAAI,IAE1C,OACE7Q,EAAAA,EAAAA,MAAA,OAAuBF,UAAWO,IAAW,WAAY2Q,GAAa9Q,SAAA,CAEnEqQ,EAAGhB,UACFvP,EAAAA,EAAAA,MAAA,MAAI2D,GAAE,aAAApD,OAAeyQ,GAAc9Q,SAAA,IAAAK,OAC7BgQ,EAAGhB,QAAO,MACdpP,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAU,CAACrR,QAAO,aAAAU,OAAeyQ,QAGrCT,EAAGT,aAAeS,EAAGT,YAAYnK,OAAS,IACzCxF,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaI,UAC1BC,EAAAA,EAAAA,KAACgR,EAAAA,EAAgB,CAAC7B,OAAQiB,EAAGT,YAAasB,cAAeL,GAAkBvB,EAAW7J,OAAS,MAGlGmL,IAbOE,EAcJ,IAzCd,IAA0BxB,CAgD2E,GAAE,CAACQ,IAEtG,OACE7P,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGyQ,GACA,C,kECnIP,MAoBA,EApB2DhR,IAC0B,IADzB,OACxD2P,EAAM,cAAE8B,EAAa,eAAEC,EAAc,WAAEC,GAAoC3R,EAC7E,MAAM4R,EAAeH,GAA4B,MAAV9B,GAAkBA,EAAO3J,OAAS,EACnE6L,EAAyB,OAANlC,QAAM,IAANA,OAAM,EAANA,EAAQ7K,QAAOgN,GAASA,EAAMjR,OAASiR,EAAM3B,YAAYnK,OAAS,IAAGZ,KAAI0M,IAChGtR,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4BAA2BI,UACxCC,EAAAA,EAAAA,KAACuR,EAAAA,EAAW,CACRH,aAAgBA,EAChBE,MAASA,EACTJ,eAAkBA,EAClB1P,KAAQ8P,EAAM3B,YACdwB,WAAcA,KAN4BG,EAAME,MAAQF,EAAMjR,SAWtE,OACEL,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SAAGsR,GAAoB,C,uICjB3B,MAAMvI,GAAWC,EAAAA,EAAAA,IAAe,CAC9B0I,SAAU,CACRjO,GAAI,6BACJyF,YAAa,oCACbC,eAAgB,YAElBwI,WAAY,CACVlO,GAAI,+BACJyF,YAAa,sCACbC,eAAgB,gBAYb,SAASyI,EAAkB/G,EAAiBgH,EAA0CC,EAAiCJ,GAC5H,IAAIK,EACJ,GAAmB,MAAfD,EAAqB,CACvB,MAAME,EAAsBH,EAAoBI,UAAUJ,EAAoBK,OAAOJ,IAEnFC,EADyB,MAAvBC,GACkBG,EAAAA,EAAAA,IAAwBtH,EAAM,eAAgBmH,EAAqB,CAAEI,UAAWV,IAEhFI,CAExB,MACEC,EAAoB,GAGtB,OAAOA,CACT,CAEA,MAoEA,EApEiDtS,IACmC,IADlC,aAC9C4R,EAAY,MAAEE,EAAK,KAAE9P,EAAI,eAAE0P,EAAc,WAAEC,GAA+B3R,EAC5E,MAAMoL,GAAOvB,EAAAA,EAAAA,MACP,cAAED,GAAkBwB,EAEpBgH,GAAsBzK,EAAAA,EAAAA,YAAWiL,EAAAA,GACjCC,EAAUjB,GAAgBE,EAAMjR,MAAQiR,EAAMjR,WAAQuG,EACtD0L,GAAcxB,EAAAA,EAAAA,IAAe,OAAPuB,QAAO,IAAPA,EAAAA,EAAW,IAEjC1C,EAAcnO,EAAKoD,KAAI,CAAC8M,EAAY9L,KAAW,IAAD2M,EAClD,MAAMC,EAAcd,EAAWD,SACzBgB,EAAcd,EAAkB/G,EAAMgH,EAAqBF,EAAWG,YAAaH,EAAWD,UAC9FiB,EAAchB,EAAWrR,MACzBsS,EAAc,CAACH,EAAWC,EAAaC,GAAapI,KAAK,KACzDsI,EAA0BC,QAAQL,IAAcK,QAAQJ,GAE9D,OACE5S,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYI,SAAA,CACvBoR,IACCnR,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,UACvBC,EAAAA,EAAAA,KAAC8S,EAAAA,EAAU,CACPrQ,MAASkQ,EACThT,UAAY,gBACZsC,KAAI,eAAA7B,OAAoBkR,EAAME,KAAI,QAAApR,OAAOsR,EAAWlO,SAG5DxD,EAAAA,EAAAA,KAAA,MAAIL,UAAU,WAAUI,SACrB6S,IACC/S,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACGyS,EACa,MAAbA,GAAqBA,EAAUhN,OAAS,GAAKiN,EAAYjN,OAAS,GAAK,IACvEiN,QAIPzS,EAAAA,EAAAA,KAAA,MAAIL,UAAU,aAAYI,UACxBC,EAAAA,EAAAA,KAAA,QAAAD,SACG2S,SApBuC,QAAdH,EAACb,EAAWlO,UAAE,IAAA+O,EAAAA,EAAI3M,GAAOmN,WAuBpD,IAIT,OACElT,EAAAA,EAAAA,MAACmT,EAAAA,EAAK,CAACC,SAAO,EAACrE,KAAK,KAAKjP,UAAU,0BAAyBI,SAAA,CACzDsS,IACCxS,EAAAA,EAAAA,MAAA,WAAS2D,GAAI0N,EAAc,eAAA9Q,OAAkBkS,QAAgB1L,EAAWjH,UAAU,gBAAeI,SAAA,IAAAK,OAC3FiS,EAAO,KACVnB,IAAkBlR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAU,CAACrR,QAAO,eAAAU,OAAiBkS,SAG3DtS,EAAAA,EAAAA,KAAA,SAAOL,UAAU,SAAQI,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACGoR,IACCnR,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAEZC,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAOqJ,EAAcN,EAAS2I,eAClCzR,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAOqJ,EAAcN,EAAS4I,sBAGtC1R,EAAAA,EAAAA,KAAA,SAAAD,SACG4P,MAEG,C,uICvGZ,MAAM7G,GAAWC,EAAAA,EAAAA,IAAe,CAC9BmK,WAAY,CACV1P,GAAI,gCACJyF,YAAa,oBACbC,eAAgB,cAElBuI,SAAU,CACRjO,GAAI,4BACJyF,YAAa,mCACbC,eAAgB,YAElBiK,UAAW,CACT3P,GAAI,6BACJyF,YAAa,qCACbC,eAAgB,eA+EpB,EArE+C1J,IACqB,IADpB,WAC5C4T,EAAU,eAAElC,EAAc,WAAEC,GAA8B3R,EAC5D,MAAMoL,GAAOvB,EAAAA,EAAAA,KAEPgK,EAAgC,MAAdD,GAAsBA,EAAW9O,QAAOgP,GAC9C,MAAfA,EAAG7B,UAAoB6B,EAAG7B,SAASjM,OAAS,GAAqB,MAAhB8N,EAAG7B,UAC7B,MAAlB6B,EAAGzB,aAAuByB,EAAGzB,YAAYrM,OAAS,IACvDA,OAAS,EAEN+N,EAA2B,OAAVH,QAAU,IAAVA,OAAU,EAAVA,EAAYxO,KAAI,CAAC4O,EAAW5N,KAAW,IAAD6N,EAC3D,MAAMjB,EAAoC,MAAtBgB,EAAU/B,UAAoB+B,EAAU/B,SAASjM,OAAS,GAA4B,MAAvBgO,EAAU/B,SAAmB+B,EAAU/B,SAAW,GAC/HgB,EAAuC,MAAzBe,EAAU3B,aAAsBK,EAAAA,EAAAA,IAAwBtH,EAAM,eAAgB4I,EAAU3B,YAAa,CAAEM,UAAWqB,EAAU/B,WAAc,GACxJiB,EAAcc,EAAUnT,MACxBsS,EAAc,CAACH,EAAWC,EAAaC,GAAapI,KAAK,KAE/D,OACEzK,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYI,SAAA,CACvBoR,IACCnR,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,UACvBC,EAAAA,EAAAA,KAAC8S,EAAAA,EAAU,CACPrQ,MAASkQ,EACThT,UAAY,gBACZsC,KAAI,iBAAA7B,OAAsBoT,EAAUE,qBAG3CL,IACCrT,EAAAA,EAAAA,KAAA,MAAIL,UAAU,qBAAoBI,UAChCF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACGyS,EACa,MAAbA,GAAqBA,EAAUhN,OAAS,GAAKiN,EAAYjN,OAAS,GAAK,IACvEiN,QAIPzS,EAAAA,EAAAA,KAAA,MAAIL,UAAWO,IAAW,sBAAuB,CAAE,YAAamT,IAAmBtT,UACjFC,EAAAA,EAAAA,KAAA,QAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACE,IAAIoH,EAAAA,EAAAA,IAAa,WAADnH,OAAYoT,EAAUhC,OAAS7R,UAAU,QAAOI,SAAE2S,WApBpB,QAA1Be,EAACD,EAAUE,uBAAe,IAAAD,EAAAA,EAAI7N,GAAOmN,WAuBhE,IAIT,OAAsB,MAAlBQ,GAAoD,IAA1BA,EAAe/N,OAAqB,MAGhExF,EAAAA,EAAAA,KAAA,OAAKL,UAAU,4BAA2BI,UACxCF,EAAAA,EAAAA,MAACmT,EAAAA,EAAK,CAACC,SAAO,EAACrE,KAAK,KAAKjP,UAAU,0BAAyBI,SAAA,EAC1DF,EAAAA,EAAAA,MAAA,WAAS2D,GAAI0N,EAAiB,kBAAetK,EAAWjH,UAAU,gBAAeI,SAAA,IAAAK,OAC3EwK,EAAKxB,cAAcN,EAASoK,YAAW,KAC1ChC,IAAkBlR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAU,CAACrR,QAAQ,mBAEzCM,EAAAA,EAAAA,KAAA,SAAOL,UAAU,SAAQI,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACGoR,IACCnR,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAEXsT,IAAmBrT,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAO6K,EAAKxB,cAAcN,EAAS2I,eAC3DzR,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAO6K,EAAKxB,cAAcN,EAASqK,qBAG3CnT,EAAAA,EAAAA,KAAA,SAAAD,SACGwT,QAGD,C,gJC5FH,MAAMI,EAAoBC,IAAc,KACxCC,EAAAA,EAAAA,IAAcC,EAAAA,GAAcC,EAAAA,EAAOC,aAAcC,QAASL,IAGpDM,EAAQC,GAAwBC,IAC3CA,EAAS,KAAKP,EAAAA,EAAAA,IAAcC,EAAAA,GAAcC,EAAAA,EAAOM,cACjDC,EAAAA,EAAAA,MACGC,IAAI,GAADnU,OAAIoU,EAAAA,EAAWZ,QAAMxT,OAAG+T,EAAU,MACrCM,MAAK1I,IACJqI,EAAST,GAAiBe,EAAAA,EAAAA,IAAS3I,EAAI4I,OAAoB,IAE5DC,OAAMjK,GAAOyJ,GAASpT,EAAAA,EAAAA,IAAY2J,EAAKmJ,EAAAA,MAAe,EAG9Ce,EAAeA,CAACrR,EAAY2Q,IAAwBC,IAC/DA,EAAS,KAAKP,EAAAA,EAAAA,IAAcC,EAAAA,GAAcC,EAAAA,EAAOe,iBACjDR,EAAAA,EAAAA,MACGS,OAAO,GAAD3U,OAAIoU,EAAAA,EAAWZ,QAAMxT,OAAG+T,EAAU,MACxCM,MAAK,KACJL,EAAS,KAAKP,EAAAA,EAAAA,IAAcC,EAAAA,GAAckB,EAAAA,GAAkBC,eAAgBhB,QAAS,CAAEzQ,GAAIA,IAAO,IAEnGoR,OAAMjK,GAAOyJ,GAASpT,EAAAA,EAAAA,IAAY2J,EAAKmJ,EAAAA,MAAe,EAG9CoB,EAAiBA,CAACf,EAAoBtS,IAAmBuS,IACpEA,EAAS,KACJP,EAAAA,EAAAA,IACDC,EAAAA,GACAkB,EAAAA,GAAkBG,mCAEpBlB,QAAS,CACPE,WAAYA,EACZiB,eAAgBvT,IAElB,EAGSwT,EAAWzB,GAA6BQ,IACnDA,EAAS,KAAKP,EAAAA,EAAAA,IAAcC,EAAAA,GAAcC,EAAAA,EAAOuB,SAAUrB,QAASL,GAAS,EAGlE2B,EAAQA,IAAOnB,IAC1BA,EAAS,KAAKP,EAAAA,EAAAA,IAAcC,EAAAA,GAAcC,EAAAA,EAAOyB,QAAS,C,qKCtCrD,MAAMtB,EAAQC,GAAwBC,IAC3CA,EAAS,KAAKP,EAAAA,EAAAA,IAAc4B,EAAAA,EAAmB1B,EAAAA,EAAOM,cACtDC,EAAAA,EAAAA,MACGC,IAAI,GAADnU,OAAIoU,EAAAA,EAAWZ,QAAMxT,OAAG+T,EAAU,MACrCM,MAAK1I,IACJ,MAAM6H,GAASc,EAAAA,EAAAA,IAAS3I,EAAI4I,MAC5BP,EAAS,KACJP,EAAAA,EAAAA,IACD4B,EAAAA,EACA1B,EAAAA,EAAOC,aAETC,QAASL,IAGXQ,GAAST,EAAAA,EAAAA,IAAiBC,GAAe,IAE1CgB,OAAMjK,GAAOyJ,GAASpT,EAAAA,EAAAA,IAAY2J,EAAK8K,EAAAA,KAAoB,EAGnDJ,EAAWzB,GAA6BQ,IACnDA,EAAS,KAAKP,EAAAA,EAAAA,IAAc4B,EAAAA,EAAmB1B,EAAAA,EAAOuB,SAAUrB,QAASL,GAAS,EAGvE2B,EAAQA,IAAOnB,IAC1BA,EAAS,KAAKP,EAAAA,EAAAA,IAAc4B,EAAAA,EAAmB1B,EAAAA,EAAOyB,QAAS,EAGpDE,EAAOC,MAAOvB,EAAuB5S,KAChD,MAAMoU,EAA+B,kBAAfpU,EAAKoU,MAAsBpU,EAAKoU,WAAQhP,EAExDiP,GAASrU,EAAKgC,GACdsS,EAAID,GACJvB,EAAAA,EAAAA,MAAUyB,KAAKvB,EAAAA,EAAWZ,SAC1BU,EAAAA,EAAAA,MAAU0B,MAAM,GAAD5V,OAAIoU,EAAAA,EAAWZ,QAAMxT,OAAGoB,EAAKgQ,KAAI,MAEtD4C,EAAS,KACJP,EAAAA,EAAAA,IACD4B,EAAAA,EACAI,EAAQ9B,EAAAA,EAAOkC,aAAelC,EAAAA,EAAOmC,gBAIzC,MAAMC,GAAMC,EAAAA,EAAAA,IAAgB5U,GAC5B,OAAOsU,EAAEO,KAAKF,GACX1B,MAAK1I,IACJ,GAAI6J,EACF,OAAOtB,EAAAA,EAAAA,MACJ0B,MAAM,GAAD5V,OAAIoU,EAAAA,EAAWZ,QAAMxT,OAAG2L,EAAI4I,KAAKnD,KAAI,MAC1C8E,OAAO,QAASV,GAChBnB,MAAK8B,IACJ,MAAM3C,GAASc,EAAAA,EAAAA,IAAS6B,EAAS5B,MACjCP,EAAS,KACJP,EAAAA,EAAAA,IACD4B,EAAAA,EACAI,EAAQ9B,EAAAA,EAAOyC,eAAiBzC,EAAAA,EAAO0C,gBAEzCC,MAAOlV,EAAKgC,GACZyQ,QAASL,IAGXQ,GAAST,EAAAA,EAAAA,IAAiBC,GAAe,IAE1CgB,OAAMjK,IAAOgM,EAAAA,EAAAA,IAAgBvC,EAAUzJ,EAAK8K,EAAAA,KACxC,CACL,MAAM7B,GAASc,EAAAA,EAAAA,IAAS3I,EAAI4I,MAC5BP,EAAS,KACJP,EAAAA,EAAAA,IACD4B,EAAAA,EACAI,EAAQ9B,EAAAA,EAAOyC,eAAiBzC,EAAAA,EAAO0C,gBAEzCC,MAAOb,EAAS,KAAerU,EAAKgC,GACpCyQ,QAASL,IAGXQ,GAAST,EAAAA,EAAAA,IAAiBC,GAC5B,CAGF,OADAQ,EAASwC,EAAyBpV,GAAMkT,EAAAA,EAAAA,IAAS3I,EAAI4I,QAC9C,IAAI,IAEZC,OAAMjK,IAAOgM,EAAAA,EAAAA,IAAgBvC,EAAUzJ,EAAK8K,EAAAA,IAAmB,EAIvDmB,EAA2BA,CAACC,EAAmBC,IAA8B1C,IAAmB,IAAD2C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACtF,QAAhBL,EAAAF,EAAUQ,cAAM,IAAAN,OAAA,EAAhBA,EAAkBvT,OAAyB,QAAvBwT,EAAKF,EAAYO,cAAM,IAAAL,OAAA,EAAlBA,EAAoBxT,KAC/C4Q,EAAS,KAAKP,EAAAA,EAAAA,IAAcyD,EAAAA,GAAevD,EAAAA,EAAOyB,UAE/B,QAAjByB,EAAAJ,EAAUU,eAAO,IAAAN,OAAA,EAAjBA,EAAmBzT,OAA0B,QAAxB0T,EAAKJ,EAAYS,eAAO,IAAAL,OAAA,EAAnBA,EAAqB1T,KACjD4Q,EAAS,KAAKP,EAAAA,EAAAA,IAAc2D,EAAAA,GAAgBzD,EAAAA,EAAOyB,UAEnC,QAAd2B,EAAAN,EAAUY,YAAI,IAAAN,OAAA,EAAdA,EAAgBvS,KAAI8S,GAAKA,EAAElU,KAAI8G,KAAK,SAAyB,QAArB8M,EAAKN,EAAYW,YAAI,IAAAL,OAAA,EAAhBA,EAAkBxS,KAAI8S,GAAKA,EAAElU,KAAI8G,KAAK,OACrF8J,EAAS,KAAKP,EAAAA,EAAAA,IAAc8D,EAAAA,GAAY5D,EAAAA,EAAOyB,QACjD,EAGWoC,EAAmBC,IAA6DvD,EAAAA,EAAAA,MACxFC,IAAI,GAADnU,OAAIoU,EAAAA,EAAWZ,OAAM,yCAAAxT,OAAwCyX,IAChEpD,MAAK1I,GAAOA,EAAI4I,KAAKmD,QAAQlT,KAAKgP,IAAiB,CAAQlI,IAAKkI,EAAOpC,KAAMvP,KAAM2R,EAAOpC,KAAMuG,KAAMnE,EAAOvT,YAC7GuU,OAAM,IAAM,I","sources":["common/components/HeaderLink.tsx","common/components/Image.tsx","common/components/Input/Select.tsx","common/components/PageWrapper.tsx","common/hooks/useBlocker.ts","common/components/NavigationPrompt.tsx","common/components/FormStatus.tsx","common/components/ReduxForm/ReFormStatus.tsx","common/components/Toast.tsx","common/components/Toolbar.tsx","common/components/WidthHeightRatio.tsx","recipe/components/Directions.tsx","recipe/components/IngredientGroups.tsx","recipe/components/Ingredients.tsx","recipe/components/SubRecipes.tsx","recipe/store/RecipeActions.ts","recipe_form/store/actions.ts"],"sourcesContent":["import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport '../css/header_link.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport PageScroller from './PageScroller';\n\nexport interface IHeaderLinkProps extends CommonProps {\n  linkFor: string;\n}\n\nconst HeaderLink = forwardRef<HTMLAnchorElement, IHeaderLinkProps>(({ linkFor, className, ...rest }: IHeaderLinkProps, ref) => (\n  <>\n    <Link\n        className = {classNames('headerlink', className)}\n        to = {`#${linkFor}`}\n        title = 'Permalink to this headline'\n        {...rest}\n        ref = {ref}>\n      ¶\n    </Link>\n    <PageScroller uriFragmentId={linkFor} />\n  </>\n));\n\nexport default HeaderLink;\n","import { forwardRef, useCallback, useEffect, useState } from 'react';\n\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IImageProps extends CommonProps {\n  src: string;\n  placeholder?: string;\n  alt?: string;\n\n  onError?: () => void;\n}\n\nconst Image = forwardRef<HTMLImageElement, IImageProps>(({\n    src, placeholder, alt, onError, ...rest }: IImageProps, ref) => {\n  const [hasError, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setError(false);\n  }, [src]);\n\n  const handleError = useCallback(() => {\n    setError(true);\n    onError?.();\n  }, [onError]);\n\n  return (\n    <img\n        src = {hasError ? placeholder : src}\n        alt = {alt}\n        onError = {handleError}\n\n        {...rest}\n        ref = {ref} />\n  );\n});\n\nexport default Image;\n","import { createRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport SelectReact, { MultiValue, SingleValue } from 'react-select';\nimport CreatableSelectReact from 'react-select/creatable';\n// import AsyncReact from 'react-select/async';\n\nimport '../../css/select.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Tooltip from '../Tooltip';\n\n/*\nexport class Async extends BaseInputComponent {\n  handleChange(data) {\n    this.setState({\n      value: data,\n    });\n\n    if (this.props.change) {\n      this.props.change(this.props.name, data ? data.value : '');\n      this.props.change(this.props.title, data ? data.label : '');\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.props.class} key={this.props.id}>\n        <div className={`form-group ${this.hasErrors() ? 'has-error' : null}`}>\n          { this.props.label ? <label>{ this.props.label }</label> : null }\n          <AsyncReact\n              name = {this.props.name}\n              value = {this.props.value}\n              onChange = {this.handleChange}\n              loadOptions = {this.props.loadOptions}\n          />\n          { this.getErrorMessage() }\n        </div>\n      </div>\n    );\n  }\n}\n*/\n\nexport interface SelectDataType {\n  value: string;\n  label: string;\n}\n\nexport interface ISelectProps extends IBaseInputComponentProps {\n  value?: string;\n  data?:  Array<SelectDataType>;\n\n  onChange?: (name: string, newValue: string | undefined) => void;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport class Select extends BaseInputComponent<ISelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType>) => {\n    this.setState({\n      value: data,\n    });\n\n    this.props.onChange?.(this.props.name, data?.value);\n  };\n\n  render() {\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const selectedOption = data?.find(o => o.value === value);\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <SelectReact\n              inputId     = {`${name}-input`}\n              name        = {name}\n              value       = {selectedOption}\n              options     = {data}\n\n              isDisabled  = {readOnly || disabled}\n\n              onChange    = {this.handleChange}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport interface ICreatableSelectValues extends IBaseInputComponentProps {\n  value?:   Array<string> | string;\n  data?:    Array<SelectDataType>;\n  isMulti?: boolean;\n}\ninterface ICreatableSelectProps extends ICreatableSelectValues {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onChange?: (name: string, newValue: any | undefined) => void;\n}\n\ninterface ICreatableSelectState {\n  options: Array<SelectDataType>;\n}\n\nconst isValidNewOption = (value: string): boolean => !!value;\n\nfunction findSelectedOptions(options: Array<SelectDataType>, value: Array<string> | string | undefined): Array<SelectDataType> | SelectDataType {\n  if (Array.isArray(value)) {\n    return options.filter(o => value.includes(o.value));\n  } else {\n    return options.find(o => o.value === value) ?? '' as unknown as SelectDataType;\n  }\n}\n\nexport class CreatableSelect extends BaseInputComponent<ICreatableSelectProps, ICreatableSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: ICreatableSelectProps) {\n    super(props);\n\n    this.state = {\n      options: [],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ICreatableSelectProps, state: ICreatableSelectState) {\n    if (nextProps.data == null || nextProps.data.length === 0 || state.options.length === 0) return state;\n    const dataIdents = nextProps.data.map(d => d.value);\n    const nextOptions = [...state.options];\n\n    for (let index = nextOptions.length - 1; index >= 0; --index) {\n      if (dataIdents.includes(nextOptions[index].value)) {\n        nextOptions.splice(index, 1);\n      }\n    }\n\n    if (state.options.length === nextOptions.length) return state;\n\n    return {\n      ...state,\n      options: nextOptions,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: MultiValue<SelectDataType> | SingleValue<SelectDataType>) => {\n    if (this.props.onChange) {\n      const val = data != null && Array.isArray(data) ? data.map(dat => dat.value) : (data as SingleValue<SelectDataType>)?.value;\n      this.props.onChange(\n        this.props.name,\n        val\n      );\n    }\n  };\n\n  handleCreate = (inputValue: string) => {\n    const newOption: SelectDataType = { value: inputValue, label: inputValue };\n    this.setState(prev => (\n        {\n          options: [...prev.options, newOption],\n        }\n      ),\n      () => {\n        if (!this.props.isMulti) {\n          this.handleChange(newOption);\n        } else {\n          const dataOptions = this.props.data ?? [];\n          const options = dataOptions.concat(this.state.options);\n          const selectedOptions = findSelectedOptions(options, [...(this.props.value as Array<string> | undefined ?? []), inputValue]);\n          this.handleChange(selectedOptions);\n        }\n      });\n  };\n\n  render() {\n    // console.log(`[Select] name=${this.props.name}, value=${JSON.stringify(this.props.value)}`);\n\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const dataOptions = data ?? [];\n    const options = dataOptions.concat(this.state.options);\n    const selectedOptions = findSelectedOptions(options, value);\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <CreatableSelectReact\n              inputId = {`${name}-input`}\n              onChange = {this.handleChange}\n              isValidNewOption = {isValidNewOption}\n              onCreateOption = {this.handleCreate}\n              isClearable\n              value = {selectedOptions}\n              isDisabled  = {readOnly || disabled}\n\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              options = {options}\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","import { useContext, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router';\n\nimport { AnyComponent } from '../../types/Types';\nimport DynamicHeightContext from '../context/DynamicHeightContext';\nimport ArrayReducerType from '../store/ArrayReducerType';\nimport ItemReducerType from '../store/ItemReducerType';\nimport { getEnv, getRoutePath } from '../utility';\nimport ErrorBoundary from './ErrorBoundary';\n\n/** {@link PageTitleFixer} Props. */\ninterface IPageWrapperProps {\n  /** Page title. */\n  title?:   string;\n  id?:      string;\n  state?:   ItemReducerType<unknown> | ArrayReducerType<unknown>;\n  /** Page component to render. */\n  children: AnyComponent;\n}\n\n/**\n * Strips slashes etc. of the path.\n *\n * Example:\n * location.pathname = /browse/\n * toCleanLocationPath = browse\n *\n * @param path - location.pathname\n *\n * @return Nice path without gibberish.\n */\nfunction toCleanLocationPath(path: string): string {\n  const pathNoHost      = path.startsWith(getEnv('PUBLIC_URL') ?? '') ? path.substring((getEnv('PUBLIC_URL') ?? '').length) : path;\n  const startsWithSlash = pathNoHost.startsWith('/');\n  const endsWithSlash   = pathNoHost.endsWith('/');\n  const pathNoSlashes   = pathNoHost.substring(startsWithSlash ? 1 : 0, endsWithSlash ? pathNoHost.length - 1 : undefined);\n\n  return pathNoSlashes;\n}\n\n/**\n * HOC to properly set the browser title to assure accessibilty.\n */\n const PageWrapper: React.FC<IPageWrapperProps> = ({ title, id, state, children }: IPageWrapperProps) => {\n  const nav = useNavigate();\n  const location = useLocation();\n  const error = state?.meta.error;\n\n  const dynamicHeightContext = useContext(DynamicHeightContext);\n\n  useEffect(() => {\n    // ARIA: Titles should contain the application name and page title.\n    document.title = (`${title != null && title.length > 0 ? `${title} | ` : ''}OwnRecipes`);\n  }, [title]);\n\n  useEffect(() => {\n    if (error && id == null) {\n      const p = getRoutePath('/NotFound');\n      // console.log(`[PageWrapper] nav to \"${p}\"`);\n      nav(p);\n    }\n  }, [id, error]);\n\n  return (\n    <Container id='main-container' as='main' className={toCleanLocationPath(location.pathname)} style={{ marginTop: `${dynamicHeightContext.toolbarHeight}px` }}>\n      <ErrorBoundary verbose printStack>\n        {children}\n      </ErrorBoundary>\n    </Container>\n  );\n};\n\nexport default PageWrapper;\n","import { History, Transition } from 'history';\nimport { useCallback, useContext, useEffect } from 'react';\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom';\n\ntype ExtendNavigator = Navigator & Pick<History, 'block'>;\n\nexport function useBlocker(blocker: (tx: Transition) => void, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    const unblock = (navigator as unknown as ExtendNavigator).block(tx => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    // eslint-disable-next-line consistent-return\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\nexport default function usePrompt(message: string, when = true) {\n  const blocker = useCallback((tx: Transition) => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm(message)) tx.retry();\n  }, [message]);\n\n  useBlocker(blocker, when);\n}\n","import { useMemo } from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { Beforeunload } from 'react-beforeunload';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport useBlocker from '../hooks/useBlocker';\n\nconst messages = defineMessages({\n  navigation_warning: {\n    id: 'navigationprompt.warning',\n    description: 'Prompt displayed when navigating on a dirty page (unsaved changes).',\n    defaultMessage: 'You have unsaved changed. If you continue, those change may be lost.',\n  },\n});\n\ninterface INavigationPromptProps {\n  isDirty?: boolean | undefined;\n}\n\nconst NavigationPrompt: React.FC<INavigationPromptProps> = ({ isDirty }: INavigationPromptProps) => {\n  const { formatMessage } = useIntl();\n\n  const promptMsg = useMemo(() => formatMessage(messages.navigation_warning), [formatMessage]);\n\n  const dirtyBlocker = useBlocker(promptMsg, isDirty);\n\n  return (\n    <>\n      {isDirty && (\n        <Beforeunload onBeforeunload={() => promptMsg} />\n      )}\n\n      {dirtyBlocker}\n    </>\n  );\n};\n\nexport default NavigationPrompt;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport '../css/form_errors.css';\n\nimport { formatValidation, ValidationError } from '../store/Validation';\nimport Alert from './Alert';\nimport NavigationPrompt from './NavigationPrompt';\nimport P from './P';\nimport Toast from './Toast';\n\nconst messages = defineMessages({\n  form_errors_title: {\n    id: 'status.form_errors_title',\n    description: 'Title for the form error box.',\n    defaultMessage: 'The form contains an error.',\n  },\n  form_errors_alert: {\n    id: 'status.form_errors_alert',\n    description: 'Alert text for the form error box.',\n    defaultMessage: 'Please fix the described error(s) and continue.',\n  },\n  form_errors_table_heading_error: {\n    id: 'status.form_errors_table_heading_error',\n    description: 'The form-errors will be displayed as table, with an error column. This is the column\\'s title.',\n    defaultMessage: 'Error',\n  },\n  form_errors_table_heading_message: {\n    id: 'status.form_errors_table_heading_message',\n    description: 'The form-errors will be displayed as table, with a message column. This is the column\\'s title.',\n    defaultMessage: 'Message',\n  },\n\n  save_success: {\n    id: 'status.save_success',\n    description: 'Toast for successfully saved form.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\nfunction joinSentences(msgs: Array<string>, separator = '\\n', defLineEnding = '.'): string {\n  const msgsWithLineEnding = msgs.map(s => s.trim()).map(s => ((s.endsWith('.') || s.endsWith('!') || s.endsWith('?')) ? s : `${s}${defLineEnding}`));\n\n  return msgsWithLineEnding.join(separator);\n}\n\ninterface IFormStatusProps {\n  dirty: boolean;\n  submitting: boolean;\n  errors: Record<string, ValidationError> | undefined;\n\n  onSubmitSuccess?: () => void;\n}\n\nconst FormStatus: React.FC<IFormStatusProps> = ({\n    // eslint-disable-next-line arrow-body-style\n    dirty, submitting, errors, onSubmitSuccess }: IFormStatusProps) => {\n  // console.log(`[FormStatus] dirty=${dirty}, submitting=${submitting}, errors=${JSON.stringify(errors)}`);\n  return (\n    <>\n      <NavigationPrompt isDirty={dirty} />\n      <FormErrors errors={errors} />\n      <SubmitSuccess dirty={dirty} submitting={submitting} onSubmitSuccess={onSubmitSuccess} errors={errors} />\n    </>\n  );\n};\n\ninterface IFormErrorRowErrorProps {\n  name: string;\n  err: ValidationError;\n}\n\nconst FormErrorRowError: React.FC<IFormErrorRowErrorProps> = ({ name, err }: IFormErrorRowErrorProps) => {\n  const intl = useIntl();\n\n  const label = document.querySelector(`[data-api-field=\"${name}\"] > label`)?.textContent ?? name;\n\n  const errMsgs: Array<string> = _.castArray(err).map(errr => formatValidation(intl, errr) || errr.message);\n\n  return (\n    <tr>\n      <td>{label}</td>\n      <td>{joinSentences(errMsgs)}</td>\n    </tr>\n  );\n};\n\nfunction getVisibleErrors(errors: Record<string, ValidationError>): Record<string, ValidationError> {\n  const visibleErrorsArray = Object.entries(errors).filter(([key]) => !key.startsWith('_'));\n  return Object.fromEntries(visibleErrorsArray);\n}\n\ninterface IFormErrorsProps {\n  errors: Record<string, ValidationError> | undefined;\n}\n\nconst FormErrors: React.FC<IFormErrorsProps> = ({ errors }: IFormErrorsProps) => {\n  const { formatMessage } = useIntl();\n\n  const visibleErrors = useMemo(() => (\n    errors != null ? getVisibleErrors(errors) : undefined\n  ), [errors]);\n\n  const errorTableRowsJsx = useMemo(() => {\n    if (visibleErrors == null || Object.keys(visibleErrors).length === 0) return [];\n    const res: Array<React.ReactNode> = [];\n    Object.keys(visibleErrors).forEach(key => {\n      const nextErr = visibleErrors[key];\n      res.push(<FormErrorRowError key={key} name={key} err={nextErr} />);\n    });\n    return res;\n  }, [visibleErrors]);\n\n  if (visibleErrors == null || Object.keys(visibleErrors).length === 0) return null;\n\n  // console.log(`[FormErrors] ${JSON.stringify(visibleErrors)}`);\n\n  const errorTableJsx = (\n    <table>\n      <thead>\n        <tr>\n          <th>{formatMessage(messages.form_errors_table_heading_error)}</th>\n          <th>{formatMessage(messages.form_errors_table_heading_message)}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {errorTableRowsJsx}\n      </tbody>\n    </table>\n  );\n\n  return (\n    <Alert\n        severity = 'danger'\n        className = 'form-errors'\n        title = {formatMessage(messages.form_errors_title)}>\n      {errorTableJsx}\n      <P className='alert-post-message'>{formatMessage(messages.form_errors_alert)}</P>\n    </Alert>\n  );\n};\n\ninterface ISubmitSuccessProps {\n  dirty: boolean;\n  submitting: boolean;\n  errors: Record<string, ValidationError> | undefined;\n\n  onSubmitSuccess?: () => void;\n}\n\nconst SubmitSuccess: React.FC<ISubmitSuccessProps> = ({ dirty, submitting, errors, onSubmitSuccess }: ISubmitSuccessProps) => {\n  const { formatMessage } = useIntl();\n\n  const prevSubmitting = useRef<boolean>(false);\n  const [showSaveSuccess, setShowSaveSuccess] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (prevSubmitting.current === true && submitting === false && errors == null) {\n      setShowSaveSuccess(true);\n      onSubmitSuccess?.();\n    }\n\n    prevSubmitting.current = submitting;\n  }, [submitting]);\n\n  useEffect(() => {\n    if (dirty && showSaveSuccess) {\n      setShowSaveSuccess(false);\n    }\n  }, [dirty]);\n\n  const handleCloseSaveSuccessToast = useCallback(() => {\n    setShowSaveSuccess(false);\n  }, []);\n\n  return (\n    <Toast\n        show = {showSaveSuccess}\n        variant = 'success'\n        anchorOrigin={{ horizontal: 'center', vertical: 'bottom' }}\n        onClose = {handleCloseSaveSuccessToast}>\n      {formatMessage(messages.save_success)}\n    </Toast>\n  );\n};\n\nexport default FormStatus;\n","import { FormSpy } from 'react-final-form';\nimport { ValidationError } from '../../store/Validation';\nimport FormStatus from '../FormStatus';\n\nexport interface IReFormStatusProps {\n  onSubmitSuccess?: () => void;\n}\n\nconst ReFormStatus: React.FC<IReFormStatusProps> = ({\n  onSubmitSuccess }: IReFormStatusProps) => (\n    <FormSpy subscription={{ dirty: true, submitting: true, submitErrors: true }}>\n      {({ dirty, submitting, submitErrors }) => (\n        <FormStatus\n            dirty = {dirty}\n            submitting = {submitting}\n            errors = {submitErrors as Record<string, ValidationError>}\n            onSubmitSuccess = {onSubmitSuccess} />\n      )}\n    </FormSpy>\n);\n\nexport default ReFormStatus;\n","import { forwardRef } from 'react';\nimport { Toast as ReactBootstrapToast } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport '../css/toast.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport Icon from './Icon';\n\nexport interface AnchorOriginPosition {\n  horizontal: 'center' | 'left' | 'right';\n  vertical: 'bottom' | 'top';\n}\n\nexport interface IToastProps extends CommonProps {\n  show: boolean;\n  autoHide?: number;\n\n  variant?: 'success';\n  anchorOrigin?: AnchorOriginPosition;\n\n  onClose?: () => void;\n\n  children: React.ReactNode;\n}\n\nfunction capitalize(str: string): string {\n  if (str.length === 0) {\n    return '';\n  } else if (str.length === 1) {\n    return str.toUpperCase();\n  } else {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n}\n\nconst Toast = forwardRef<HTMLDivElement, IToastProps>(({\n    show, autoHide = 6000, variant, anchorOrigin, onClose, children,\n    className, ...rest }: IToastProps, ref) => {\n  const anchorString = anchorOrigin != null ? `Toast-anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}` : undefined;\n\n  return (\n    <ReactBootstrapToast\n        show      = {show}\n        delay     = {autoHide}\n        autohide  = {autoHide > 0}\n        className = {classNames('simple-toast', className, anchorString, {\n          success: variant === 'success',\n        })}\n        onClose   = {onClose}\n        {...rest}\n        ref = {ref}>\n      <ReactBootstrapToast.Header closeButton={onClose != null}>\n        <>\n          {variant === 'success' && <div className='toast-icon'><Icon icon='check' variant='light' size='2x' /></div>}\n          <span className='toast-title'>{children}</span>\n        </>\n      </ReactBootstrapToast.Header>\n    </ReactBootstrapToast>\n  );\n});\n\nexport default Toast;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/toolbar.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IToolbarProps extends CommonProps {\n  position?: 'start' | 'end';\n  children: React.ReactNode;\n}\n\nexport const Toolbar = forwardRef<HTMLDivElement, IToolbarProps>(({\n  position = 'start',\n  children, className, ...rest }: IToolbarProps, ref) => (\n    <div className={classNames('toolbar', className, { [position]: position })} {...rest} ref={ref}>\n      {children}\n    </div>\n));\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/width_height_ratio.css';\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IWidthHeightRatioProps extends CommonProps {\n  height: number;\n  width:  number;\n  children: React.ReactNode;\n}\n\nconst WidthHeightRatio = forwardRef<HTMLDivElement, IWidthHeightRatioProps>(({\n  height, width, children,\n  className, style, ...rest }: IWidthHeightRatioProps, ref) => (\n    <div\n        style = {{\n          paddingTop: `${height}%`,\n          width:      `${width}%`,\n          position:   'relative',\n          ...style,\n        }}\n        className={classNames('width-height-ratio', className)}\n        {...rest}\n        ref = {ref}>\n      {children}\n    </div>\n));\n\nexport default WidthHeightRatio;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/directions.css';\n\nimport HeaderLink from '../../common/components/HeaderLink';\nimport { IngredientGroup } from '../store/RecipeTypes';\nimport IngredientGroups from './IngredientGroups';\nimport { slugify } from '../../common/utility';\n\nexport interface IDirectionsProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\ninterface DirectionWithIngredients {\n  heading?:     string;\n  directions:   Array<string>;\n  ingredients?: Array<IngredientGroup>;\n}\n\ntype DirectionsWithIngredients = Array<DirectionWithIngredients>;\n\nfunction getIngredientsForStep(heading: string, unassignedIngredients: Array<IngredientGroup>): IngredientGroup | undefined {\n  const igIndex = unassignedIngredients.findIndex(ig => ig.title === heading);\n  if (igIndex >= 0) {\n    const igs = unassignedIngredients.splice(igIndex, 1);\n    return igs[0];\n  }\n\n  return undefined;\n}\n\nfunction pushDirections(groups: DirectionsWithIngredients, heading: string, directions: Array<string>, unassignedIngredients: Array<IngredientGroup>) {\n  if (directions.length === 0) return;\n\n  const ig = getIngredientsForStep(heading, unassignedIngredients);\n\n  groups.push({\n    heading:     heading,\n    directions:  directions,\n    ingredients: ig ? [ig] : undefined,\n  });\n}\n\nfunction assignRemainingIngredients(groups: DirectionsWithIngredients, unassignedIngredients: Array<IngredientGroup>) {\n  if (unassignedIngredients.length === 0) return;\n\n  const untitledStep = groups.find(di => !di.heading);\n  if (untitledStep) {\n    if (untitledStep.ingredients) {\n      untitledStep.ingredients.push(...unassignedIngredients);\n    } else {\n      untitledStep.ingredients = [...unassignedIngredients];\n    }\n  } else {\n    groups.unshift({ directions: [], ingredients: [...unassignedIngredients] });\n  }\n\n  unassignedIngredients.splice(0, unassignedIngredients.length);\n}\n\nfunction parseDirections(directionsString: string, ingredients: Array<IngredientGroup>): DirectionsWithIngredients {\n  const unassignedIngredients = [...ingredients];\n  const isMultiStep = directionsString.includes('\\n');\n\n  const directionsGroups: DirectionsWithIngredients = [];\n  let directions: Array<string> = [];\n  let nextHeading = '';\n\n  if (isMultiStep) {\n    directionsString.split('\\n').filter(direction => direction.length > 0).forEach(direction => {\n      if (direction.endsWith(':')) {\n        pushDirections(directionsGroups, nextHeading, directions, unassignedIngredients);\n        nextHeading = direction.substring(0, direction.length - 1);\n        directions = [];\n      } else {\n        directions.push(direction);\n      }\n    });\n\n    pushDirections(directionsGroups, nextHeading, directions, unassignedIngredients);\n  } else {\n    pushDirections(directionsGroups, '', [directionsString], unassignedIngredients);\n  }\n\n  assignRemainingIngredients(directionsGroups, unassignedIngredients);\n\n  return directionsGroups;\n}\n\nfunction formatDirections(directions: DirectionsWithIngredients) {\n  return directions\n    .filter(di => di.directions.length > 0 || (di.ingredients != null && di.ingredients.length > 0))\n    .map(di => {\n      let directionsJsx: React.ReactElement | undefined;\n      if (di.directions.length === 1) {\n        directionsJsx = (\n          <div className='direction'>\n            {di.directions[0]}\n          </div>\n        );\n      } else if (di.directions.length > 1) {\n        directionsJsx = (\n          <ol className='directions'>\n            {di.directions.map(direction => (\n              <li className='direction' key={direction}>\n                {direction}\n              </li>\n            ))}\n          </ol>\n        );\n      }\n\n      const isDefaultGroup = !di.heading;\n      const headingSlug = slugify(di.heading ?? '');\n\n      return (\n        <div key={headingSlug} className={classNames('subgroup', headingSlug)}>\n          {/* eslint-disable-next-line react/jsx-one-expression-per-line */}\n          {di.heading && (\n            <h3 id={`direction-${headingSlug}`}>\n              {`${di.heading}:`}\n              <HeaderLink linkFor={`direction-${headingSlug}`} />\n            </h3>\n          )}\n          {di.ingredients && di.ingredients.length > 0 && (\n            <div className='ingredients'>\n              <IngredientGroups groups={di.ingredients} hasSubrecipes={isDefaultGroup && directions.length > 1} />\n            </div>\n          )}\n          {directionsJsx}\n        </div>\n      );\n    });\n}\n\nconst Directions: React.FC<IDirectionsProps> = ({ directions: directionsString, ingredients }: IDirectionsProps) => {\n  const directionGroups: DirectionsWithIngredients = useMemo(() => parseDirections(directionsString, ingredients), [directionsString, ingredients]);\n  const directionsGroupsJsx: Array<React.ReactNode> = useMemo(() => formatDirections(directionGroups), [directionGroups]);\n\n  return (\n    <>\n      {directionsGroupsJsx}\n    </>\n  );\n};\n\nexport default Directions;\n","import '../css/ingredients_panel.css';\n\nimport { IngredientGroup } from '../store/RecipeTypes';\n\nimport Ingredients from './Ingredients';\n\nexport interface IIngredientGroupsProps {\n  groups: Array<IngredientGroup> | undefined;\n  hasSubrecipes: boolean;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nconst IngredientGroups: React.FC<IIngredientGroupsProps> = ({\n    groups, hasSubrecipes, withHeaderLink, selectable }: IIngredientGroupsProps) => {\n  const showCaptions = hasSubrecipes || (groups != null && groups.length > 1);\n  const ingredientGroups = groups?.filter(group => group.title || group.ingredients.length > 0).map(group => (\n    <div className='subgroup ingredient-group' key={group.slug || group.title}>\n      <Ingredients\n          showCaptions = {showCaptions}\n          group = {group}\n          withHeaderLink = {withHeaderLink}\n          data = {group.ingredients}\n          selectable = {selectable}\n          />\n    </div>\n  ));\n\n  return (\n    <>{ingredientGroups}</>\n  );\n};\n\nexport default IngredientGroups;\n","import { useContext } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\n\nimport '../css/ingredients.css';\n\nimport MeasurementContext, { IMeasurementContext } from '../../common/context/MeasurementContext';\nimport HeaderLink from '../../common/components/HeaderLink';\nimport { optionallyFormatMessage, slugify } from '../../common/utility';\nimport { Ingredient, IngredientGroup } from '../store/RecipeTypes';\nimport ReCheckbox from '../../common/components/ReduxForm/ReCheckbox';\n\nconst messages = defineMessages({\n  quantity: {\n    id: 'ingredients.table.quantity',\n    description: 'Ingredients table quantity header',\n    defaultMessage: 'Quantity',\n  },\n  ingredient: {\n    id: 'ingredients.table.ingredient',\n    description: 'Ingredients table ingredient header',\n    defaultMessage: 'Ingredient',\n  },\n});\n\nexport interface IIngredientsProps {\n  showCaptions: boolean;\n  group: IngredientGroup;\n  data: Array<Ingredient>;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nexport function formatMeasurement(intl: IntlShape, measurementsContext: IMeasurementContext, measurement: string | undefined, quantity: string | undefined): string {\n  let measurementString: string;\n  if (measurement != null) {\n    const measurementParserId = measurementsContext.formatter[measurementsContext.parser[measurement]];\n    if (measurementParserId != null) {\n      measurementString = optionallyFormatMessage(intl, 'measurement.', measurementParserId, { itemCount: quantity });\n    } else {\n      measurementString = measurement;\n    }\n  } else {\n    measurementString = '';\n  }\n\n  return measurementString;\n}\n\nconst Ingredients: React.FC<IIngredientsProps> = ({\n    showCaptions, group, data, withHeaderLink, selectable }: IIngredientsProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n  const caption = showCaptions && group.title ? group.title : undefined;\n  const captionSlug = slugify(caption ?? '');\n\n  const ingredients = data.map((ingredient, index) => {\n    const quantityS   = ingredient.quantity;\n    const msrmtString = formatMeasurement(intl, measurementsContext, ingredient.measurement, ingredient.quantity);\n    const titleString = ingredient.title;\n    const fullString  = [quantityS, msrmtString, titleString].join(' ');\n    const renderQuantity: boolean = Boolean(quantityS) || Boolean(msrmtString);\n\n    return (\n      <tr className='ingredient' key={(ingredient.id ?? index).toString()}>\n        {selectable && (\n          <td className='selection'>\n            <ReCheckbox\n                label = {fullString}\n                className = 'label-sr-only'\n                name  = {`ingredients.${group.slug}.cb-${ingredient.id}`} />\n          </td>\n        )}\n        <td className='quantity'>\n          {renderQuantity && (\n            <span>\n              {quantityS}\n              {quantityS != null && quantityS.length > 0 && msrmtString.length > 0 && ' '}\n              {msrmtString}\n            </span>\n          )}\n        </td>\n        <td className='ingredient'>\n          <span>\n            {titleString}\n          </span>\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <Table striped size='sm' className='table ingredients-table'>\n      {caption && (\n        <caption id={withHeaderLink ? `ingredients-${captionSlug}` : undefined} className='subheading h3'>\n          {`${caption}:`}\n          {withHeaderLink && <HeaderLink linkFor={`ingredients-${captionSlug}`} />}\n        </caption>\n      )}\n      <thead className='hideme'>\n        <tr>\n          {selectable && (\n            <th><span>Selection</span></th>\n          )}\n          <th><span>{formatMessage(messages.quantity)}</span></th>\n          <th><span>{formatMessage(messages.ingredient)}</span></th>\n        </tr>\n      </thead>\n      <tbody>\n        {ingredients}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default Ingredients;\n","import classNames from 'classnames';\nimport { Table } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport HeaderLink from '../../common/components/HeaderLink';\nimport ReCheckbox from '../../common/components/ReduxForm/ReCheckbox';\nimport { getRoutePath, optionallyFormatMessage } from '../../common/utility';\nimport { SubRecipe } from '../store/RecipeTypes';\n\nconst messages = defineMessages({\n  subrecipes: {\n    id: 'subrecipes.subrecipes heading',\n    description: 'Subrecipes header',\n    defaultMessage: 'Subrecipes',\n  },\n  quantity: {\n    id: 'subrecipes.table.quantity',\n    description: 'Subrecipes table quantity header',\n    defaultMessage: 'Quantity',\n  },\n  subrecipe: {\n    id: 'subrecipes.table.subrecipe',\n    description: 'Subrecipes table ingredient header',\n    defaultMessage: 'Subrecipe',\n  },\n});\n\nexport interface ISubRecipesProps {\n  subRecipes: Array<SubRecipe> | undefined;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nconst SubRecipes: React.FC<ISubRecipesProps> = ({\n    subRecipes, withHeaderLink, selectable }: ISubRecipesProps) => {\n  const intl = useIntl();\n\n  const showQuantityCol = subRecipes == null || subRecipes.filter(sr => (\n    (sr.quantity != null && sr.quantity.length > 0 && sr.quantity !== '0')\n      || (sr.measurement != null && sr.measurement.length > 0)\n  )).length > 0;\n\n  const subRecipesList = subRecipes?.map((subRecipe, index) => {\n    const quantityS   = subRecipe.quantity != null && subRecipe.quantity.length > 0 && subRecipe.quantity !== '0' ? subRecipe.quantity : '';\n    const msrmtString = subRecipe.measurement != null ? optionallyFormatMessage(intl, 'measurement.', subRecipe.measurement, { itemCount: subRecipe.quantity }) : '';\n    const titleString = subRecipe.title;\n    const fullString  = [quantityS, msrmtString, titleString].join(' ');\n\n    return (\n      <tr className='ingredient' key={(subRecipe.child_recipe_id ?? index).toString()}>\n        {selectable && (\n          <td className='selection'>\n            <ReCheckbox\n                label = {fullString}\n                className = 'label-sr-only'\n                name  = {`subrecipes.cb-${subRecipe.child_recipe_id}`} />\n          </td>\n        )}\n        {showQuantityCol && (\n          <td className='quantity first-col'>\n            <span>\n              {quantityS}\n              {quantityS != null && quantityS.length > 0 && msrmtString.length > 0 && ' '}\n              {msrmtString}\n            </span>\n          </td>\n        )}\n        <td className={classNames('ingredient last-col', { 'first-col': showQuantityCol })}>\n          <span>\n            <Link to={getRoutePath(`/recipe/${subRecipe.slug}`)} className='title'>{titleString}</Link>\n          </span>\n        </td>\n      </tr>\n    );\n  });\n\n  if (subRecipesList == null || subRecipesList.length === 0) return null;\n\n  return (\n    <div className='subgroup ingredient-group'>\n      <Table striped size='sm' className='table ingredients-table'>\n        <caption id={withHeaderLink ? 'subrecipes' : undefined} className='subheading h3'>\n          {`${intl.formatMessage(messages.subrecipes)}:`}\n          {withHeaderLink && <HeaderLink linkFor='subrecipes' />}\n        </caption>\n        <thead className='hideme'>\n          <tr>\n            {selectable && (\n              <th><span>Selection</span></th>\n            )}\n            {showQuantityCol && <th><span>{intl.formatMessage(messages.quantity)}</span></th>}\n            <th><span>{intl.formatMessage(messages.subrecipe)}</span></th>\n          </tr>\n        </thead>\n        <tbody>\n          {subRecipesList}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SubRecipes;\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { toBasicAction } from '../../common/store/redux';\nimport { handleError } from '../../common/requestUtils';\nimport { Recipe, RecipeAction, RecipeActionTypes, RecipeDispatch, RecipeDto, RECIPE_STORE, toRecipe } from './RecipeTypes';\n\nexport const getRecipeSuccess = (recipe: Recipe): RecipeAction => (\n  { ...toBasicAction(RECIPE_STORE, ACTION.GET_SUCCESS), payload: recipe }\n);\n\nexport const load = (recipeSlug: string) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.GET_START) });\n  request()\n    .get(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(res => {\n      dispatch(getRecipeSuccess(toRecipe(res.body as RecipeDto)));\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_STORE)));\n};\n\nexport const deleteRecipe = (id: number, recipeSlug: string) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.DELETE_START) });\n  request()\n    .delete(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(() => {\n      dispatch({ ...toBasicAction(RECIPE_STORE, RecipeActionTypes.RECIPE_DELETE), payload: { id: id } });\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_STORE)));\n};\n\nexport const updateServings = (recipeSlug: string, value: number) => (dispatch: RecipeDispatch) => {\n  dispatch({\n    ...toBasicAction(\n      RECIPE_STORE,\n      RecipeActionTypes.RECIPE_INGREDIENT_SERVINGS_UPDATE\n    ),\n    payload: {\n      recipeSlug: recipeSlug,\n      customServings: value,\n    },\n  });\n};\n\nexport const preload = (recipe: Partial<Recipe>) => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.PRELOAD), payload: recipe });\n};\n\nexport const reset = () => (dispatch: RecipeDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_STORE, ACTION.RESET) });\n};\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { AnyDispatch, toBasicAction } from '../../common/store/redux';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport { handleError, handleFormError } from '../../common/requestUtils';\nimport { Recipe, RecipeDto, toRecipe, toRecipeRequest } from '../../recipe/store/RecipeTypes';\nimport { COURSES_STORE, CUISINES_STORE, TAGS_STORE } from '../../recipe_groups/store/types';\nimport { getRecipeSuccess } from '../../recipe/store/RecipeActions';\nimport { RecipeFormDispatch, RECIPE_FORM_STORE } from './types';\n\nexport const load = (recipeSlug: string) => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.GET_START) });\n  request()\n    .get(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(res => {\n      const recipe = toRecipe(res.body);\n      dispatch({\n        ...toBasicAction(\n          RECIPE_FORM_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: recipe,\n      });\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      dispatch(getRecipeSuccess(recipe) as any);\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_FORM_STORE)));\n};\n\nexport const preload = (recipe: Partial<Recipe>) => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.PRELOAD), payload: recipe });\n};\n\nexport const reset = () => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.RESET) });\n};\n\nexport const save = async (dispatch: AnyDispatch, data: Recipe) => {\n  const photo = (typeof data.photo === 'object') ? data.photo : undefined;\n\n  const isNew = !data.id;\n  const r = isNew\n      ? request().post(serverURLs.recipe)\n      : request().patch(`${serverURLs.recipe}${data.slug}/`);\n\n  dispatch({\n    ...toBasicAction(\n      RECIPE_FORM_STORE,\n      isNew ? ACTION.CREATE_START : ACTION.UPDATE_START\n    ),\n  });\n\n  const dto = toRecipeRequest(data);\n  return r.send(dto)\n    .then(res => {\n      if (photo) {\n        return request()\n          .patch(`${serverURLs.recipe}${res.body.slug}/`)\n          .attach('photo', photo)\n          .then(resPhoto => {\n            const recipe = toRecipe(resPhoto.body);\n            dispatch({\n              ...toBasicAction(\n                RECIPE_FORM_STORE,\n                isNew ? ACTION.CREATE_SUCCESS : ACTION.UPDATE_SUCCESS\n              ),\n              oldId: data.id,\n              payload: recipe,\n            });\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            dispatch(getRecipeSuccess(recipe) as any);\n          })\n          .catch(err => handleFormError(dispatch, err, RECIPE_FORM_STORE));\n        } else {\n          const recipe = toRecipe(res.body);\n          dispatch({\n            ...toBasicAction(\n              RECIPE_FORM_STORE,\n              isNew ? ACTION.CREATE_SUCCESS : ACTION.UPDATE_SUCCESS\n            ),\n            oldId: isNew ? (null as any) : data.id, // eslint-disable-line @typescript-eslint/no-explicit-any\n            payload: recipe,\n          });\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          dispatch(getRecipeSuccess(recipe) as any);\n        }\n      // OPT HACK: Move this to recipe_groups\n      dispatch(invalidateCreatableLists(data, toRecipe(res.body)));\n      return null;\n    })\n    .catch(err => handleFormError(dispatch, err, RECIPE_FORM_STORE));\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invalidateCreatableLists = (oldRecipe: Recipe, savedRecipe: Recipe): any => (dispatch: any) => {\n  if (oldRecipe.course?.id !== savedRecipe.course?.id) {\n    dispatch({ ...toBasicAction(COURSES_STORE, ACTION.RESET) });\n  }\n  if (oldRecipe.cuisine?.id !== savedRecipe.cuisine?.id) {\n    dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.RESET) });\n  }\n  if (oldRecipe.tags?.map(t => t.id).join('/') !== savedRecipe.tags?.map(t => t.id).join('/')) {\n    dispatch({ ...toBasicAction(TAGS_STORE, ACTION.RESET) });\n  }\n};\n\nexport const fetchRecipeList = (searchTerm: string): Promise<Array<AutocompleteListItem>> => request()\n    .get(`${serverURLs.recipe}?fields=id,title,slug&limit=5&search=${searchTerm}`)\n    .then(res => res.body.results.map((recipe: RecipeDto) => ({ key: recipe.slug, name: recipe.slug, char: recipe.title } as AutocompleteListItem)))\n    .catch(() => []);\n"],"names":["forwardRef","_ref","ref","linkFor","className","rest","_jsxs","_Fragment","children","_jsx","Link","classNames","to","concat","title","PageScroller","uriFragmentId","src","placeholder","alt","onError","hasError","setError","useState","useEffect","handleError","useCallback","Select","BaseInputComponent","constructor","arguments","createRef","handleChange","data","_this$props$onChange","_this$props","this","setState","value","props","onChange","call","name","focus","current","render","style","tooltip","readOnly","disabled","label","helpText","errors","meta","selectedOption","find","o","Form","Group","getGroupProps","getFormGroupClassNames","ConditionalWrapper","condition","childr","Tooltip","id","getLabel","htmlFor","getHelpText","getErrorMessage","SelectReact","inputId","options","isDisabled","classNamePrefix","isValidNewOption","findSelectedOptions","Array","isArray","filter","includes","_options$find","CreatableSelect","super","val","map","dat","handleCreate","inputValue","newOption","prev","isMulti","_this$props$data","selectedOptions","state","getDerivedStateFromProps","nextProps","length","dataIdents","d","nextOptions","index","splice","CreatableSelectReact","onCreateOption","isClearable","toCleanLocationPath","path","_getEnv","_getEnv2","pathNoHost","startsWith","getEnv","substring","startsWithSlash","endsWithSlash","endsWith","undefined","nav","useNavigate","location","useLocation","error","dynamicHeightContext","useContext","DynamicHeightContext","document","p","getRoutePath","Container","as","pathname","marginTop","toolbarHeight","ErrorBoundary","verbose","printStack","usePrompt","message","when","blocker","navigator","NavigationContext","unblock","block","tx","autoUnblockingTx","retry","useBlocker","window","confirm","messages","defineMessages","navigation_warning","description","defaultMessage","isDirty","formatMessage","useIntl","promptMsg","useMemo","dirtyBlocker","Beforeunload","onBeforeunload","form_errors_title","form_errors_alert","form_errors_table_heading_error","form_errors_table_heading_message","save_success","joinSentences","msgs","separator","defLineEnding","s","trim","join","FormErrorRowError","_ref2","_document$querySelect","_document$querySelect2","err","intl","querySelector","textContent","errMsgs","_","errr","formatValidation","FormErrors","_ref4","visibleErrors","visibleErrorsArray","Object","entries","_ref3","key","fromEntries","getVisibleErrors","errorTableRowsJsx","keys","res","forEach","nextErr","push","errorTableJsx","Alert","severity","P","SubmitSuccess","_ref5","dirty","submitting","onSubmitSuccess","prevSubmitting","useRef","showSaveSuccess","setShowSaveSuccess","handleCloseSaveSuccessToast","Toast","show","variant","anchorOrigin","horizontal","vertical","onClose","NavigationPrompt","FormSpy","subscription","submitErrors","FormStatus","capitalize","str","toUpperCase","charAt","slice","autoHide","anchorString","ReactBootstrapToast","delay","autohide","success","Header","closeButton","Icon","icon","size","Toolbar","position","height","width","paddingTop","pushDirections","groups","heading","directions","unassignedIngredients","ig","igIndex","findIndex","getIngredientsForStep","ingredients","directionsString","directionGroups","isMultiStep","directionsGroups","nextHeading","split","direction","untitledStep","di","unshift","assignRemainingIngredients","parseDirections","directionsGroupsJsx","formatDirections","_di$heading","directionsJsx","isDefaultGroup","headingSlug","slugify","HeaderLink","IngredientGroups","hasSubrecipes","withHeaderLink","selectable","showCaptions","ingredientGroups","group","Ingredients","slug","quantity","ingredient","formatMeasurement","measurementsContext","measurement","measurementString","measurementParserId","formatter","parser","optionallyFormatMessage","itemCount","MeasurementContext","caption","captionSlug","_ingredient$id","quantityS","msrmtString","titleString","fullString","renderQuantity","Boolean","ReCheckbox","toString","Table","striped","subrecipes","subrecipe","subRecipes","showQuantityCol","sr","subRecipesList","subRecipe","_subRecipe$child_reci","child_recipe_id","getRecipeSuccess","recipe","toBasicAction","RECIPE_STORE","ACTION","GET_SUCCESS","payload","load","recipeSlug","dispatch","GET_START","request","get","serverURLs","then","toRecipe","body","catch","deleteRecipe","DELETE_START","delete","RecipeActionTypes","RECIPE_DELETE","updateServings","RECIPE_INGREDIENT_SERVINGS_UPDATE","customServings","preload","PRELOAD","reset","RESET","RECIPE_FORM_STORE","save","async","photo","isNew","r","post","patch","CREATE_START","UPDATE_START","dto","toRecipeRequest","send","attach","resPhoto","CREATE_SUCCESS","UPDATE_SUCCESS","oldId","handleFormError","invalidateCreatableLists","oldRecipe","savedRecipe","_oldRecipe$course","_savedRecipe$course","_oldRecipe$cuisine","_savedRecipe$cuisine","_oldRecipe$tags","_savedRecipe$tags","course","COURSES_STORE","cuisine","CUISINES_STORE","tags","t","TAGS_STORE","fetchRecipeList","searchTerm","results","char"],"sourceRoot":""}