{"version":3,"file":"static/js/791.9e36fc3b.chunk.js","mappings":"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","sources":["common/hooks/useSingle.ts","random/constants/DefaultFilters.ts","random/components/SearchReload.tsx","random/components/SearchMenu.tsx","random/components/RandomHeader.tsx","random/containers/RandomPage.tsx","recipe_groups/store/actions.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","const defaultFilters: Record<string, string | number> = {\n  limit: 4,\n};\n\nexport default defaultFilters;\n","import { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport '../../common/css/modal.css';\n\nimport Icon from '../../common/components/Icon';\nimport P from '../../common/components/P';\n\nexport interface ISearchReloadProps {\n  onReloadClick: () => void;\n}\n\nconst SearchReload: React.FC<ISearchReloadProps> = ({ onReloadClick }: ISearchReloadProps) => {\n  const intl = useIntl();\n\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    search_nothing_found_yet_heading: {\n      id: 'random.reload.heading',\n      description: 'Nothing found?',\n      defaultMessage: 'Not the right one?',\n    },\n    search_nothing_found_yet: {\n      id: 'random.reload.text',\n      description: 'Nothing found? Text',\n      defaultMessage: 'Just give it another try.',\n    },\n    search_reload_button: {\n      id: 'random.reload.button',\n      description: 'Title/tooltip of the icon button to reload to recipes.',\n      defaultMessage: 'Reload recipes',\n    },\n  });\n\n  return (\n    <div className='search-reload reload-container'>\n      <div className='search-reload modal-content'>\n        <div className='search-reload-box'>\n          <h2>{formatMessage(messages.search_nothing_found_yet_heading)}</h2>\n          <P>{formatMessage(messages.search_nothing_found_yet)}</P>\n        </div>\n        <div className='search-reload-button-box'>\n          <Button id='reload-random-button' variant='primary' aria-label={formatMessage(messages.search_reload_button)} onClick={onReloadClick}>\n            <Icon icon='arrow-repeat' variant='light' />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchReload;\n","import { defineMessages, useIntl } from 'react-intl';\nimport { Dropdown, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { SearchResult } from '../../browse/store/SearchTypes';\nimport { optionallyFormatMessage } from '../../common/utility';\nimport { Course, Cuisine } from '../../recipe/store/RecipeTypes';\n\nexport interface ISearchMenuProps {\n  search:   SearchResult | undefined;\n  qs:       Record<string, string>;\n  courses:  Array<Course> | undefined;\n  cuisines: Array<Cuisine> | undefined;\n  buildUrl: (qsTitle: string, recipeSlug: string, multiSelect?: boolean) => string;\n}\n\nconst SearchMenu: React.FC<ISearchMenuProps> = ({ search, qs, courses, cuisines, buildUrl }: ISearchMenuProps) => {\n  const intl = useIntl();\n\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    filter_by_course: {\n      id: 'random.search.menu.filter_by_course_dropdown',\n      description: 'Filter by main/...',\n      defaultMessage: 'Course: {course}',\n    },\n    filter_by_cuisine: {\n      id: 'random.search.menu.filter_by_cuisine_dropdown',\n      description: 'Filter by indian/...',\n      defaultMessage: 'Cuisine: {cuisine}',\n    },\n    filter_all: {\n      id: 'random.search.menu.filter_all',\n      description: 'Item to not filter at all',\n      defaultMessage: '(All)',\n    },\n  });\n\n  const filterAllText = formatMessage(messages.filter_all);\n\n  const currentCourse = qs.course__slug ?? '';\n  const handleFilterCourseClick = (event: React.MouseEvent<HTMLAnchorElement>, filterCourse: string) => {\n    if (currentCourse === filterCourse) {\n      event.preventDefault();\n    }\n  };\n  const courseDropdownItems = courses?.map(course => ({ key: course.title, value: optionallyFormatMessage(intl, 'course.', course.title) })).sort((a, b) => a.value.localeCompare(b.value));\n  courseDropdownItems?.unshift({ key: '', value: filterAllText });\n  const courseDropdownItemsJsx = courseDropdownItems?.map(item => (\n    <Dropdown.Item key={item.key} as={Link} to={buildUrl('course__slug', item.key)} active={currentCourse === item.key} onClick={(event: React.MouseEvent<HTMLAnchorElement>) => handleFilterCourseClick(event, item.key)}>\n      {item.value}\n    </Dropdown.Item>\n  ));\n\n  const currentCuisine = qs.cuisine__slug ?? '';\n  const handleFilterCuisineClick = (event: React.MouseEvent<HTMLAnchorElement>, filterCuisine: string) => {\n    if (currentCuisine === filterCuisine) {\n      event.preventDefault();\n    }\n  };\n  const cuisineDropdownItems = cuisines?.map(cuisine => ({ key: cuisine.title, value: optionallyFormatMessage(intl, 'cuisine.', cuisine.title) })).sort((a, b) => a.value.localeCompare(b.value));\n  cuisineDropdownItems?.unshift({ key: '', value: filterAllText });\n  const cuisineDropdownItemsJsx = cuisineDropdownItems?.map(item => (\n    <Dropdown.Item key={item.key} as={Link} to={buildUrl('cuisine__slug', item.key)} active={currentCuisine === item.key} onClick={(event: React.MouseEvent<HTMLAnchorElement>) => handleFilterCuisineClick(event, item.key)}>\n      {item.value}\n    </Dropdown.Item>\n  ));\n\n  return (\n    <Row xs={1} xl='auto' className='search-menu'>\n      <Dropdown className='filter-course-dropdown'>\n        <Dropdown.Toggle variant='outline-primary' id='filter-course-button' disabled={search == null}>\n          {formatMessage(messages.filter_by_course, { course: currentCourse ? optionallyFormatMessage(intl, 'course.', currentCourse) : filterAllText })}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {courseDropdownItemsJsx}\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown className='filter-cuisine-dropdown'>\n        <Dropdown.Toggle variant='outline-primary' id='filter-cuisine-button' disabled={search == null}>\n          {formatMessage(messages.filter_by_cuisine, { cuisine: currentCuisine ? optionallyFormatMessage(intl, 'cuisine.', currentCuisine) : filterAllText })}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {cuisineDropdownItemsJsx}\n        </Dropdown.Menu>\n      </Dropdown>\n    </Row>\n  );\n};\n\nexport default SearchMenu;\n","import { Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport P from '../../common/components/P';\nimport { SearchResult } from '../../browse/store/SearchTypes';\nimport SearchMenu from './SearchMenu';\nimport { Course, Cuisine } from '../../recipe/store/RecipeTypes';\n\nexport interface IRandomHeaderProps {\n  search:   Record<string, SearchResult> | undefined;\n  courses:  Array<Course>| undefined;\n  cuisines: Array<Cuisine> | undefined;\n  qs:       Record<string, string>;\n  qsString: string;\n\n  buildUrl: (qsTitle: string, recipeSlug: string, multiSelect?: boolean) => string;\n}\n\nconst RandomHeader: React.FC<IRandomHeaderProps> = ({\n    search, courses, cuisines, qs, qsString,\n    buildUrl }: IRandomHeaderProps) => {\n  const intl = useIntl();\n\n  const { formatMessage } = intl;\n  const messages = defineMessages({\n    random_heading: {\n      id: 'random.heading',\n      description: 'Heading of the random page.',\n      defaultMessage: 'Random recipe',\n    },\n    random_text: {\n      id: 'random.heading.text',\n      description: 'Some nice text above the random search results.',\n      defaultMessage: 'Looking for an awesome meal? There are plenty waiting for you!',\n    },\n  });\n\n  const qsSearchResult = search?.[qsString];\n\n  return (\n    <Row xs={1} sm={2} className='random-header-container'>\n      <div>\n        <h2>{formatMessage(messages.random_heading)}</h2>\n        <P>{formatMessage(messages.random_text)}</P>\n      </div>\n      <SearchMenu\n          qs       = {qs}\n          search   = {qsSearchResult}\n          courses  = {courses}\n          cuisines = {cuisines}\n          buildUrl = {buildUrl}\n          />\n    </Row>\n  );\n};\n\nexport default RandomHeader;\n","import React, { useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport '../css/random.css';\n\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\nimport * as SearchActions from '../../browse/store/SearchActions';\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\n\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport DefaultFilters from '../constants/DefaultFilters';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport { CombinedStore } from '../../app/Store';\nimport { RecipeList } from '../../recipe/store/RecipeTypes';\nimport { buildSearchUrl, mergeDefaultFilters } from '../../browse/containers/BrowsePage';\nimport SearchReload from '../components/SearchReload';\nimport RandomHeader from '../components/RandomHeader';\nimport useSingle from '../../common/hooks/useSingle';\nimport SearchResults from '../../browse/containers/SearchResults';\nimport { objToSearchString } from '../../common/utility';\nimport { useSearchParams } from 'react-router-dom';\n\nconst RandomPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const [searchParams] = useSearchParams();\n\n  const search   = useSelector((state: CombinedStore) => state.browse.search.items);\n\n  const qs = Object.fromEntries(searchParams);\n  const qsMergedDefaults = mergeDefaultFilters(DefaultFilters, qs);\n  const qsMergedString = objToSearchString(qsMergedDefaults);\n\n  const fetchCourses = useCallback(() => dispatch(RecipeGroupActions.fetchCourses()) , [dispatch, RecipeGroupActions]);\n  const courses  = useSelector((state: CombinedStore) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses , courses);\n\n  const fetchCuisines = useCallback(() => dispatch(RecipeGroupActions.fetchCuisines()) , [dispatch, RecipeGroupActions]);\n  const cuisines  = useSelector((state: CombinedStore) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines , cuisines);\n\n  const reloadData = () => {\n    dispatch(SearchActions.loadRandomRecipes(qsMergedDefaults));\n  };\n\n  useEffect(() => {\n    reloadData();\n  }, [searchParams]);\n\n  const handleBuildUrl = useCallback((name: string, value: string, multiSelect = false) => (\n    buildSearchUrl('random', qs, name, value, multiSelect)\n  ), [qs]);\n\n  const handleOpenRecipe = useCallback((rec: RecipeList) => {\n    dispatch(RecipeActions.preload(rec));\n  }, [dispatch]);\n\n  return (\n    <PageWrapper title={intl.messages['nav.recipes'] as string}>\n      <RandomHeader\n          search   = {search}\n          courses  = {courses}\n          cuisines = {cuisines}\n          qs       = {qs}\n          qsString = {qsMergedString}\n          buildUrl = {handleBuildUrl}\n          />\n      <SearchResults\n          qs       = {qs}\n          qsString = {qsMergedString}\n          buildUrl = {handleBuildUrl}\n          onOpenRecipe = {handleOpenRecipe}\n          />\n      <SearchReload onReloadClick={reloadData} />\n    </PageWrapper>\n  );\n};\n\nexport default RandomPage;\n","import { handleError, request } from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, TagDto, toTag } from '../../recipe/store/RecipeTypes';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, TAGS_STORE } from './types';\nimport { toBasicAction } from '../../common/store/redux';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map((courseDto: CourseDto) => toCourse(courseDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map((cuisineDto: CuisineDto) => toCuisine(cuisineDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map((tagDto: TagDto) => toTag(tagDto)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["useSingle","getFunction","obj","useEffect","limit","onReloadClick","formatMessage","useIntl","messages","defineMessages","search_nothing_found_yet_heading","id","description","defaultMessage","search_nothing_found_yet","search_reload_button","className","P","Button","variant","onClick","Icon","icon","search","qs","courses","cuisines","buildUrl","intl","filter_by_course","filter_by_cuisine","filter_all","filterAllText","currentCourse","course__slug","courseDropdownItems","map","course","key","title","value","optionallyFormatMessage","sort","a","b","localeCompare","unshift","courseDropdownItemsJsx","item","Dropdown","as","Link","to","active","event","filterCourse","preventDefault","handleFilterCourseClick","currentCuisine","cuisine__slug","cuisineDropdownItems","cuisine","cuisineDropdownItemsJsx","filterCuisine","handleFilterCuisineClick","Row","xs","xl","disabled","qsString","random_heading","random_text","qsSearchResult","sm","dispatch","useDispatch","useSearchParams","searchParams","useSelector","state","browse","items","Object","fromEntries","qsMergedDefaults","mergeDefaultFilters","DefaultFilters","qsMergedString","objToSearchString","fetchCourses","useCallback","RecipeGroupActions","recipeGroups","fetchCuisines","reloadData","SearchActions","handleBuildUrl","name","multiSelect","buildSearchUrl","handleOpenRecipe","rec","RecipeActions","PageWrapper","SearchResults","onOpenRecipe","toBasicAction","COURSES_STORE","ACTION","request","get","serverURLs","then","res","payload","body","results","filter","courseDto","toCourse","catch","err","handleError","CUISINES_STORE","cuisineDto","toCuisine","fetchTags","TAGS_STORE","tagDto","toTag"],"sourceRoot":""}