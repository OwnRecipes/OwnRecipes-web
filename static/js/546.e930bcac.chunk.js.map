{"version":3,"file":"static/js/546.e930bcac.chunk.js","mappings":"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","sources":["header/components/ThemeDialog.tsx","../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { ListGroup } from 'react-bootstrap';\n\nimport Modal from '../../common/components/Modal';\nimport { Settings, ThemeMode } from '../../account/store/settings/types';\n\nconst messages = defineMessages({\n  theme_modal_title: {\n    id: 'nav.accountmenu.theme_modal_title',\n    description: 'Change theme mode dialog title',\n    defaultMessage: 'Choose theme',\n  },\n  theme_mode_dark: {\n    id: 'theme.mode.dark',\n    description: 'Dark mode',\n    defaultMessage: 'Dark',\n  },\n  theme_mode_light: {\n    id: 'theme.mode.light',\n    description: 'Light mode',\n    defaultMessage: 'Light',\n  },\n});\n\nexport interface IThemeDialogProps {\n  show:  boolean;\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nexport const ThemeDialog: React.FC<IThemeDialogProps> = ({\n    show, settings, onChangeTheme, onClose }: IThemeDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal\n        show = {show}\n        title = {formatMessage(messages.theme_modal_title)}\n        onClose = {onClose}\n        size = 'sm'\n        noCloseButton>\n      <ThemeDialogContent\n          settings = {settings}\n          onChangeTheme = {onChangeTheme}\n          onClose = {onClose} />\n    </Modal>\n  );\n};\n\ninterface IThemeDialogContentProps {\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nconst ThemeDialogContent: React.FC<IThemeDialogContentProps> = ({\n    settings, onChangeTheme, onClose }: IThemeDialogContentProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChangeTheme = useCallback((theme: ThemeMode) => {\n    if (settings.themeMode !== theme) {\n      onChangeTheme(theme);\n    }\n    onClose();\n  }, [onChangeTheme, onClose, settings.themeMode]);\n\n  const themeButtons = Object.values(ThemeMode).map(t => (\n    <ListGroup.Item key={t} role='listitem' action active={settings.themeMode === t} aria-current={settings.themeMode === t} onClick={() => handleChangeTheme(t)}>{formatMessage(messages[`theme_mode_${t}`])}</ListGroup.Item>\n  ));\n\n  return (\n    <ListGroup as='ol' role='list'>\n      {themeButtons}\n    </ListGroup>\n  );\n};\n\nexport default ThemeDialog;\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport warning from 'warning';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroupItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  disabled,\n  eventKey,\n  className,\n  variant,\n  action,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    ...props\n  });\n  const handleClick = useEventCallback(event => {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n    navItemProps.onClick(event);\n  });\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  }\n\n  // eslint-disable-next-line no-nested-ternary\n  const Component = as || (action ? props.href ? 'a' : 'button' : 'div');\n  process.env.NODE_ENV !== \"production\" ? warning(as || !(!action && props.href), '`action=false` and `href` should not be used together.') : void 0;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    ...navItemProps,\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)\n  });\n});\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport BaseNav from '@restart/ui/Nav';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ListGroupItem from './ListGroupItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    className,\n    bsPrefix: initialBsPrefix,\n    variant,\n    horizontal,\n    numbered,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as = 'div',\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  let horizontalVariant;\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : `horizontal-${horizontal}`;\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/_jsx(BaseNav, {\n    ref: ref,\n    ...controlledProps,\n    as: as,\n    className: classNames(className, bsPrefix, variant && `${bsPrefix}-${variant}`, horizontalVariant && `${bsPrefix}-${horizontalVariant}`, numbered && `${bsPrefix}-numbered`)\n  });\n});\nListGroup.displayName = 'ListGroup';\nexport default Object.assign(ListGroup, {\n  Item: ListGroupItem\n});"],"names":["messages","defineMessages","theme_modal_title","id","description","defaultMessage","theme_mode_dark","theme_mode_light","ThemeDialog","_ref","show","settings","onChangeTheme","onClose","formatMessage","useIntl","_jsx","Modal","title","size","noCloseButton","children","ThemeDialogContent","_ref2","handleChangeTheme","useCallback","theme","themeMode","themeButtons","Object","values","ThemeMode","map","t","ListGroup","Item","role","action","active","onClick","as","ListGroupItem","React","ref","bsPrefix","disabled","eventKey","className","variant","props","useBootstrapPrefix","navItemProps","meta","useNavItem","key","makeEventKey","href","handleClick","useEventCallback","event","preventDefault","stopPropagation","undefined","tabIndex","Component","classNames","isActive","displayName","initialBsPrefix","horizontal","numbered","controlledProps","useUncontrolled","activeKey","horizontalVariant","BaseNav","assign"],"sourceRoot":""}