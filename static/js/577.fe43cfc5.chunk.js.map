{"version":3,"file":"static/js/577.fe43cfc5.chunk.js","mappings":"qMAsCA,UA9BqB,WACnB,IAAQA,GAAkBC,EAAAA,EAAAA,KAAlBD,cAEFE,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,UAAW,CACTC,GAAI,YACJC,YAAa,iBACbC,eAAgB,aAElBC,OAAQ,CACNH,GAAI,aACJC,YAAa,aACbC,eAAgB,kBAElBE,QAAS,CACPJ,GAAI,cACJC,YAAa,cACbC,eAAgB,iDAIpB,OACE,UAAC,IAAD,CAAaG,MAAOV,EAAcE,EAASE,WAA3C,WACE,wBAAKJ,EAAcE,EAASM,WAC5B,gBAAKG,UAAU,iBAAiBC,KAAKC,EAAAA,EAAAA,IAAgB,mBAAoBC,IAAI,SAC7E,SAAC,IAAD,UAAId,EAAcE,EAASO,aAGhC,C,gGCJD,SAASM,EAAoBC,GAAuB,IAAD,IAC3CC,EAAkBD,EAAKE,WAAL,WAAgBC,EAAAA,EAAAA,IAAO,qBAAvB,QAAwC,IAAMH,EAAKI,WAAU,WAACD,EAAAA,EAAAA,IAAO,qBAAR,QAAyB,IAAIE,QAAUL,EACtHM,EAAkBL,EAAWC,WAAW,KACxCK,EAAkBN,EAAWO,SAAS,KAG5C,OAFwBP,EAAWG,UAAUE,EAAkB,EAAI,EAAGC,EAAgBN,EAAWI,OAAS,OAAII,EAG/G,CAkCD,IA7BkD,SAAC,GAAuD,IAArDf,EAAoD,EAApDA,MAAOL,EAA6C,EAA7CA,GAAIqB,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAC/DC,GAAMC,EAAAA,EAAAA,MACNC,GAAWC,EAAAA,EAAAA,MACXC,EAAK,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAOO,KAAKD,MAEpBE,GAAuBC,EAAAA,EAAAA,YAAWC,EAAAA,GAexC,OAbAC,EAAAA,EAAAA,YAAU,WAERC,SAAS5B,MAAT,UAA8B,MAATA,GAAiBA,EAAMW,OAAS,EAAhC,UAAuCX,EAAvC,OAAoD,GAAzE,aACD,GAAE,CAACA,KAEJ2B,EAAAA,EAAAA,YAAU,WACR,GAAIL,GAAe,MAAN3B,EAAY,CACvB,IAAMkC,GAAIC,EAAAA,EAAAA,IAAa,aAEvBZ,EAAIW,EACL,CACF,GAAE,CAAClC,EAAI2B,KAGN,SAAC,IAAD,CAAWrB,UAAWI,EAAoBe,EAASW,UAAWC,MAAO,CAAEC,UAAU,GAAD,OAAKT,EAAqBU,cAA1B,OAAhF,UACE,SAAC,IAAD,CAAeC,SAAO,EAACC,YAAU,EAAjC,SACGnB,KAIR,C","sources":["app/components/NotFoundPage.tsx","common/components/PageWrapper.tsx"],"sourcesContent":["import { defineMessages, useIntl } from 'react-intl';\n\nimport '../css/404.css';\n\nimport P from '../../common/components/P';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport { getResourcePath } from '../../common/utility';\n\nconst NotFoundPage = () => {\n  const { formatMessage } = useIntl();\n\n  const messages = defineMessages({\n    not_found: {\n      id: '404.title',\n      description: '404 site title',\n      defaultMessage: 'Not Found',\n    },\n    header: {\n      id: '404.header',\n      description: '404 Header',\n      defaultMessage: 'Site not found',\n    },\n    message: {\n      id: '404.message',\n      description: '404 Message',\n      defaultMessage: 'The page you\\'re looking for does not exist.',\n    },\n  });\n\n  return (\n    <PageWrapper title={formatMessage(messages.not_found)}>\n      <h1>{formatMessage(messages.header)}</h1>\n      <img className='img-responsive' src={getResourcePath('/images/404.png')} alt='404' />\n      <P>{formatMessage(messages.message)}</P>\n    </PageWrapper>\n  );\n};\n\nexport default NotFoundPage;\n","import { useContext, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router';\n\nimport { AnyComponent } from '../../types/Types';\nimport DynamicHeightContext from '../context/DynamicHeightContext';\nimport ArrayReducerType from '../store/ArrayReducerType';\nimport ItemReducerType from '../store/ItemReducerType';\nimport { getEnv, getRoutePath } from '../utility';\nimport ErrorBoundary from './ErrorBoundary';\n\n/** {@link PageTitleFixer} Props. */\ninterface IPageWrapperProps {\n  /** Page title. */\n  title?:   string;\n  id?:      string;\n  state?:   ItemReducerType<unknown> | ArrayReducerType<unknown>;\n  /** Page component to render. */\n  children: AnyComponent;\n}\n\n/**\n * Strips slashes etc. of the path.\n *\n * Example:\n * location.pathname = /browse/\n * toCleanLocationPath = browse\n *\n * @param path - location.pathname\n *\n * @return Nice path without gibberish.\n */\nfunction toCleanLocationPath(path: string): string {\n  const pathNoHost      = path.startsWith(getEnv('PUBLIC_URL') ?? '') ? path.substring((getEnv('PUBLIC_URL') ?? '').length) : path;\n  const startsWithSlash = pathNoHost.startsWith('/');\n  const endsWithSlash   = pathNoHost.endsWith('/');\n  const pathNoSlashes   = pathNoHost.substring(startsWithSlash ? 1 : 0, endsWithSlash ? pathNoHost.length - 1 : undefined);\n\n  return pathNoSlashes;\n}\n\n/**\n * HOC to properly set the browser title to assure accessibilty.\n */\n const PageWrapper: React.FC<IPageWrapperProps> = ({ title, id, state, children }: IPageWrapperProps) => {\n  const nav = useNavigate();\n  const location = useLocation();\n  const error = state?.meta.error;\n\n  const dynamicHeightContext = useContext(DynamicHeightContext);\n\n  useEffect(() => {\n    // ARIA: Titles should contain the application name and page title.\n    document.title = (`${title != null && title.length > 0 ? `${title} | ` : ''}OwnRecipes`);\n  }, [title]);\n\n  useEffect(() => {\n    if (error && id == null) {\n      const p = getRoutePath('/NotFound');\n      // console.log(`[PageWrapper] nav to \"${p}\"`);\n      nav(p);\n    }\n  }, [id, error]);\n\n  return (\n    <Container className={toCleanLocationPath(location.pathname)} style={{ marginTop: `${dynamicHeightContext.toolbarHeight}px` }}>\n      <ErrorBoundary verbose printStack>\n        {children}\n      </ErrorBoundary>\n    </Container>\n  );\n};\n\nexport default PageWrapper;\n"],"names":["formatMessage","useIntl","messages","defineMessages","not_found","id","description","defaultMessage","header","message","title","className","src","getResourcePath","alt","toCleanLocationPath","path","pathNoHost","startsWith","getEnv","substring","length","startsWithSlash","endsWithSlash","endsWith","undefined","state","children","nav","useNavigate","location","useLocation","error","meta","dynamicHeightContext","useContext","DynamicHeightContext","useEffect","document","p","getRoutePath","pathname","style","marginTop","toolbarHeight","verbose","printStack"],"sourceRoot":""}