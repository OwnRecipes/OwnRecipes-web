{"version":3,"file":"static/js/934.e0616c25.chunk.js","mappings":"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","sources":["common/components/Button.tsx","common/components/Input/Select.tsx","header/components/SettingsDialog.tsx","../node_modules/react-bootstrap/esm/CardBody.js","../node_modules/react-bootstrap/esm/CardFooter.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardImgOverlay.js","../node_modules/react-bootstrap/esm/CardLink.js","../node_modules/react-bootstrap/esm/CardSubtitle.js","../node_modules/react-bootstrap/esm/CardText.js","../node_modules/react-bootstrap/esm/CardTitle.js","../node_modules/react-bootstrap/esm/Card.js"],"sourcesContent":["import { forwardRef } from 'react';\nimport { Button as BootstrapButton } from 'react-bootstrap';\nimport { Placement } from 'react-bootstrap/esm/types';\n\nimport '../css/button.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport ConditionalWrapper from './ConditionalWrapper';\nimport Tooltip from './Tooltip';\n\nexport interface IButtonProps extends CommonProps {\n  id:         string;\n  type?:      'button' | 'reset' | 'submit';\n  variant?:   'primary' | 'secondary' | 'danger' | 'outline-primary' | 'outline-secondary' | 'outline-danger' | 'transparent';\n  size?:      'sm' | 'lg';\n  disabled?:  boolean;\n  onClick?:   (event: React.MouseEvent<HTMLButtonElement>) => void;\n\n  tooltip?:   string;\n  tooltipPlacement?: Placement;\n\n  children:   React.ReactNode;\n}\n\nconst Button = forwardRef<HTMLButtonElement, IButtonProps>(({\n  id,\n  tooltip, tooltipPlacement,\n  children, ...rest }: IButtonProps, ref) => (\n    <ConditionalWrapper\n        condition = {Boolean(tooltip)}\n        render = {childr => <Tooltip id={`${id}-tooltip`} tooltip={tooltip} placement={tooltipPlacement}>{childr}</Tooltip>}>\n      <BootstrapButton id={id} aria-label={tooltip || undefined} aria-describedby={undefined} {...rest} ref={ref}>\n        {children}\n      </BootstrapButton>\n    </ConditionalWrapper>\n));\n\nexport default Button;\n","import { createRef } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { defineMessages, injectIntl, WrappedComponentProps } from 'react-intl';\nimport SelectReact, { MultiValue, SingleValue } from 'react-select';\nimport CreatableSelectReact from 'react-select/creatable';\nimport AsyncReact from 'react-select/async';\n\nimport '../../css/select.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Tooltip from '../Tooltip';\n\nconst selectCommonMessages = defineMessages({\n  no_options: {\n    id: 'select.no_options',\n    description: 'Info text when opening a select dropdown with no options.',\n    defaultMessage: 'No options',\n  },\n});\n\nexport interface SelectDataType {\n  value: string;\n  label: string;\n}\n\nexport interface ISelectProps extends IBaseInputComponentProps {\n  value?: string;\n  data?:  Array<SelectDataType>;\n\n  onChange?: (name: string, newValue: string | undefined) => void;\n}\nexport interface ISelectMultiProps extends IBaseInputComponentProps {\n  value?: Array<string>;\n  data?:  Array<SelectDataType>;\n  isMulti: true;\n\n  onChange?: (name: string, newValue: Array<string>) => void;\n}\nexport const isMultiSelect = (props: unknown): props is ISelectMultiProps => (props as ISelectMultiProps).isMulti === true;\n\nfunction findSelectedOptions(options: Array<SelectDataType>, value: Array<string> | string | undefined): Array<SelectDataType> | SelectDataType {\n  if (Array.isArray(value)) {\n    return options.filter(o => value.includes(o.value));\n  } else {\n    return options.find(o => o.value === value) ?? '' as unknown as SelectDataType;\n  }\n}\n\nexport class SelectBase extends BaseInputComponent<(ISelectProps | ISelectMultiProps) & WrappedComponentProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType> | MultiValue<SelectDataType>) => {\n    if (isMultiSelect(this.props)) {\n      this.props.onChange?.(this.props.name, (data as MultiValue<SelectDataType>).map(d => d.value));\n    } else {\n      this.props.onChange?.(this.props.name, (data as SingleValue<SelectDataType>)?.value);\n    }\n  };\n\n  render() {\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const dataOptions = data ?? [];\n    const selectedOptions = findSelectedOptions(dataOptions, value);\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <SelectReact\n              inputId     = {`${name}-input`}\n              name        = {name}\n              value       = {selectedOptions}\n              options     = {data}\n              noOptionsMessage={() => this.props.intl.formatMessage(selectCommonMessages.no_options)}\n\n              isDisabled  = {readOnly || disabled}\n\n              onChange    = {this.handleChange}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport const Select = injectIntl(SelectBase, { forwardRef: true });\n\nexport interface IAsyncSelectProps extends Omit<ISelectProps, 'data'> {\n  initialValueLabel?: string;\n  loadOptions: (searchTerm: string) => Promise<Array<SelectDataType>>;\n}\n\ninterface IAsyncSelectState {\n  data: Array<SelectDataType> | undefined;\n}\n\nexport class AsyncSelectBase extends BaseInputComponent<IAsyncSelectProps & WrappedComponentProps, IAsyncSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: IAsyncSelectProps & WrappedComponentProps) {\n    super(props);\n\n    this.state = {\n      data: undefined,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: SingleValue<SelectDataType>) => {\n    this.props.onChange?.(this.props.name, data?.value);\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleLoadOptions = (searchTerm: string, callback: any) => {\n    if (!searchTerm) return callback([]);\n    return this.props.loadOptions(searchTerm).then(res => {\n      this.setState({ data: res });\n      return res;\n    });\n  };\n\n  render() {\n    const { onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, value, initialValueLabel, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, loadOptions, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    let selectedOption = this.state.data?.find(o => o.value === value);\n    if (value && initialValueLabel && this.state.data == null) {\n      selectedOption = { value: value, label: initialValueLabel };\n    }\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <AsyncReact\n              inputId     = {`${name}-input`}\n              name        = {name}\n              value       = {selectedOption}\n              loadOptions = {this.handleLoadOptions}\n\n              isDisabled  = {readOnly || disabled}\n\n              onChange    = {this.handleChange}\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              placeholder = ''\n              noOptionsMessage={() => this.props.intl.formatMessage(selectCommonMessages.no_options)}\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport const AsyncSelect = injectIntl(AsyncSelectBase, { forwardRef: true });\n\nexport interface ICreatableSelectValues extends IBaseInputComponentProps {\n  value?:   Array<string> | string;\n  data?:    Array<SelectDataType>;\n  isMulti?: boolean;\n}\ninterface ICreatableSelectProps extends ICreatableSelectValues {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onChange?: (name: string, newValue: any | undefined) => void;\n}\n\ninterface ICreatableSelectState {\n  options: Array<SelectDataType>;\n}\n\nconst isValidNewOption = (value: string): boolean => !!value;\n\nexport class CreatableSelect extends BaseInputComponent<ICreatableSelectProps, ICreatableSelectState> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  constructor(props: ICreatableSelectProps) {\n    super(props);\n\n    this.state = {\n      options: [],\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: ICreatableSelectProps, state: ICreatableSelectState) {\n    if (nextProps.data == null || nextProps.data.length === 0 || state.options.length === 0) return state;\n    const dataIdents = nextProps.data.map(d => d.value);\n    const nextOptions = [...state.options];\n\n    for (let index = nextOptions.length - 1; index >= 0; --index) {\n      if (dataIdents.includes(nextOptions[index].value)) {\n        nextOptions.splice(index, 1);\n      }\n    }\n\n    if (state.options.length === nextOptions.length) return state;\n\n    return {\n      ...state,\n      options: nextOptions,\n    };\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (data: MultiValue<SelectDataType> | SingleValue<SelectDataType>) => {\n    if (this.props.onChange) {\n      const val = data != null && Array.isArray(data) ? data.map(dat => dat.value) : (data as SingleValue<SelectDataType>)?.value;\n      this.props.onChange(\n        this.props.name,\n        val\n      );\n    }\n  };\n\n  handleCreate = (inputValue: string) => {\n    const newOption: SelectDataType = { value: inputValue, label: inputValue };\n    this.setState(prev => (\n        {\n          options: [...prev.options, newOption],\n        }\n      ),\n      () => {\n        if (!this.props.isMulti) {\n          this.handleChange(newOption);\n        } else {\n          const dataOptions = this.props.data ?? [];\n          const options = dataOptions.concat(this.state.options);\n          const selectedOptions = findSelectedOptions(options, [...(this.props.value as Array<string> | undefined ?? []), inputValue]);\n          this.handleChange(selectedOptions);\n        }\n      });\n  };\n\n  render() {\n    // console.log(`[Select] name=${this.props.name}, value=${JSON.stringify(this.props.value)}`);\n\n    const { value, data, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    const dataOptions = data ?? [];\n    const options = dataOptions.concat(this.state.options);\n    const selectedOptions = findSelectedOptions(options, value);\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel({ htmlFor: `${name}-input` })}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <CreatableSelectReact\n              inputId = {`${name}-input`}\n              onChange = {this.handleChange}\n              isValidNewOption = {isValidNewOption}\n              onCreateOption = {this.handleCreate}\n              isClearable\n              value = {selectedOptions}\n              isDisabled  = {readOnly || disabled}\n\n              className = 'react-select-container'\n              classNamePrefix = 'creatable-select'\n              options = {options}\n              placeholder = ''\n\n              {...rest}\n              ref = {this.ref} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","import { useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nimport '../css/settings.css';\n\nimport { RootState } from '../../app/Store';\nimport { Settings, ThemeMode } from '../../account/store/settings/types';\nimport * as SettingsActions from '../../account/store/settings/actions';\nimport Modal from '../../common/components/Modal';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { getMessagesFromLang, LanguageCode } from '../../common/language';\nimport { Select } from '../../common/components/Input/Select';\nimport classNames from 'classnames';\nimport Button from '../../common/components/Button';\nimport Checkbox from '../../common/components/Input/Checkbox';\nimport { getEnv, getEnvAsBoolean, getResourcePath } from '../../common/utility';\n\nconst languageMessages = defineMessages({\n  language_settings: {\n    id: 'settings.language.heading',\n    description: 'Group heading for language settings',\n    defaultMessage: 'Language',\n  },\n  display_language: {\n    id: 'settings.language.display',\n    description: 'Display language setting',\n    defaultMessage: 'Display language',\n  },\n});\n\nconst miscMessages = defineMessages({\n  misc_settings: {\n    id: 'settings.miscellaneous.heading',\n    description: 'Group heading for miscellaneous settings',\n    defaultMessage: 'Miscellaneous',\n  },\n  recipe_discovery: {\n    id: 'settings.miscellaneous.recipe_discovery',\n    description: 'Disable recipe discovery checkbox',\n    defaultMessage: 'Recipe discovery',\n  },\n  recipe_discovery_tooltip: {\n    id: 'settings.miscellaneous.recipe_discovery_tooltip',\n    description: 'Disable recipe discovery checkbox tooltip',\n    defaultMessage: 'If unchecked, the homepage and recipe page won\\'t display recipe suggestions.',\n  },\n});\n\nconst themeMessages = defineMessages({\n  theme_settings: {\n    id: 'settings.theme.heading',\n    description: 'Group heading for theme settings',\n    defaultMessage: 'Theme mode',\n  },\n  theme_mode_dark: {\n    id: 'theme.mode.dark',\n    description: 'Dark mode',\n    defaultMessage: 'Dark',\n  },\n  theme_mode_light: {\n    id: 'theme.mode.light',\n    description: 'Light mode',\n    defaultMessage: 'Light',\n  },\n});\n\nexport interface ISettingsDialogProps {\n  show:  boolean;\n  onClose: () => void;\n}\n\nexport const SettingsDialog: React.FC<ISettingsDialogProps> = ({\n    show, onClose }: ISettingsDialogProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const settings = useSelector((state: RootState) => state.settings);\n\n  const handleChangeDisableRecipeRecovery = useCallback((b: boolean) => {\n    dispatch(SettingsActions.changeDisableRecipeDiscovery(b));\n  }, []);\n\n  const handleChangeLanguage = useCallback((language: LanguageCode) => {\n    dispatch(SettingsActions.changeLanguage(language));\n  }, []);\n\n  const handleChangeTheme = useCallback((mode: ThemeMode) => {\n    dispatch(SettingsActions.changeThemeMode(mode));\n  }, []);\n\n  return (\n    <Modal\n        show = {show}\n        title = {intl.messages['nav.accountmenu.settings'] as string}\n        onClose = {onClose}\n        size = 'sm'\n        className = 'settings'\n        noCloseButton>\n      <ThemeSettings\n          settings = {settings}\n          onChangeTheme = {handleChangeTheme} />\n      <LanguageSettings\n          settings = {settings}\n          onChangeLanguage = {handleChangeLanguage} />\n      <MiscSettings\n          settings = {settings}\n          onChangeDisableRecipeDiscovery = {handleChangeDisableRecipeRecovery} />\n    </Modal>\n  );\n};\n\ninterface ILanguageSettingsProps {\n  settings: Settings;\n  onChangeLanguage: (lang: LanguageCode) => void;\n}\n\nconst LanguageSettings: React.FC<ILanguageSettingsProps> = ({\n    settings, onChangeLanguage }: ILanguageSettingsProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChangeLanguage = useCallback((lang: LanguageCode) => {\n    if (settings.language !== lang) {\n      onChangeLanguage(lang);\n    }\n  }, [onChangeLanguage, settings.language]);\n\n  const data = Object.values(LanguageCode).map(l => ({ value: l, label: getMessagesFromLang(l)['1.display_name'] }));\n\n  return (\n    <fieldset>\n      <legend>{formatMessage(languageMessages.language_settings)}</legend>\n      <Select\n          name     = 'language'\n          label    = {formatMessage(languageMessages.display_language)}\n          value    = {settings.language}\n          data     = {data}\n          onChange = {(_namee: string, value: string | undefined) => { handleChangeLanguage(value as LanguageCode); }} />\n    </fieldset>\n  );\n};\n\nfunction getThemeImage(theme: ThemeMode) {\n  return getResourcePath(theme === ThemeMode.DARK ? '/images/DarkMode.png' : '/images/LightMode.png');\n}\n\ninterface IThemeSettingsProps {\n  settings: Settings;\n  onChangeTheme: (theme: ThemeMode) => void;\n}\n\nconst ThemeSettings: React.FC<IThemeSettingsProps> = ({\n    settings, onChangeTheme }: IThemeSettingsProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChangeTheme = useCallback((theme: ThemeMode) => {\n    if (settings.themeMode !== theme) {\n      onChangeTheme(theme);\n    }\n  }, [onChangeTheme, settings.themeMode]);\n\n  const themeButtons = [ThemeMode.LIGHT, ThemeMode.DARK].map(t => (\n    <Col key={t}>\n      <Card className={classNames({ active: settings.themeMode === t })}>\n        <Button id={`settings-theme-button-${t}`} type='button' variant='transparent' aria-current={settings.themeMode === t} onClick={() => handleChangeTheme(t)}>\n          <Card.Img variant='top' src={getThemeImage(t)} />\n          <Card.Title>\n            {formatMessage(themeMessages[`theme_mode_${t}`])}\n          </Card.Title>\n        </Button>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <fieldset>\n      <legend>{formatMessage(themeMessages.theme_settings)}</legend>\n      <Row xs={2}>\n        {themeButtons}\n      </Row>\n    </fieldset>\n  );\n};\n\ninterface IMiscSettingsProps {\n  settings: Settings;\n  onChangeDisableRecipeDiscovery: (b: boolean) => void;\n}\n\nconst MiscSettings: React.FC<IMiscSettingsProps> = ({\n    settings, onChangeDisableRecipeDiscovery }: IMiscSettingsProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange = useCallback((b: boolean) => {\n    if (settings.disableRecipeDiscovery !== b) {\n      onChangeDisableRecipeDiscovery(b);\n    }\n  }, [onChangeDisableRecipeDiscovery, settings.disableRecipeDiscovery]);\n\n  const hasEnvDisableRecipeDiscovery = getEnv('REACT_APP_DISABLE_RECIPE_DISCOVERY');\n  const envDisableRecipeDiscovery = getEnvAsBoolean('REACT_APP_DISABLE_RECIPE_DISCOVERY', false);\n\n  return (\n    <fieldset>\n      <legend>{formatMessage(miscMessages.misc_settings)}</legend>\n      <Checkbox\n          name     = 'recipe_discovery'\n          label    = {formatMessage(miscMessages.recipe_discovery)}\n          tooltip  = {formatMessage(miscMessages.recipe_discovery_tooltip)}\n          value    = {(hasEnvDisableRecipeDiscovery != null && envDisableRecipeDiscovery === false) ? false : !settings.disableRecipeDiscovery}\n          readOnly = {hasEnvDisableRecipeDiscovery != null && envDisableRecipeDiscovery === false}\n          onChange = {(_namee: string, value: boolean) => { handleChange(!value); }} />\n    </fieldset>\n  );\n};\n\nexport default SettingsDialog;\n","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardBody = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-body');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardBody.displayName = 'CardBody';\nexport default CardBody;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardFooter = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-footer');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardFooter.displayName = 'CardFooter';\nexport default CardFooter;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImgOverlay = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-img-overlay');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardImgOverlay.displayName = 'CardImgOverlay';\nexport default CardImgOverlay;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardLink = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'a',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-link');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardLink.displayName = 'CardLink';\nexport default CardLink;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardSubtitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH6,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-subtitle');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardSubtitle.displayName = 'CardSubtitle';\nexport default CardSubtitle;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'p',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardText.displayName = 'CardText';\nexport default CardText;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst CardTitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH5,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-title');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardTitle.displayName = 'CardTitle';\nexport default CardTitle;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardBody from './CardBody';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardImg from './CardImg';\nimport CardImgOverlay from './CardImgOverlay';\nimport CardLink from './CardLink';\nimport CardSubtitle from './CardSubtitle';\nimport CardText from './CardText';\nimport CardTitle from './CardTitle';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});"],"names":["forwardRef","_ref","ref","id","tooltip","tooltipPlacement","children","rest","_jsx","ConditionalWrapper","condition","Boolean","render","childr","Tooltip","placement","BootstrapButton","undefined","selectCommonMessages","defineMessages","no_options","description","defaultMessage","findSelectedOptions","options","value","Array","isArray","filter","o","includes","_options$find","find","SelectBase","BaseInputComponent","constructor","arguments","createRef","handleChange","data","_this$props$onChange","_this$props","_this$props$onChange2","_this$props2","this","props","isMulti","onChange","call","name","map","d","focus","current","style","readOnly","disabled","label","className","helpText","errors","meta","selectedOptions","Form","Group","getGroupProps","getFormGroupClassNames","_jsxs","getLabel","htmlFor","getHelpText","getErrorMessage","SelectReact","inputId","noOptionsMessage","intl","formatMessage","isDisabled","classNamePrefix","placeholder","Select","injectIntl","AsyncSelectBase","super","_this$props$onChange3","_this$props3","handleLoadOptions","searchTerm","callback","loadOptions","then","res","setState","state","_this$state$data","initialValueLabel","selectedOption","AsyncReact","AsyncSelect","isValidNewOption","CreatableSelect","val","dat","handleCreate","inputValue","newOption","prev","_this$props$data","concat","getDerivedStateFromProps","nextProps","length","dataIdents","nextOptions","index","splice","CreatableSelectReact","onCreateOption","isClearable","languageMessages","language_settings","display_language","miscMessages","misc_settings","recipe_discovery","recipe_discovery_tooltip","themeMessages","theme_settings","theme_mode_dark","theme_mode_light","SettingsDialog","show","onClose","useIntl","dispatch","useDispatch","settings","useSelector","handleChangeDisableRecipeRecovery","useCallback","b","SettingsActions","handleChangeLanguage","language","handleChangeTheme","mode","Modal","title","messages","size","noCloseButton","ThemeSettings","onChangeTheme","LanguageSettings","onChangeLanguage","MiscSettings","onChangeDisableRecipeDiscovery","_ref2","lang","Object","values","LanguageCode","l","getMessagesFromLang","_namee","_ref3","theme","themeMode","themeButtons","ThemeMode","LIGHT","DARK","t","Col","Card","classNames","active","Button","type","variant","onClick","Img","src","getResourcePath","Title","Row","xs","_ref4","disableRecipeDiscovery","hasEnvDisableRecipeDiscovery","getEnv","envDisableRecipeDiscovery","getEnvAsBoolean","Checkbox","CardBody","React","bsPrefix","as","Component","useBootstrapPrefix","displayName","CardFooter","CardHeader","prefix","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","CardImg","CardImgOverlay","CardLink","DivStyledAsH6","divWithClassName","CardSubtitle","CardText","DivStyledAsH5","CardTitle","bg","text","border","body","assign","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay"],"sourceRoot":""}