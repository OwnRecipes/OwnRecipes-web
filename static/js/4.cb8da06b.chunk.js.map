{"version":3,"file":"static/js/4.cb8da06b.chunk.js","mappings":"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","sources":["account/components/SignUpInfo.tsx","account/containers/LoginPage.tsx","common/components/PageWrapper.tsx"],"sourcesContent":["import { defineMessages, useIntl } from 'react-intl';\n\nimport P from '../../common/components/P';\n\nconst messages = defineMessages({\n  sign_up_info: {\n    id: 'login.sign_up_info',\n    description: 'Info that the sign up is handled by the admin.',\n    defaultMessage: 'Not signed up, yet? OwnRecipes is a private instance. Kindly ask the administrator to sign up an account for you.',\n  },\n});\n\nconst SignUpInfo: React.FC = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <P variant='body2'>\n      {formatMessage(messages.sign_up_info)}\n    </P>\n  );\n};\n\nexport default SignUpInfo;\n","import { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Modal } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport '../../common/css/modal.css';\nimport '../css/login.css';\n\nimport * as AuthActions from '../store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport LoginForm from '../components/LoginForm';\nimport SignUpInfo from '../components/SignUpInfo';\nimport { RootState } from '../../app/Store';\nimport PageSpinner from '../../app/components/PageSpinner';\n\nconst LoginPage: React.FC = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const accountMeta = useSelector((state: RootState) => state.account.meta);\n\n  const handleLogin = useCallback(async (username: string, password: string, remember: boolean) => (\n    AuthActions.getToken(dispatch, username, password, remember)\n  ), []);\n\n  return (\n    <PageWrapper title={intl.messages['nav.login.title'] as string}>\n      <Modal.Dialog className='form-signin'>\n        <Modal.Header className='form-header'>\n          <h1>OwnRecipes</h1>\n        </Modal.Header>\n        <Modal.Body>\n          <>\n            <div className={classNames('login-form-wrapper', { autologin: accountMeta.pending === PendingState.LOADING })}>\n              <LoginForm onSubmit={handleLogin} />\n              <hr />\n              <SignUpInfo />\n            </div>\n            {accountMeta.pending === PendingState.LOADING && (\n              <PageSpinner />\n            )}\n          </>\n        </Modal.Body>\n      </Modal.Dialog>\n    </PageWrapper>\n  );\n};\n\nexport default LoginPage;\n","import { useContext, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router';\nimport classNames from 'classnames';\n\nimport { AnyComponent } from '../../types/Types';\nimport DynamicHeightContext from '../context/DynamicHeightContext';\nimport ArrayReducerType from '../store/ArrayReducerType';\nimport ItemReducerType from '../store/ItemReducerType';\nimport { getEnv, getRoutePath } from '../utility';\nimport ErrorBoundary from './ErrorBoundary';\n\n/** {@link PageTitleFixer} Props. */\ninterface IPageWrapperProps {\n  /** Page title. */\n  title?:   string;\n  id?:      string;\n  state?:   ItemReducerType<unknown> | ArrayReducerType<unknown>;\n  className?: string;\n  /** Page component to render. */\n  children: AnyComponent;\n}\n\n/**\n * Strips slashes etc. of the path.\n *\n * Example:\n * location.pathname = /browse/\n * toCleanLocationPath = browse\n *\n * @param path - location.pathname\n *\n * @return Nice path without gibberish.\n */\nfunction toCleanLocationPath(path: string): string {\n  const pathNoHost      = path.startsWith(getEnv('PUBLIC_URL') ?? '') ? path.substring((getEnv('PUBLIC_URL') ?? '').length) : path;\n  const startsWithSlash = pathNoHost.startsWith('/');\n  const endsWithSlash   = pathNoHost.endsWith('/');\n  const pathNoSlashes   = pathNoHost.substring(startsWithSlash ? 1 : 0, endsWithSlash ? pathNoHost.length - 1 : undefined);\n\n  return pathNoSlashes;\n}\n\n/**\n * HOC to properly set the browser title to assure accessibilty.\n */\n const PageWrapper: React.FC<IPageWrapperProps> = ({ title, id, state, className, children }: IPageWrapperProps) => {\n  const nav = useNavigate();\n  const location = useLocation();\n  const error = state?.meta.error;\n\n  const dynamicHeightContext = useContext(DynamicHeightContext);\n\n  useEffect(() => {\n    // ARIA: Titles should contain the application name and page title.\n    document.title = (`${title != null && title.length > 0 ? `${title} | ` : ''}OwnRecipes`);\n  }, [title]);\n\n  useEffect(() => {\n    if (error && id == null) {\n      const p = getRoutePath('/NotFound');\n      // console.log(`[PageWrapper] nav to \"${p}\"`);\n      nav(p);\n    }\n  }, [id, error]);\n\n  return (\n    <Container id='main-container' as='main' className={classNames(toCleanLocationPath(location.pathname), className)} style={{ marginTop: `${dynamicHeightContext.toolbarHeight}px` }}>\n      <ErrorBoundary verbose printStack>\n        {children}\n      </ErrorBoundary>\n    </Container>\n  );\n};\n\nexport default PageWrapper;\n"],"names":["messages","defineMessages","sign_up_info","id","description","defaultMessage","SignUpInfo","formatMessage","useIntl","_jsx","P","variant","children","LoginPage","intl","dispatch","useDispatch","accountMeta","useSelector","state","account","meta","handleLogin","useCallback","async","username","password","remember","AuthActions","PageWrapper","title","_jsxs","Modal","Dialog","className","Header","Body","_Fragment","classNames","autologin","pending","PendingState","LOADING","LoginForm","onSubmit","PageSpinner","toCleanLocationPath","path","_getEnv","_getEnv2","pathNoHost","startsWith","getEnv","substring","length","startsWithSlash","endsWithSlash","endsWith","undefined","_ref","nav","useNavigate","location","useLocation","error","dynamicHeightContext","useContext","DynamicHeightContext","useEffect","document","p","getRoutePath","Container","as","pathname","style","marginTop","toolbarHeight","ErrorBoundary","verbose","printStack"],"sourceRoot":""}