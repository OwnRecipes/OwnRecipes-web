{"version":3,"file":"static/js/611.ed5fddec.chunk.js","mappings":"gNAUA,MAAMA,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,kBAAmB,CACjBC,GAAI,oBACJC,YAAa,qCACbC,eAAgB,gCA0BpB,GAlBmBC,EAAAA,EAAAA,aAAgD,CAAAC,EAAoDC,KAAS,IAA5D,QAAEC,EAAO,UAAEC,KAAcC,GAAwBJ,EACnH,MAAM,cAAEK,IAAkBC,EAAAA,EAAAA,KAE1B,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACDR,UAAaS,IAAW,aAAcT,GACtCU,GAAM,IAAIX,IACVY,MAAST,EAAcZ,EAASE,sBAC5BS,EACJH,IAAOA,EAAIQ,SAAC,UAGhBC,EAAAA,EAAAA,KAACK,EAAAA,EAAY,CAACC,cAAed,MAC5B,G,yDCxBP,MAwBA,GAxBcH,EAAAA,EAAAA,aAA0C,CAAAC,EACIC,KAAS,IADZ,IACrDgB,EAAG,YAAEC,EAAW,IAAEC,EAAG,QAAEC,KAAYhB,GAAmBJ,EACxD,MAAOqB,EAAUC,IAAYC,EAAAA,EAAAA,WAAkB,IAE/CC,EAAAA,EAAAA,YAAU,KACRF,GAAS,EAAM,GACd,CAACL,IAEJ,MAAMQ,GAAcC,EAAAA,EAAAA,cAAY,KAC9BJ,GAAS,GACF,OAAPF,QAAO,IAAPA,GAAAA,GAAW,GACV,CAACA,IAEJ,OACEV,EAAAA,EAAAA,KAAA,OACIO,IAAOI,EAAWH,EAAcD,EAChCE,IAAOA,EACPC,QAAWK,KAEPrB,EACJH,IAAOA,GAAO,G,+FCftB,MAqCA,GArCiBF,EAAAA,EAAAA,aAAuC,CAAAC,EAGEC,KAAS,IAHV,KACrD0B,EAAI,SAAEC,EAAQ,OAAEC,EAAM,MAAEC,EAAK,UAC7BC,EAAS,OAAEC,EAAM,QAAEC,EAAO,SAC1BC,EAAQ,QAAEC,EAAO,OAAEC,KAAWhC,GAAsBJ,EACtD,MAAMqC,GAAO/B,EAAAA,EAAAA,KAEPgC,GAAcZ,EAAAA,EAAAA,cAAaa,GAClB,MAATA,EACKN,EAAU,QAAKO,EAEN,OAATT,QAAS,IAATA,OAAS,EAATA,EAAYQ,IAEpB,CAACR,EAAWE,IAEf,OACEvB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACd,KAAMA,EAAMe,SAAUd,EAAWe,EAAAA,QAAoBH,EAAWI,eAAgB,GAAIf,OAAQA,EAAQC,MAAOA,EAAMrB,SACrHoC,IACCnC,EAAAA,EAAAA,KAACoC,EAAAA,GAAM,IACC1C,EACJwB,SAAYA,EAGZK,QAAYA,EAEZN,KAAYkB,EAAOE,MAAMpB,KACzBY,MAAYD,EAAYO,EAAOE,MAAMR,OACrCS,QAAYC,EAAAA,EAAAA,IAAiBZ,EAAMQ,EAAOK,KAAKC,QAAWN,EAAOK,KAAKE,0BAAiDZ,EAA1BK,EAAOK,KAAKG,cACzGH,KAAYL,EAAOK,KACnBhB,SAAYA,CAACoB,EAAef,KAAgCM,EAAOE,MAAMb,SAAe,OAANF,QAAM,IAANA,OAAM,EAANA,EAASO,IAAiB,OAARL,QAAQ,IAARA,GAAAA,EAAWoB,EAAa,OAANtB,QAAM,IAANA,OAAM,EAANA,EAASO,GAAO,EACtIJ,QAAaoB,IAAoDV,EAAOE,MAAMZ,QAAQoB,GAAe,OAAPpB,QAAO,IAAPA,GAAAA,EAAUoB,EAAM,EAC9GnB,OAAamB,IAAoDV,EAAOE,MAAMX,OAAOmB,GAAe,OAANnB,QAAM,IAANA,GAAAA,EAASmB,EAAM,EAC7GtD,IAAOA,KAEP,G,4ECtCZ,MAiBA,GAjByBF,EAAAA,EAAAA,aAAmD,CAAAC,EAErBC,KAAG,IAFmB,OAC3EuD,EAAM,MAAEC,EAAK,SAAEhD,EAAQ,UACvBN,EAAS,MAAEuD,KAAUtD,GAA8BJ,EAAA,OACjDU,EAAAA,EAAAA,KAAA,OACIgD,MAAS,CACPC,WAAY,GAAGH,KACfC,MAAY,GAAGA,KACfG,SAAY,cACTF,GAELvD,UAAWS,IAAW,qBAAsBT,MACxCC,EACJH,IAAOA,EAAIQ,SACZA,GACG,G,gDCxBK,SAASoD,EAAUC,EAAyBC,IACzDvC,EAAAA,EAAAA,YAAU,KACG,MAAPuC,GACFD,GACF,GACC,CAACA,EAAaC,GACnB,C,mHCyBA,SAASC,EAAeC,EAAmCC,EAAiBC,EAA2BC,GACrG,GAA0B,IAAtBD,EAAWE,OAAc,OAE7B,MAAMC,EAbR,SAA+BJ,EAAiBE,GAC9C,MAAMG,EAAUH,EAAsBI,WAAUF,GAAMA,EAAGxD,QAAUoD,IACnE,GAAIK,GAAW,EAEb,OADYH,EAAsBK,OAAOF,EAAS,GACvC,EAIf,CAKaG,CAAsBR,EAASE,GAE1CH,EAAOU,KAAK,CACVT,QAAaA,EACbC,WAAaA,EACbS,YAAaN,EAAK,CAACA,QAAM9B,GAE7B,CA8FA,MAWA,EAX+CxC,IAAsE,IAAnEmE,WAAYU,EAAgB,YAAED,GAA+B5E,EAC7G,MAAM8E,GAA6CC,EAAAA,EAAAA,UAAQ,IA5E7D,SAAyBF,EAA0BD,GACjD,MAAMR,EAAwB,IAAIQ,GAC5BI,EAAcH,EAAiBI,SAAS,MAExCC,EAA8C,GACpD,IAAIf,EAA4B,GAC5BgB,EAAc,GAoBlB,OAlBIH,GACFH,EAAiBO,MAAM,MAAMC,QAAOC,GAAQA,EAAKjB,OAAS,IAAGkB,KAAID,GAAQA,EAAKE,YAAWC,SAAQC,IAC3FA,EAAUC,SAAS,MACrB3B,EAAekB,EAAkBC,EAAahB,EAAYC,GAC1De,EAAcO,EAAUE,UAAU,EAAGF,EAAUrB,OAAS,GACxDF,EAAa,IAEbA,EAAWQ,KAAKe,EAClB,IAGF1B,EAAekB,EAAkBC,EAAahB,EAAYC,IAE1DJ,EAAekB,EAAkB,GAAI,CAACL,GAAmBT,GAtC7D,SAAoCH,EAAmCG,GACrE,GAAqC,IAAjCA,EAAsBC,OAAc,OAExC,MAAMwB,EAAe5B,EAAO6B,MAAKC,IAAOA,EAAG7B,UACvC2B,EACEA,EAAajB,YACfiB,EAAajB,YAAYD,QAAQP,GAEjCyB,EAAajB,YAAc,IAAIR,GAGjCH,EAAO+B,QAAQ,CAAE7B,WAAY,GAAIS,YAAa,IAAIR,KAGpDA,EAAsBK,OAAO,EAAGL,EAAsBC,OACxD,CA0BE4B,CAA2Bf,EAAkBd,GAEtCc,CACT,CAiDmEgB,CAAgBrB,EAAkBD,IAAc,CAACC,EAAkBD,IAC9HuB,GAA8CpB,EAAAA,EAAAA,UAAQ,KAAMqB,OAhD1CjC,EAgD2DW,GA9ChFO,QAAOU,GAAMA,EAAG5B,WAAWE,OAAS,GAAwB,MAAlB0B,EAAGnB,aAAuBmB,EAAGnB,YAAYP,OAAS,IAC5FkB,KAAIQ,IAAO,IAADM,EACT,IAAIC,EACyB,IAAzBP,EAAG5B,WAAWE,OAChBiC,GACE5F,EAAAA,EAAAA,KAAA,OAAKP,UAAU,YAAWM,SACvBsF,EAAG5B,WAAW,KAGV4B,EAAG5B,WAAWE,OAAS,IAChCiC,GACE5F,EAAAA,EAAAA,KAAA,MAAIP,UAAU,aAAYM,SACvBsF,EAAG5B,WAAWoB,KAAIG,IACjBhF,EAAAA,EAAAA,KAAA,MAAIP,UAAU,YAAWM,SACtBiF,GAD4BA,QAQvC,MAAMa,GAAkBR,EAAG7B,QACrBsC,GAAcC,EAAAA,EAAAA,IAAkB,QAAXJ,EAACN,EAAG7B,eAAO,IAAAmC,EAAAA,EAAI,IAE1C,OACE9F,EAAAA,EAAAA,MAAA,OAAuBJ,UAAWS,IAAW,WAAY4F,GAAa/F,SAAA,CAEnEsF,EAAG7B,UACF3D,EAAAA,EAAAA,MAAA,MAAIX,GAAI,aAAa4G,IAAc/F,SAAA,CAChC,GAAGsF,EAAG7B,YACPxD,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CAACxG,QAAS,aAAasG,SAGrCT,EAAGnB,aAAemB,EAAGnB,YAAYP,OAAS,IACzC3D,EAAAA,EAAAA,KAAA,OAAKP,UAAU,cAAaM,UAC1BC,EAAAA,EAAAA,KAACiG,EAAAA,EAAgB,CAAC1C,OAAQ8B,EAAGnB,YAAagC,cAAeL,GAAkBpC,EAAWE,OAAS,MAGlGiC,IAbOE,EAcJ,IAzCd,IAA0BrC,CAgD2E,GAAE,CAACW,IAEtG,OACEpE,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACG0F,GACA,C,gECnIP,MAoBA,EApB2DnG,IAC0B,IADzB,OACxDiE,EAAM,cAAE2C,EAAa,eAAEC,EAAc,WAAEC,GAAoC9G,EAC7E,MAAM+G,EAAeH,GAA4B,MAAV3C,GAAkBA,EAAOI,OAAS,EACnE2C,EAAyB,OAAN/C,QAAM,IAANA,OAAM,EAANA,EAAQoB,QAAO4B,GAASA,EAAMnG,OAASmG,EAAMrC,YAAYP,OAAS,IAAGkB,KAAI0B,IAChGvG,EAAAA,EAAAA,KAAA,OAAKP,UAAU,4BAA2BM,UACxCC,EAAAA,EAAAA,KAACwG,EAAAA,EAAW,CACRH,aAAgBA,EAChBE,MAASA,EACTJ,eAAkBA,EAClBM,KAAQF,EAAMrC,YACdkC,WAAcA,KAN4BG,EAAMG,MAAQH,EAAMnG,SAWtE,OACEJ,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SAAGuG,GAAoB,C,qICjB3B,MAAMvH,GAAWC,EAAAA,EAAAA,IAAe,CAC9B2H,SAAU,CACRzH,GAAI,6BACJC,YAAa,oCACbC,eAAgB,YAElBwH,WAAY,CACV1H,GAAI,+BACJC,YAAa,sCACbC,eAAgB,gBAYb,SAASyH,EAAkBlF,EAAiBmF,EAA0CC,EAAiCJ,GAC5H,IAAIK,EACJ,GAAmB,MAAfD,EAAqB,CACvB,MAAME,EAAsBH,EAAoBzF,UAAUyF,EAAoBxF,OAAOyF,IAEnFC,EADyB,MAAvBC,GACkBC,EAAAA,EAAAA,IAAwBvF,EAAM,eAAgBsF,EAAqB,CAAEE,UAAWR,IAEhFI,CAExB,MACEC,EAAoB,GAGtB,OAAOA,CACT,CAEA,MAoEA,EApEiD1H,IACmC,IADlC,aAC9C+G,EAAY,MAAEE,EAAK,KAAEE,EAAI,eAAEN,EAAc,WAAEC,GAA+B9G,EAC5E,MAAMqC,GAAO/B,EAAAA,EAAAA,MACP,cAAED,GAAkBgC,EAEpBmF,GAAsBM,EAAAA,EAAAA,YAAWC,EAAAA,GACjCC,EAAUjB,GAAgBE,EAAMnG,MAAQmG,EAAMnG,WAAQ0B,EACtDyF,GAAcxB,EAAAA,EAAAA,IAAe,OAAPuB,QAAO,IAAPA,EAAAA,EAAW,IAEjCpD,EAAcuC,EAAK5B,KAAI,CAAC+B,EAAYY,KAAW,IAADC,EAClD,MAAMC,EAAcd,EAAWD,SACzBgB,EAAcd,EAAkBlF,EAAMmF,EAAqBF,EAAWG,YAAaH,EAAWD,UAC9FiB,EAAchB,EAAWxG,MACzByH,EAAc,CAACH,EAAWC,EAAaC,GAAaE,KAAK,KACzDC,EAA0BC,QAAQN,IAAcM,QAAQL,GAE9D,OACE9H,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,aAAYM,SAAA,CACvBqG,IACCpG,EAAAA,EAAAA,KAAA,MAAIP,UAAU,YAAWM,UACvBC,EAAAA,EAAAA,KAACiI,EAAAA,EAAU,CACPC,MAASL,EACTpI,UAAY,gBACZwB,KAAS,eAAesF,EAAMG,WAAWE,EAAW1H,UAG5Dc,EAAAA,EAAAA,KAAA,MAAIP,UAAU,WAAUM,SACrBgI,IACClI,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACG2H,EACa,MAAbA,GAAqBA,EAAU/D,OAAS,GAAKgE,EAAYhE,OAAS,GAAK,IACvEgE,QAIP3H,EAAAA,EAAAA,KAAA,MAAIP,UAAU,aAAYM,UACxBC,EAAAA,EAAAA,KAAA,QAAAD,SACG6H,SApBuC,QAAdH,EAACb,EAAW1H,UAAE,IAAAuI,EAAAA,EAAID,GAAOW,WAuBpD,IAIT,OACEtI,EAAAA,EAAAA,MAACuI,EAAAA,EAAK,CAACC,SAAO,EAACC,KAAK,KAAK7I,UAAU,0BAAyBM,SAAA,CACzDuH,IACCzH,EAAAA,EAAAA,MAAA,WAASX,GAAIiH,EAAiB,eAAeoB,SAAgBzF,EAAWrC,UAAU,gBAAeM,SAAA,CAC9F,GAAGuH,KACHnB,IAAkBnG,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CAACxG,QAAS,eAAe+H,UAG3DvH,EAAAA,EAAAA,KAAA,SAAOP,UAAU,SAAQM,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACGqG,IACCpG,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iBAEZC,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAOJ,EAAcZ,EAAS4H,eAClC3G,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAOJ,EAAcZ,EAAS6H,sBAGtC5G,EAAAA,EAAAA,KAAA,SAAAD,SACGmE,MAEG,C,sICvGZ,MAAMnF,GAAWC,EAAAA,EAAAA,IAAe,CAC9BuJ,WAAY,CACVrJ,GAAI,gCACJC,YAAa,oBACbC,eAAgB,cAElBuH,SAAU,CACRzH,GAAI,4BACJC,YAAa,mCACbC,eAAgB,YAElBoJ,UAAW,CACTtJ,GAAI,6BACJC,YAAa,qCACbC,eAAgB,eA+EpB,EArE+CE,IACqB,IADpB,WAC5CmJ,EAAU,eAAEtC,EAAc,WAAEC,GAA8B9G,EAC5D,MAAMqC,GAAO/B,EAAAA,EAAAA,KAEP8I,EAAgC,MAAdD,GAAsBA,EAAW9D,QAAOgE,GAC9C,MAAfA,EAAGhC,UAAoBgC,EAAGhC,SAAShD,OAAS,GAAqB,MAAhBgF,EAAGhC,UAC7B,MAAlBgC,EAAG5B,aAAuB4B,EAAG5B,YAAYpD,OAAS,IACvDA,OAAS,EAENiF,EAA2B,OAAVH,QAAU,IAAVA,OAAU,EAAVA,EAAY5D,KAAI,CAACgE,EAAWrB,KAAW,IAADsB,EAC3D,MAAMpB,EAAoC,MAAtBmB,EAAUlC,UAAoBkC,EAAUlC,SAAShD,OAAS,GAA4B,MAAvBkF,EAAUlC,SAAmBkC,EAAUlC,SAAW,GAC/HgB,EAAuC,MAAzBkB,EAAU9B,aAAsBG,EAAAA,EAAAA,IAAwBvF,EAAM,eAAgBkH,EAAU9B,YAAa,CAAEI,UAAW0B,EAAUlC,WAAc,GACxJiB,EAAciB,EAAUzI,MACxByH,EAAc,CAACH,EAAWC,EAAaC,GAAaE,KAAK,KAE/D,OACEjI,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,aAAYM,SAAA,CACvBqG,IACCpG,EAAAA,EAAAA,KAAA,MAAIP,UAAU,YAAWM,UACvBC,EAAAA,EAAAA,KAACiI,EAAAA,EAAU,CACPC,MAASL,EACTpI,UAAY,gBACZwB,KAAS,iBAAiB4H,EAAUE,sBAG3CL,IACC1I,EAAAA,EAAAA,KAAA,MAAIP,UAAU,qBAAoBM,UAChCF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACG2H,EACa,MAAbA,GAAqBA,EAAU/D,OAAS,GAAKgE,EAAYhE,OAAS,GAAK,IACvEgE,QAIP3H,EAAAA,EAAAA,KAAA,MAAIP,UAAWS,IAAW,sBAAuB,CAAE,YAAawI,IAAmB3I,UACjFC,EAAAA,EAAAA,KAAA,QAAAD,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACE,IAAI6I,EAAAA,EAAAA,IAAa,WAAWH,EAAUnC,QAASjH,UAAU,QAAOM,SAAE6H,WApBpB,QAA1BkB,EAACD,EAAUE,uBAAe,IAAAD,EAAAA,EAAItB,GAAOW,WAuBhE,IAIT,OAAsB,MAAlBS,GAAoD,IAA1BA,EAAejF,OAAqB,MAGhE3D,EAAAA,EAAAA,KAAA,OAAKP,UAAU,4BAA2BM,UACxCF,EAAAA,EAAAA,MAACuI,EAAAA,EAAK,CAACC,SAAO,EAACC,KAAK,KAAK7I,UAAU,0BAAyBM,SAAA,EAC1DF,EAAAA,EAAAA,MAAA,WAASX,GAAIiH,EAAiB,kBAAerE,EAAWrC,UAAU,gBAAeM,SAAA,CAC9E,GAAG4B,EAAKhC,cAAcZ,EAASwJ,eAC/BpC,IAAkBnG,EAAAA,EAAAA,KAACgG,EAAAA,EAAU,CAACxG,QAAQ,mBAEzCQ,EAAAA,EAAAA,KAAA,SAAOP,UAAU,SAAQM,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACGqG,IACCpG,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAEX2I,IAAmB1I,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAO4B,EAAKhC,cAAcZ,EAAS4H,eAC3D3G,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,QAAAD,SAAO4B,EAAKhC,cAAcZ,EAASyJ,qBAG3CxI,EAAAA,EAAAA,KAAA,SAAAD,SACG6I,QAGD,C,+OCjFV,MAgDA,EAhDiEtJ,IACf,IADgB,KAC9D2B,EAAI,MAAEiH,GAAkC5I,EAC1C,MAAMqC,GAAO/B,EAAAA,EAAAA,KACPqJ,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAERC,GAAerI,EAAAA,EAAAA,cAAY,KAAQiI,EAASK,EAAAA,KAAkC,GAAK,IACnFC,GAAUC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,aAAaH,QAAQI,SAC7ExG,EAAAA,EAAAA,GAAUkG,EAAcE,GAExB,MAAM9C,GAAOpC,EAAAA,EAAAA,UAAQ,IAAa,OAAPkF,QAAO,IAAPA,OAAO,EAAPA,EACrB5E,QAAOiF,GAAKA,EAAExJ,MAAMuD,OAAS,IAC9BkB,KAAI+E,IAAC,CAAO/H,MAAO+H,EAAExJ,MAAO8H,OAAOhB,EAAAA,EAAAA,IAAwBvF,EAAM,UAAWiI,EAAExJ,YAAY,CAACmJ,EAAS5H,EAAKkI,SAExGvI,GAASN,EAAAA,EAAAA,cAAa8I,IAC1B,GAAgB,MAAZA,EAEG,CACL,MAAMC,EAA0B,GAUhC,OATAD,EAAS/E,SAAQiF,IACf,MAAMC,GAAiB,OAAPV,QAAO,IAAPA,EAAAA,EAAW,IAAInE,MAAKwE,GAAKA,EAAExJ,QAAU4J,IAChDC,EAGHF,EAAS9F,KAAKgG,GAFdd,EAAM,0CAA0Ce,KAAKC,UAAUF,eAAoBC,KAAKC,UAAiB,OAAPZ,QAAO,IAAPA,EAAAA,EAAW,MAG/G,IAGKQ,CACT,IACC,CAACR,IAEElI,GAAYL,EAAAA,EAAAA,cAAaa,GAC7BuI,EAAAA,EAAYvI,GAAOgD,KAAImF,GAAKA,EAAE5J,SAC7B,IAEH,OACEJ,EAAAA,EAAAA,KAACqK,EAAAA,EAAQ,CACLpJ,KAAQA,EACRiH,MAASA,EACTzB,KAAQA,EACRnF,OAAUA,EACVD,UAAaA,EACbE,SAAO,GACL,E,wBCjDV,MAmCA,GAnC0BlC,EAAAA,EAAAA,aAAqD,CAAAC,EAGtBC,KAAS,IAHc,OAC5E+B,EAAM,UAAED,EAAS,KACjBJ,EAAI,SAAEC,EAAQ,QAAEK,EAAO,QACvBE,EAAO,OAAEC,KAAWhC,GAA+BJ,EACrD,MAAMqC,GAAO/B,EAAAA,EAAAA,KAEPgC,GAAcZ,EAAAA,EAAAA,cAAaa,GAClB,MAATA,EACKN,EAAU,QAAKO,EAEfT,EAAUQ,IAElB,CAACR,EAAWE,IAEf,OACEvB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACd,KAAMA,EAAMe,SAAUd,EAAWe,EAAAA,QAAoBH,EAAWI,eAAgB,GAAGnC,SACvFoC,IACCnC,EAAAA,EAAAA,KAACsK,EAAAA,GAAe,IACR5K,EACJ6B,QAAYA,EACZL,SAAYA,EAEZD,KAAYkB,EAAOE,MAAMpB,KACzBY,MAAYD,EAAYO,EAAOE,MAAMR,OACrCS,QAAYC,EAAAA,EAAAA,IAAiBZ,EAAMQ,EAAOK,KAAKC,QAAWN,EAAOK,KAAKE,0BAAiDZ,EAA1BK,EAAOK,KAAKG,cACzGH,KAAYL,EAAOK,KACnBhB,SAAYA,CAAC+I,EAAe1I,KAAqBM,EAAOE,MAAMb,SAASF,EAAOO,GAAO,EACrFJ,QAAaoB,IAAoDV,EAAOE,MAAMZ,QAAQoB,GAAe,OAAPpB,QAAO,IAAPA,GAAAA,EAAUoB,EAAM,EAC9GnB,OAAamB,IAAoDV,EAAOE,MAAMX,OAAOmB,GAAe,OAANnB,QAAM,IAANA,GAAAA,EAASmB,EAAM,EAC7GtD,IAAOA,KAEP,ICiBZ,EA5C2DD,IACZ,IADa,KACxD2B,EAAI,MAAEiH,GAA+B5I,EACvC,MAAMqC,GAAO/B,EAAAA,EAAAA,KACPqJ,GAAWC,EAAAA,EAAAA,MAEXsB,GAAYxJ,EAAAA,EAAAA,cAAY,KAAQiI,EAASK,EAAAA,KAA+B,GAAK,IAC7EmB,GAAOjB,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,aAAae,KAAKd,SACvExG,EAAAA,EAAAA,GAAUqH,EAAWC,GAErB,MAAMhE,GAAOpC,EAAAA,EAAAA,UAAQ,IAAU,OAAJoG,QAAI,IAAJA,OAAI,EAAJA,EACrB9F,QAAO+F,GAAKA,EAAEtK,MAAMuD,OAAS,IAC9BkB,KAAI6F,IAAC,CAAO7I,MAAO6I,EAAEtK,MAAO8H,OAAOhB,EAAAA,EAAAA,IAAwBvF,EAAM,OAAQ+I,EAAEtK,WAC3EuK,KAAKC,EAAAA,KAAc,CAACH,EAAM9I,EAAKkI,SAE9BvI,GAASN,EAAAA,EAAAA,cAAa8I,IAC1B,GAAgB,MAAZA,EAEG,CACL,MAAMC,EAAuB,GAM7B,OALAD,EAAS/E,SAAQiF,IACf,MAAMa,EAAU,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMrF,MAAKsF,GAAKA,EAAEtK,QAAU4J,IACxCD,EAAS9F,KAAQ,OAAH4G,QAAG,IAAHA,EAAAA,EAAO,CAAEzK,MAAO4J,GAAW,IAGpCD,CACT,IACC,CAACU,IAEEpJ,GAAYL,EAAAA,EAAAA,cAAaa,GAC7BuI,EAAAA,EAAYvI,GAAOgD,KAAImF,GAAKA,EAAE5J,SAC7B,IAEH,OACEJ,EAAAA,EAAAA,KAAC8K,EAAiB,CACd7J,KAAQA,EACRiH,MAASA,EACTzB,KAAQA,EACRnF,OAAUA,EACVD,UAAaA,EACbE,SAAO,GACL,ECJV,EApCqEjC,IACjB,IADkB,KAClE2B,EAAI,MAAEiH,GAAoC5I,EAC5C,MAAMqC,GAAO/B,EAAAA,EAAAA,KACPqJ,GAAWC,EAAAA,EAAAA,MAEX6B,GAAe/J,EAAAA,EAAAA,cAAY,KAAQiI,EAASK,EAAAA,IAAkC,GAAK,IACnF0B,GAAUxB,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,aAAasB,QAAQrB,SAC7ExG,EAAAA,EAAAA,GAAU4H,EAAcC,GAExB,MAAMvE,GAAOpC,EAAAA,EAAAA,UAAQ,IAAa,OAAP2G,QAAO,IAAPA,OAAO,EAAPA,EACrBnG,KAAIoG,IAAC,CAAOpJ,MAAOoJ,EAAE7K,MAAO8H,OAAOhB,EAAAA,EAAAA,IAAwBvF,EAAM,UAAWsJ,EAAE7K,WAC/EuK,KAAKC,EAAAA,KAAc,CAACI,EAASrJ,EAAKkI,SAEjCvI,GAASN,EAAAA,EAAAA,cAAa8I,IAGlB,IAADoB,EAFP,GAAgB,MAAZpB,EAGF,OAA+C,QAA/CoB,EAAc,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAAS5F,MAAK6F,GAAKA,EAAE7K,QAAU0J,WAAS,IAAAoB,EAAAA,EAAI,CAAE9K,MAAO0J,EAC9D,GACC,CAACkB,IAEE3J,GAAYL,EAAAA,EAAAA,cAAaa,GAC7BuI,EAAAA,EAAYvI,GAAOgD,KAAImF,GAAKA,EAAE5J,SAC7B,IAEH,OACEJ,EAAAA,EAAAA,KAAC8K,EAAiB,CACd7J,KAAQA,EACRiH,MAASA,EACTzB,KAAQA,EACRnF,OAAUA,EACVD,UAAaA,GACX,ECIV,EApCuE/B,IAClB,IADmB,KACpE2B,EAAI,MAAEiH,GAAqC5I,EAC7C,MAAMqC,GAAO/B,EAAAA,EAAAA,KACPqJ,GAAWC,EAAAA,EAAAA,MAEXiC,GAAgBnK,EAAAA,EAAAA,cAAY,KAAQiI,EAASK,EAAAA,KAAmC,GAAK,IACrF8B,GAAW5B,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,aAAa0B,SAASzB,SAC/ExG,EAAAA,EAAAA,GAAUgI,EAAeC,GAEzB,MAAM3E,GAAOpC,EAAAA,EAAAA,UAAQ,IAAc,OAAR+G,QAAQ,IAARA,OAAQ,EAARA,EACrBvG,KAAIoG,IAAC,CAAOpJ,MAAOoJ,EAAE7K,MAAO8H,OAAOhB,EAAAA,EAAAA,IAAwBvF,EAAM,WAAYsJ,EAAE7K,WAChFuK,KAAKC,EAAAA,KAAc,CAACQ,EAAUzJ,EAAKkI,SAElCvI,GAASN,EAAAA,EAAAA,cAAa8I,IAGlB,IAADuB,EAFP,GAAgB,MAAZvB,EAGF,OAAgD,QAAhDuB,EAAe,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUhG,MAAK6F,GAAKA,EAAE7K,QAAU0J,WAAS,IAAAuB,EAAAA,EAAI,CAAEjL,MAAe,OAAR0J,QAAQ,IAARA,EAAAA,EAAY,GAC3E,GACC,CAACsB,IAEE/J,GAAYL,EAAAA,EAAAA,cAAaa,GAC7BuI,EAAAA,EAAYvI,GAAOgD,KAAImF,GAAKA,EAAE5J,SAC7B,IAEH,OACEJ,EAAAA,EAAAA,KAAC8K,EAAiB,CACd7J,KAAQA,EACRiH,MAASA,EACTzB,KAAQA,EACRnF,OAAUA,EACVD,UAAaA,GACX,E,4CCpCV,MAAMtC,GAAWC,EAAAA,EAAAA,IAAe,CAC9BsM,OAAQ,CACNpM,GAAI,uBACJC,YAAa,uBACbC,eAAgB,iBAElBmM,KAAM,CACJrM,GAAI,qBACJC,YAAa,qBACbC,eAAgB,UAkCdoM,GAAmBnM,EAAAA,EAAAA,aAAsD,CAAAoM,EACOlM,KAAS,IADf,MAC5EmM,EAAK,WAAEC,EAAU,SAAEC,EAAQ,SAAEC,EAAQ,OAAEC,KAAWpM,GAA8B+L,EAClF,MAAM,cAAE9L,IAAkBC,EAAAA,EAAAA,KAEpBmM,GAAUL,GAASE,EAEnBI,GAAUhL,EAAAA,EAAAA,cAAY,KAItB+K,EACFD,IAEAD,GACF,GACC,CAACE,EAAQD,EAAQD,IAEpB,OACE7L,EAAAA,EAAAA,KAACiM,EAAAA,EAAO,CAAC/I,SAAS,MAAKnD,UACrBF,EAAAA,EAAAA,MAACqM,EAAAA,EAAM,CACHC,QAAW,UACXC,KAAYL,EAAS,SAAW,SAEhCM,UAAaC,EAAAA,EAAAA,QAAiBP,EAC9BC,QAAWA,EACXO,UAAaR,OAASjK,EAAY,OAC9BpC,EACJD,UAAakM,EAAa,gBAAa7J,EACvCvC,IAAOA,EAAIQ,SAAA,EACbC,EAAAA,EAAAA,KAAA,QAAMgD,MAAO,CAAEwJ,WAAYb,EAAa,SAAW,WAAY5L,SAAEJ,EAAcoM,EAAShN,EAASwM,KAAOxM,EAASuM,UAChHK,IAAc3L,EAAAA,EAAAA,KAACyM,EAAAA,EAAc,CAACzJ,MAAO,CAAEE,SAAU,WAAYwJ,MAAO,4BAE/D,IAIDC,GAAqBtN,EAAAA,EAAAA,aAAoC,CAACuN,EAAQrN,KAC7ES,EAAAA,EAAAA,KAAC6M,EAAAA,GAAO,CAACC,aAAc,CAAElB,UAAU,EAAMD,YAAY,GAAO5L,SACzDgN,IAAA,IAAC,WAAEpB,GAAYoB,EAAA,OACd/M,EAAAA,EAAAA,KAACgN,EAAuB,CAACrB,WAAYA,EAAYpM,IAAKA,GAAO,MAS5D,MAAMyN,UAAgCC,EAAAA,UAE3CC,aAAAA,GACE,OAAOC,KAAKC,MAAMzB,UACpB,CAEA0B,MAAAA,GACE,OAAO,IACT,EAGF,QAzFoCC,KAAO,IAADC,EAAAC,EACxC,MAAMC,GAAMC,EAAAA,EAAAA,MACNzE,GAAWC,EAAAA,EAAAA,MAEXyE,GAAcnE,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMmE,aAEtDC,GAAU7M,EAAAA,EAAAA,cAAY,KAAY2M,EAAYG,MAAM7E,EAAS8E,EAAAA,GAAsBJ,EAAYG,MAAM,GAAK,CAACH,EAAYG,OACvHhC,GAAS9K,EAAAA,EAAAA,cAAY,KAAO,IAADgN,EAAEP,GAAIzE,EAAAA,EAAAA,IAAa,WAA2B,QAA3BgF,EAAWL,EAAYG,YAAI,IAAAE,OAAA,EAAhBA,EAAkBtH,QAAQ,GAAK,CAAiB,QAAjB6G,EAACI,EAAYG,YAAI,IAAAP,OAAA,EAAhBA,EAAkB7G,OAE3GxH,EAAqB,QAAnBsO,EAAGG,EAAYG,YAAI,IAAAN,OAAA,EAAhBA,EAAkBtO,GACvBwM,EAAc,MAANxM,GAAqB,IAAPA,EAE5B,OACEc,EAAAA,EAAAA,KAAC6M,EAAAA,GAAO,CAACC,aAAc,CAAElB,UAAU,EAAMD,YAAY,GAAO5L,SACzDT,IAAA,IAAC,SAAEsM,EAAQ,WAAED,GAAYrM,EAAA,OACxBU,EAAAA,EAAAA,KAACwL,EAAgB,CAACE,MAAOA,EAAOE,SAAUA,EAAUD,WAAYA,EAAYE,SAAUgC,EAAS/B,OAAQA,GAAU,GAE3G,E,mIC1Bd,MAAMmC,UAAmBC,EAAAA,EAAqCC,WAAAA,GAAA,SAAAC,WAC5D,KACQ7O,KAAM8O,EAAAA,EAAAA,aAAiB,KAgB/BC,aAAgBzL,IAAgD,IAAD0L,EAAAC,EAAAC,EAC1C,QAAnBF,GAAAC,EAAArB,KAAKC,OAAM5L,gBAAQ,IAAA+M,GAAnBA,EAAAG,KAAAF,EAAsB3L,EAAM8L,OAAO1N,KAAW,OAAL4B,QAAK,IAALA,GAAmB,QAAd4L,EAAL5L,EAAO8L,OAAOC,aAAK,IAAAH,OAAd,EAALA,EAAsB,GAAG,EAClE,KAEFI,YAAc,KACR1B,KAAKC,MAAM5L,WACb2L,KAAKC,MAAM5L,SAAS2L,KAAKC,MAAMnM,KAAM,IACrCkM,KAAK2B,aACP,CACA,CAvBFA,UAAAA,GACkB,MAAZ3B,KAAK5N,KAAe4N,KAAK5N,IAAIwP,UAC/B5B,KAAK5N,IAAIwP,QAAQlN,MAAQ,GAE7B,CAEAmN,KAAAA,GACE,QAAgB,MAAZ7B,KAAK5N,MAAe4N,KAAK5N,IAAIwP,WAC/B5B,KAAK5N,IAAIwP,QAAQC,SACV,EAGX,CAaA3B,MAAAA,GAGE,MAAM,OAAE4B,EAAM,MAAEpN,EAAK,SAAEL,EAAQ,KAC3BP,EAAI,MAAE+B,EAAK,QAAEkM,EAAO,SAAEC,EAAQ,SAAE9C,EAAQ,MACxCnE,EAAK,UAAEzI,EAAS,SAAE2P,EAAQ,OAAE9M,EAAM,KAAEE,KAAS9C,GAASyN,KAAKC,MAE/D,OACEpN,EAAAA,EAAAA,KAACqP,EAAAA,EAAKC,MAAK,IACHnC,KAAKoC,gBACTC,UAAavO,EACbxB,UAAa0N,KAAKsC,yBAClBzM,MAAaA,EAAMjD,UACrBF,EAAAA,EAAAA,MAAC6P,EAAAA,EAAkB,CACfC,UAAwB,MAAXT,EACb7B,OAAauC,IAAU5P,EAAAA,EAAAA,KAAC6P,EAAAA,EAAO,CAAC3Q,GAAI,GAAG+B,YAAgBiO,QAASA,EAAQnP,SAAE6P,IAAkB7P,SAAA,CAC7FoN,KAAK2C,WACL3C,KAAK4C,cACL5C,KAAK6C,mBACNnQ,EAAAA,EAAAA,MAACoQ,EAAAA,EAAU,CAAAlQ,SAAA,EACTC,EAAAA,EAAAA,KAACqP,EAAAA,EAAKa,QAAO,CACT9D,KAAS,OACTnL,KAAUA,EACVgO,OAAUA,EACVE,SAAYA,EACZ9C,SAAYA,EACZ7K,SAAY2L,KAAKmB,gBACb5O,EACJH,IAAO4N,KAAK5N,OACd4P,IAAa9C,GAAY7K,IACnBK,GAA8B,MAApBsL,KAAK5N,IAAIwP,SAAmB5B,KAAK5N,IAAIwP,QAAQlN,SACzD7B,EAAAA,EAAAA,KAACiQ,EAAAA,EAAWE,KAAI,CAAC1Q,UAAU,6BAA4BM,UACrDC,EAAAA,EAAAA,KAACkM,EAAAA,EAAM,CAACF,QAASmB,KAAK0B,YAAa1C,QAAQ,kBAAkBnJ,MAAO,CAAEoN,aAAc,GAAIrQ,UAACC,EAAAA,EAAAA,KAACqQ,EAAAA,EAAI,CAACC,KAAK,IAAInE,QAAQ,QAAQ7D,KAAK,kBAO/I,EAGF,UC9EMiI,EAAY1O,GAAgBA,EA4BlC,GA1BqBxC,EAAAA,EAAAA,aAA2C,CAAAC,EAG7BC,KAAS,IAHqB,KAC7D0B,EAAI,SAAEC,EAAQ,SACdM,EAAQ,QAAEC,EAAO,OAAEC,KAChBhC,GAA0BJ,EAC/B,MAAMqC,GAAO/B,EAAAA,EAAAA,KAEb,OACEI,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACd,KAAMA,EAAMe,SAAUd,EAAWe,EAAAA,QAAoBH,EAAWI,eAAgB,GAAId,MAAOmP,EAASxQ,SACxGoC,IAAM,IAAAqO,EAAA,OACLxQ,EAAAA,EAAAA,KAACiO,EAAU,IACHvO,EACJwB,SAAYA,EAEZD,KAAYkB,EAAOE,MAAMpB,KACzBY,MAA8B,QAAzB2O,EAAOrO,EAAOE,MAAMR,aAAK,IAAA2O,GAAAA,EAC9BlO,QAAYC,EAAAA,EAAAA,IAAiBZ,EAAMQ,EAAOK,KAAKC,QAAWN,EAAOK,KAAKE,0BAAiDZ,EAA1BK,EAAOK,KAAKG,cACzGH,KAAYL,EAAOK,KACnBhB,SAAYA,CAACoB,EAAef,KAA8BM,EAAOE,MAAMb,SAASK,GAAgB,OAARL,QAAQ,IAARA,GAAAA,EAAWoB,EAAOf,EAAM,EAChHJ,QAAaoB,IAAoDV,EAAOE,MAAMZ,QAAQoB,GAAe,OAAPpB,QAAO,IAAPA,GAAAA,EAAUoB,EAAM,EAC9GnB,OAAamB,IAAoDV,EAAOE,MAAMX,OAAOmB,GAAe,OAANnB,QAAM,IAANA,GAAAA,EAASmB,EAAM,EAC7GtD,IAAOA,GAAO,GAEd,I,cCvBZ,MAAMR,IAAWC,EAAAA,EAAAA,IAAe,CAC9ByR,YAAa,CACXvR,GAAI,4BACJC,YAAa,cACbC,eAAgB,WA+DpB,GA3DqCsR,KACnC,MAAM,cAAE/Q,IAAkBC,EAAAA,EAAAA,MACpB,IAAE+Q,IAAQC,EAAAA,EAAAA,MAGVC,GAAgBC,EAAAA,EAAAA,QAAY,OAC3BC,EAAUC,IAAenQ,EAAAA,EAAAA,eAA6BiB,GACvDmP,GAAoB5M,EAAAA,EAAAA,UAAQ,KAAM6M,EAAAA,EAAAA,MAA6B,KAErEpQ,EAAAA,EAAAA,YAAU,KACJ+P,EAAc9B,SAChB8B,EAAc9B,QAAQD,aAExBkC,OAAYlP,EAAU,GACrB,CAAC6O,IAEJ,MAAMQ,GAAoBnQ,EAAAA,EAAAA,cAAY,CAACuJ,EAAeT,KACpDkH,EAAYlH,EAAWsH,IAAIC,gBAAgBvH,GAAY,GAAG,GACzD,IAEGwH,GAAkBtQ,EAAAA,EAAAA,cAAauQ,GACnB,MAAZR,EACKA,EAASpN,OAAS,EAAIoN,GAAWG,EAAAA,EAAAA,MAEjCM,EAAAA,EAAAA,IAAeD,GAAeN,IAEtC,CAACF,EAAUE,IAEd,OACEpR,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,IAAK,EAAG9O,MAAO,CAAE+O,WAAY,OAAQC,YAAa,QAASjS,UACtFC,EAAAA,EAAAA,KAACiS,EAAAA,EAAgB,CAACnP,OAAQ,MAAOC,MAAO,IAAIhD,UAC1CC,EAAAA,EAAAA,KAACkS,EAAAA,EAAc,CAACC,WAAY,CAAC,SAASpS,SACnCqS,IACCpS,EAAAA,EAAAA,KAACqS,EAAAA,EAAK,CACF9R,IAAS+Q,EAAgBc,EAAOE,OAChC7R,IAAQ,GACRuC,MAAS,CAAEuP,UAAW,sBAOpCvS,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAACwS,EAAY,CACTvR,KAAW,QACXiH,MAAYvI,EAAcZ,GAAS0R,aACnCxB,OAAW,UACXzN,SAAY2P,EACZ5R,IAAOsR,UAGd,E,oCC/DP,SAAS4B,GAAuBC,GAC9B,IAAIC,EACJ,MAAMC,EAAQF,EAAIG,QAAQ,KACpBC,EAAUJ,EAAIG,QAAQ,KAkB5B,OAhBe,IAAXD,IAA6B,IAAbE,EAClBH,EAAaD,GACO,IAAXE,EACTD,EAAaD,EAAIK,QAAQ,IAAK,MACR,IAAbD,EACTH,EAAaD,EAGTE,EAAQE,GACVH,EAAaD,EAAIK,QAAQ,IAAK,IAC9BJ,EAAaA,EAAWI,QAAQ,IAAK,MAErCJ,EAAaD,EAAIK,QAAQ,IAAK,IAI3BC,WAAWL,EACpB,CAiBA,MA+BMM,GAAeC,IACnB,IAAIC,GAAQ,EACZ,MAAMxP,EAASuP,EAAOvP,OAQtB,MAPgB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAE7CoB,SAAQqO,IACVF,EAAOG,YAAYD,GAAKD,IAC1BA,EAAOD,EAAOG,YAAYD,GAC5B,IAEEzP,IAAYwP,EAAO,EACd,CAAEG,OAAQJ,EAAQxT,KAAM,IAE1B,CAAE4T,OAAQJ,EAAOhO,UAAU,EAAGiO,EAAO,GAAIzT,KAAMwT,EAAOhO,UAAUiO,EAAO,EAAGxP,GAAS,EAGtF4P,GAAiBC,GACFA,EAASC,UAAU,QACpB/O,MAAM,UAS1B,IAAgBpD,EAAgCsD,KAa9C,MAAM6F,EAAO7F,EAAKF,MAAM,KAElBgP,EAA4B,GAClC,IAAI3M,EAGA4M,EADAC,GAAmB,EAEvB,IAAKD,EAAK,EAAGA,EAAKlJ,EAAK9G,OAAS,IAAKgQ,EAAI,CACvC,MAAME,EAAUpJ,EAAKkJ,GACrB,GAAuB,IAAnBE,EAAQlQ,OAAc,SAE1B,MAAMmQ,EAAkBF,EAA+C,GAA5BL,GAAcM,EAAQ,IAEjE,GAAKD,GAAqBG,OAAOC,MAAMC,SAASJ,EAAQ,KA2BjD,IAAKD,IAAoBE,EAAe,GAaxC,CAELF,GAAmB,EACnB7M,EAAczF,EAAOuS,EAAQK,qBACzBnN,KACA4M,EAEJ,KACF,CAfE,GAFAC,GAAmB,EACnBF,EAAWzP,KAAK,GAAG6P,EAAe,MAAMA,EAAe,MACnDD,EAAQlQ,OAAS,EAAG,CACtBoD,EAAczF,EAAOuS,EAAQ3O,UAAU,GAAGgP,qBACtCnN,KACA4M,EAEJ,KACF,CASF,KAhD8D,CAI5D,IAAI,OAAEL,EAAM,KAAE5T,GAASuT,GAAYY,GAEnC,GADAH,EAAWzP,KAAKqP,GACZ5T,EAAM,CAER,MAAMyU,EAAWZ,GAAc7T,EAAK,IACpC,GAAIyU,EAAS,GAAI,CAGf,GAFAP,GAAmB,EACnBF,EAAWzP,KAAK,GAAGkQ,EAAS,MAAMA,EAAS,QACvCzU,EAAKiE,OAAS,GAGhB,SAFAjE,EAAOA,EAAKwF,UAAU,EAI1B,CAEA,GADA6B,EAAczF,EAAO5B,EAAKwU,qBACtBnN,EAAa,GACb4M,EACF,KACF,CACF,CACID,EAAW/P,QAAU,IACvBiQ,GAAmB,EAEvB,CAsBF,CAEA,MAAM,UAAEQ,EAAS,YAAEC,GAvIEC,KACrB,MAAM,UAAEF,EAAS,YAAEC,GAAgBC,EAAUC,QAAO,CAACf,EAAUgB,KAC7D,MAAM9P,EAAQ8P,EAAK9P,MAAM,KACzB,IAAI0O,EAAIX,GAAuB/N,EAAM,IACjC+P,EAAI/P,EAAMf,OAAS,EAAI8O,GAAuB/N,EAAM,IAAM,EAI9D,GAA6B,IAAzB8O,EAASa,YAAqB,MAAO,CAAED,UAAWhB,EAAGiB,YAAaI,GAGtE,GAAqB,IAAjB/P,EAAMf,OAAc,CACtByP,GAAKI,EAASY,UACdK,GAAKjB,EAASa,YACd,MAAMK,GAAMC,EAAAA,GAAAA,GAAIvB,EAAGqB,GACnB,MAAO,CAAEL,UAAWhB,EAAIsB,EAAKL,YAAaI,EAAIC,EAChD,CAGAtB,EAAII,EAASY,UAAYK,EAAIjB,EAASa,YAAcjB,EACpDqB,GAAKjB,EAASa,YACd,MAAMK,GAAMC,EAAAA,GAAAA,GAAIvB,EAAGqB,GACnB,MAAO,CAAEL,UAAWhB,EAAIsB,EAAKL,YAAaI,EAAIC,EAAK,GAClD,CAAEN,UAAW,EAAGC,YAAa,IAEhC,MAAO,CACLD,YACAC,cACD,EA2GkCO,CAAclB,GAEjD,MAAO,CAAEU,UAAyB,IAAdA,OAAkBtS,EAAYsS,EAAWC,YAAaA,EAAatN,YAAaA,EAAa3G,MADnGqK,EAAKoK,MAAMlB,GAAI7L,KAAK,KAEnC,E,gCCjKD,MAAMgN,GAAUA,KAAM9U,EAAAA,EAAAA,KAAA,OAAKP,UAAU,UAASM,SAAC,eAEhC,MAAMgV,WAAuF7G,EAAAA,EAA0DC,WAAAA,GAAA,SAAAC,WACpK,KACQ7O,KAAM8O,EAAAA,EAAAA,YAAiB,CAE/BW,KAAAA,GACE,QAAgB,MAAZ7B,KAAK5N,MAAe4N,KAAK5N,IAAIwP,WAC/B5B,KAAK5N,IAAIwP,QAAQC,SACV,EAGX,CAEAc,QAAAA,GACE,OAAwB,MAApB3C,KAAKC,MAAMlF,MACN,KACEiF,KAAKC,MAAM8B,SAElBrP,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGoN,KAAKC,MAAMlF,MAAM,QAElBlI,EAAAA,EAAAA,KAACqQ,EAAAA,EAAI,CAACC,KAAK,cAAc7Q,UAAU,oBAIhC0N,KAAKC,MAAMlF,KAEtB,CAEAmF,MAAAA,GAGE,MAAM,MAAExL,EAAQ,GAAE,KAAEmT,EAAO,EAAC,SAAExT,EAAQ,KAClCP,EAAI,MAAE+B,EAAK,QAAEkM,EAAO,MACpBhH,EAAK,UAAEzI,EAAS,SAAE2P,EAAQ,OAAE9M,EAAM,KAAEE,KAAS9C,GAASyN,KAAKC,MAE/D,OACEpN,EAAAA,EAAAA,KAACqP,EAAAA,EAAKC,MAAK,IACHnC,KAAKoC,gBACTC,UAAavO,EACbxB,UAAa0N,KAAKsC,yBAClBzM,MAAaA,EAAMjD,UACrBF,EAAAA,EAAAA,MAAC6P,EAAAA,EAAkB,CACfC,UAAwB,MAAXT,EACb7B,OAAauC,IAAU5P,EAAAA,EAAAA,KAAC6P,EAAAA,EAAO,CAAC3Q,GAAI,GAAG+B,YAAgBiO,QAASA,EAAQnP,SAAE6P,IAAkB7P,SAAA,CAC7FoN,KAAK2C,WACL3C,KAAK4C,cACL5C,KAAK6C,mBACNhQ,EAAAA,EAAAA,KAACiQ,EAAAA,EAAU,CAAAlQ,UACTC,EAAAA,EAAAA,KAACiV,GAAAA,EAAyB,CACtBhU,KAAYA,EACZY,MAAYA,EACZmT,KAAYA,EAEZE,iBAAoBJ,GACpBrV,UAAY,eACZ0V,oBAAkB,EAElB3T,SAAa2L,KAAKmB,gBAEd5O,EACJH,IAAO4N,KAAK5N,YAM1B,ECjFF,MAmCA,IAnC+BF,EAAAA,EAAAA,aAA8C,CAAAC,EAELC,KAAS,IAFH,KAC1E0B,EAAI,SAAEC,EAAQ,OAAEC,EAAM,MAAEC,EAAK,SAC7BI,EAAQ,QAAEC,EAAO,OAAEC,KAAWhC,GAAoCJ,EACpE,MAAMqC,GAAO/B,EAAAA,EAAAA,KAEPwV,GAAa/Q,EAAAA,EAAAA,UAAQ,KACzB,MAAMgR,EAAsC,GAM5C,OAJInU,GACFmU,EAAKpR,KAAKhC,EAAAA,KAGLqT,EAAAA,EAAAA,OAAqBD,EAAK,GAChC,CAACnU,IAEJ,OACElB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACd,KAAMA,EAAMe,SAAUoT,EAAYlT,eAAgB,GAAIf,OAAQA,EAAQC,MAAOA,EAAMrB,SACvFoC,IACCnC,EAAAA,EAAAA,KAAC+U,GAAoB,IACbrV,EACJwB,SAAYA,EAEZD,KAAYkB,EAAOE,MAAMpB,KACzBY,MAAYM,EAAOE,MAAMR,MACzBS,QAAYC,EAAAA,EAAAA,IAAiBZ,EAAMQ,EAAOK,KAAKC,QAAWN,EAAOK,KAAKE,0BAAiDZ,EAA1BK,EAAOK,KAAKG,cACzGH,KAAYL,EAAOK,KACnBhB,SAAYA,CAACoB,EAAef,KAAoBM,EAAOE,MAAMb,SAASK,GAAgB,OAARL,QAAQ,IAARA,GAAAA,EAAWoB,EAAOf,EAAM,EACtGJ,QAAaoB,IAAoDV,EAAOE,MAAMZ,QAAQoB,GAAe,OAAPpB,QAAO,IAAPA,GAAAA,EAAUoB,EAAM,EAC9GnB,OAAamB,IAAoDV,EAAOE,MAAMX,OAAOmB,GAAe,OAANnB,QAAM,IAANA,GAAAA,EAASmB,EAAM,EAC7GtD,IAAOA,KAEP,I,2DCxBZ,MAAMR,IAAWC,EAAAA,EAAAA,IAAe,CAC9BuW,QAAS,CACPrW,GAAI,wBACJC,YAAa,UACbC,eAAgB,aAsEpB,GAlE+CE,IAGR,IAHS,GAC5CJ,EAAE,OAAEsW,EAAM,OAAElT,EAAM,SAAEmT,EAAQ,WAC5BC,EAAU,UAAEC,EAAS,SAAEC,EAAQ,SAC/B7V,GAA6BT,EAC/B,MAAM,cAAEK,IAAkBC,EAAAA,EAAAA,KAEpBiW,EAAmB3V,KAAW,UAAW,CAC7C,cAAeoC,IAGXwT,EAAe5V,KAAW,MAAO,WAAY,CACjD,cAAeoC,IAGXyT,EAAOhW,EAAS8U,MAAM,EAAG9U,EAAS4D,OAAS,GAAGkB,KAAI,CAAC+K,EAAQpI,KAC/DxH,EAAAA,EAAAA,KAACgW,GAAAA,EACG,CAEA5V,OACEP,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGyV,EAAOhO,IACC,OAARiO,QAAQ,IAARA,OAAQ,EAARA,EAAWjO,MACV3H,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAE,QAEAC,EAAAA,EAAAA,KAAC6P,EAAAA,EAAO,CACJ3Q,GAAM,GAAGsW,EAAOhO,aAChB0H,QAAauG,EAASjO,GAAOzH,UAC/BC,EAAAA,EAAAA,KAACqQ,EAAAA,EAAI,CAACC,KAAK,cAAc7Q,UAAU,eAAe,aAAYgW,EAASjO,GAAQ,wBAAkB1F,YAM3GmU,SAAazO,EAAMW,WACnB1I,UAAY,SAAQM,UACtBC,EAAAA,EAAAA,KAAA,OAAKP,UAAWoW,EAAiB9V,SAAE6P,KAlB1BpI,EAAMW,cAsBb+N,GAAelV,EAAAA,EAAAA,cAAamV,IAC5BA,IACM,OAARP,QAAQ,IAARA,GAAAA,EAAWO,GACb,GACC,CAACP,IAEJ,OACE/V,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,cAAaM,SAAA,EAC1BF,EAAAA,EAAAA,MAACuW,GAAAA,EAAI,CACDlX,GAAM,GAAGA,SACTmX,iBAAoBX,GAAc,IAClCY,UAAaX,EACbC,SAAaM,EACbzW,UAAaqW,EAAa/V,SAAA,CAC3BgW,GACD/V,EAAAA,EAAAA,KAACgW,GAAAA,EAAG,CACA5V,MAAST,EAAcZ,GAASwW,SAChC9V,UAAY,UACZwW,SAAY,UAASlW,UACvBC,EAAAA,EAAAA,KAAA,OAAKP,UAAWoW,EAAiB9V,SAAEA,EAASA,EAAS4D,OAAS,WAGlE3D,EAAAA,EAAAA,KAAA,OAAKP,UAAU,kBAAiBM,SAAEuC,MAC9B,ECpEJvD,IAAWC,EAAAA,EAAAA,IAAe,CAC9BuX,kBAAmB,CACjBrX,GAAI,kCACJC,YAAa,2BACbC,eAAgB,eAElBoX,oBAAqB,CACnBtX,GAAI,8BACJC,YAAa,YACbC,eAAgB,sHAElBqX,wBAAyB,CACvBvX,GAAI,4CACJC,YAAa,kCACbC,eAAgB,mEAGlBsX,iBAAkB,CAChBxX,GAAI,iCACJC,YAAa,qBACbC,eAAgB,gBAElBuX,mBAAoB,CAClBzX,GAAI,mCACJC,YAAa,qBACbC,eAAgB,iHAElBwX,uBAAwB,CACtB1X,GAAI,uCACJC,YAAa,0BACbC,eAAgB,gCAIpB,SAASyX,GAAcjS,GACrB,IAAIkS,EAAMlS,EAAKmO,QAAQ,MAAO,KAE9B,OADA+D,EAAMA,EAAIC,OACHD,CACT,CAIO,SAASE,GAAqBrV,EAAiBN,EAAmC+Q,GACvF,IAAI6E,EAAK,GAeT,OAdI7E,GACFA,EAAOzN,QAAOf,GAAMA,EAAGxD,MAAM2W,OAAOpT,OAAS,GAAKC,EAAGM,YAAYP,OAAS,IAAGoB,SAAQnB,IAC/EA,EAAGxD,QACL6W,GAAM,GAAGrT,EAAGxD,YAEdwD,EAAGM,YAAYa,SAAQmS,IACrB,MAAMC,EAAYD,EAAEnQ,YAAc1F,EAAU6V,EAAEnQ,aAAe,GAC7DkQ,GAAMC,EAAE9C,UAAY,IAAGgD,EAAAA,GAAAA,GAAe,EAAG,EAAGF,EAAE9C,UAAW8C,EAAE7C,gBAAkB,GAC7E4C,GAAME,EAAY,GAAIxV,EAAmBhC,cAAc,CAAET,GAAI,eAAeiY,EAAUjD,uBAAyB,CAAE/M,UAAW+P,EAAE9C,eAAkB,GAChJ6C,GAAM,GAAGC,EAAE9W,SAAS,IAEtB6W,GAAM,IAAI,IAGVA,EAAGhS,SAAS,MACPgS,EAAG/R,UAAU,EAAG+R,EAAGtT,OAAS,GAE9BsT,CACT,CAEO,SAASI,GAAkB/V,EAAgCO,GAAoD,IAADyV,EACnH,IAAKzV,EAAO,MAAO,GACnB,MAAM0V,EAAO,CAAC,CAAE7Q,KAAM,UAAWtG,MAAO,GAAI8D,YAAa,KACzD,IAAIsT,EAAU,GACVC,EAAyE,QAAjCH,EAAGC,EAAKnS,MAAKsF,GAAiB,KAAZA,EAAEtK,eAAa,IAAAkX,OAAA,EAA9BA,EAAgCpT,YAC/E,GAAY,MAARuT,EAAc,MAAM,IAAIC,MAAM,wCAClC,GAAI7V,EAAO,CACIA,EAAM6C,MAAM,MAAMG,IAAIgS,IAAelS,QAAO+F,GAAKA,EAAE/G,OAAS,IACpEoB,SAAQH,IACX,GAAIA,EAAKjB,OAAS,EAIhB,GAAIiB,EAAKK,SAAS,MAAQL,EAAKjB,OAAS,EAAG,CAAC,IAADgU,EAIzC,GAHAH,EAAU5S,EAAKM,UAAU,EAAGN,EAAKjB,OAAS,GAC1C4T,EAAKtT,KAAK,CAAEyC,MAAMX,EAAAA,EAAAA,IAAQyR,GAAUpX,MAAOoX,EAAStT,YAAa,KACjEuT,EAA0C,QAAtCE,EAAGJ,EAAKnS,MAAKsF,GAAKA,EAAEtK,QAAUoX,WAAQ,IAAAG,OAAA,EAAnCA,EAAqCzT,YAChC,MAARuT,EAAc,MAAM,IAAIC,MAAM,kDACpC,KAAO,CACL,GAAY,MAARD,EAAc,MAAM,IAAIC,MAAM,wCAClCD,EAAKxT,KAAK2T,GAAgBtW,EAAQsD,GACpC,CACF,GAEJ,CACA,OAAO2S,CACT,CAIO,SAASM,GAAoBlW,EAAiBN,EAAmC+Q,GACtF,IAAI6E,EAAK,GAST,OARI7E,GACFA,EAAOrN,SAAQmS,IACb,MAAMC,EAAYD,EAAEnQ,YAAc1F,EAAU6V,EAAEnQ,aAAe,GAC7DkQ,GAAMC,EAAE9C,UAAY,IAAGgD,EAAAA,GAAAA,GAAe,EAAG,EAAGF,EAAE9C,UAAW8C,EAAE7C,gBAAkB,GAC7E4C,GAAME,EAAY,GAAIxV,EAAmBhC,cAAc,CAAET,GAAI,eAAeiY,EAAUjD,uBAAyB,CAAE/M,UAAW+P,EAAE9C,eAAkB,GAChJ6C,GAAM,GAAGC,EAAE9W,SAAS,IAGjB6W,EAAG/R,UAAU,EAAG+R,EAAGtT,OAAS,EACrC,CAEO,SAASmU,GAAiBxW,EAAgCO,GAC/D,IAAKA,EAAO,MAAO,GACnB,MAAM4V,EAAyB,GAO/B,OANmB5V,EAAM6C,MAAM,MAAMG,IAAIgS,IAAelS,QAAO+F,GAAKA,EAAE/G,OAAS,IAAM+G,EAAEqN,WAAW,OACvFhT,SAAQ4D,IACbA,EAAGhF,OAAS,GACd8T,EAAKxT,KAAK2T,GAAgBtW,EAAQqH,GACpC,IAEK8O,CACT,CAKA,MAAMO,GAAO1Y,IAAA,IAAG2Y,QAAQ,KAAEC,IAAoB5Y,EAAA,OAAKU,EAAAA,EAAAA,KAAA,OAAAD,SAAMmY,GAAW,EAiG9DC,GAAyDC,IAAmD,IAAlD,OAAEC,EAAM,OAAEC,GAAkCF,EAC1G,MAAMG,GAAkBlU,EAAAA,EAAAA,UAAQ,KAAMmU,OANiBC,EAMUvB,IAC7D,MAAMwB,GAAStB,EAAAA,GAAAA,GAAe,EAAG,EAAGF,EAAE9C,UAAW8C,EAAE7C,aACnD,MAAO,IAAK6C,EAAGvQ,SAAU+R,EAAQ,EAFoBL,EANmExT,KAAIjB,IAAE,IAC/HA,EACHM,YAAaN,EAAGM,YAAYW,IAAI4T,OAFPD,IAA8BC,CASnD,GAAE,CAACJ,IAEDM,GAAkBtU,EAAAA,EAAAA,UAAQ,IAAMiU,EAAOzT,KAAIqS,IAC/C,MAAMwB,GAAStB,EAAAA,GAAAA,GAAe,EAAG,EAAGF,EAAE9C,UAAW8C,EAAE7C,aACnD,MAAO,IAAK6C,EAAGvQ,SAAU+R,EAAQ,KAC/B,CAACL,IAEL,OACErY,EAAAA,EAAAA,KAAA,OAAKP,UAAU,iBAAgBM,UAC7BC,EAAAA,EAAAA,KAAA,OAAKP,UAAU,gBAAeM,UAC5BC,EAAAA,EAAAA,KAAA,WAASP,UAAU,oBAAmBM,UACpCF,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBM,SAAA,EAChCC,EAAAA,EAAAA,KAAC4Y,GAAAA,EAAU,CAACnQ,WAAYkQ,KACxB3Y,EAAAA,EAAAA,KAACiG,GAAAA,EAAgB,CAAC1C,OAAQgV,EAAiBrS,cAAeoS,EAAO3U,OAAS,YAI5E,EAIV,GAjHiE8H,IACM,IADL,OAC9DoN,EAAM,QAAEC,EAAO,gBAAEC,GAA4CtN,EAC/D,MAAM9J,GAAO/B,EAAAA,EAAAA,MACP,cAAED,GAAkBgC,EAEpBqX,GAAWpI,EAAAA,EAAAA,OAEV+E,EAAWsD,IAAgBpY,EAAAA,EAAAA,UAAiB,MAEnDC,EAAAA,EAAAA,YAAU,KACJkY,EAASE,SAASjU,SAAS,IAAIkU,GAAAA,OACjCF,EAAa,IACf,GACC,CAACD,EAASE,WAEb,MAAMpS,GAAsBM,EAAAA,EAAAA,YAAWC,EAAAA,GAEjC+R,GAAkBpY,EAAAA,EAAAA,cAAY,CAACsB,EAA0B+W,KACnC,KAAf,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAAUR,KAAwC,OAAd,OAANvW,QAAM,IAANA,OAAM,EAANA,EAASuW,KAClCtW,EAAAA,EAAAA,IAAiBZ,EAAY,OAANW,QAAM,IAANA,OAAM,EAANA,EAASuW,IACvB,OAAPQ,QAAO,IAAPA,GAAAA,EAAUP,IAAiC,OAAf,OAANxW,QAAM,IAANA,OAAM,EAANA,EAASwW,KACjCvW,EAAAA,EAAAA,IAAiBZ,EAAY,OAANW,QAAM,IAANA,OAAM,EAANA,EAASwW,SAEvC,GAED,CAACnX,IAEJ,OACE3B,EAAAA,EAAAA,KAAC6M,EAAAA,GAAO,CAACC,aAAc,CAAExK,QAAQ,EAAM+W,SAAS,EAAMC,eAAe,GAAOvZ,SACzEgN,IAAA,IAAC,OAAEzK,EAAM,QAAE+W,EAAO,cAAEC,GAAevM,EAAA,OAClClN,EAAAA,EAAAA,MAAC0Z,GAAU,CACPra,GAAW,cACXsW,OAAY,CAAC7V,EAAcZ,GAASwX,mBAAoB5W,EAAcZ,GAAS2X,mBAE/Ef,UAAaA,EACbC,SAAaqD,EAEb3W,OAAY8W,EAAgB9W,EAAQ+W,GACpC5D,SAAY,CAAC9V,EAAcZ,GAASyX,qBAAsB7W,EAAcZ,GAAS4X,qBAAqB5W,SAAA,EACxGC,EAAAA,EAAAA,KAACkS,EAAAA,EAAc,CAACC,WAAY,CAAC2G,GAAS/Y,SACnCqS,IACCpS,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAY4X,EACZ7D,KAAY,EACZxU,YAAeb,EAAcZ,GAAS0X,yBACtCvV,SAAYoY,IAAkBlH,EAAO0G,QAG7C9Y,EAAAA,EAAAA,KAAA,OAAKP,UAAU,aAAYM,UACzBC,EAAAA,EAAAA,KAACyZ,GAAsB,CACnBxY,KAAS6X,EACT9D,KAAQ,EACRxU,YAAeb,EAAcZ,GAAS6X,wBACtC8C,QAAS,CACT,IAAK,CACHC,aAAcC,GAASb,EAAgBa,GACvCC,UAAW7B,GACX8B,OAAQhM,GAAQA,EAAKoK,YAI7BlY,EAAAA,EAAAA,KAACkS,EAAAA,EAAc,CAACC,WAAY,CAAC0G,EAAQC,GAAS/Y,SAC3CqS,IACCpS,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACiB,YAAd4V,IACC3V,EAAAA,EAAAA,KAACmY,GAAkB,CACfE,OAAUhB,GAAkBvQ,EAAoBxF,OAAQ8Q,EAAOyG,IAC/DP,OAAUR,GAAiBhR,EAAoBxF,OAAS8Q,EAAO0G,YAKhE,GAEP,E,eCnNd,MAAM/Z,IAAWC,EAAAA,EAAAA,IAAe,CAC9B+a,iBAAkB,CAChB7a,GAAI,iCACJC,YAAa,mBACbC,eAAgB,cAElB4a,mBAAoB,CAClB9a,GAAI,4BACJC,YAAa,qBACbC,eAAgB,sHAElB6a,uBAAwB,CACtB/a,GAAI,gCACJC,YAAa,yBACbC,eAAgB,+DAmEd8a,GAAuDnN,IAA2D,IAA1D,WAAEtJ,EAAU,YAAES,GAAsC6I,EAChH,MAAMwL,GAAkBlU,EAAAA,EAAAA,UAAQ,KAAMmU,OANiBC,EAMevB,IACpE,MAAMwB,GAAStB,EAAAA,GAAAA,GAAe,EAAG,EAAGF,EAAE9C,UAAW8C,EAAE7C,aACnD,MAAO,IAAK6C,EAAGvQ,SAAU+R,EAAQ,EAFsBxU,EANmEW,KAAIjB,IAAE,IAC/HA,EACHM,YAAaN,EAAGM,YAAYW,IAAI4T,OAFPD,IAA8BC,CASrD,GAAE,CAACvU,IAECiW,EAAoB1W,EAAWc,SAAS,OAE9C,OACEvE,EAAAA,EAAAA,KAAA,OAAKP,UAAU,iBAAgBM,UAC7BC,EAAAA,EAAAA,KAAA,OAAKP,UAAU,gBAAeM,UAC5BC,EAAAA,EAAAA,KAAA,WAASP,UAAWS,KAAW,mBAAoB,CAAE,mBAAoBia,IAAqBpa,UAC5FC,EAAAA,EAAAA,KAAA,OAAKP,UAAU,mBAAkBM,UAC/BC,EAAAA,EAAAA,KAACoa,GAAAA,EAAU,CAAC3W,WAAYA,EAAYS,YAAaqU,WAInD,EAIV,GAhF8CjZ,IACf,IADgB,KAC3C2B,GAAqB3B,EACvB,MAAMqC,GAAO/B,EAAAA,EAAAA,MACP,cAAED,GAAkBgC,EAEpBmF,GAAsBM,EAAAA,EAAAA,YAAWC,EAAAA,GAEjC2R,GAAWpI,EAAAA,EAAAA,OACV+E,EAAWsD,IAAgBpY,EAAAA,EAAAA,UAAiB,KAQnD,OANAC,EAAAA,EAAAA,YAAU,KACJkY,EAASE,SAASjU,SAAS,IAAIkU,GAAAA,OACjCF,EAAa,IACf,GACC,CAACD,EAASE,YAGXlZ,EAAAA,EAAAA,KAAC6M,EAAAA,GAAO,CAACC,aAAc,CAAExK,QAAQ,GAAOvC,SACrC0L,IAAA,IAAC,OAAEnJ,GAAQmJ,EAAA,OACV5L,EAAAA,EAAAA,MAAC0Z,GAAU,CACPra,GAAY,aACZsW,OAAa,CAAC7V,EAAcZ,GAASgb,mBAErCpE,UAAaA,EACbC,SAAaqD,EAEb3W,QAAaC,EAAAA,EAAAA,IAAiBZ,EAAY,OAANW,QAAM,IAANA,OAAM,EAANA,EAASrB,IAC7CwU,SAAa,CAAC9V,EAAcZ,GAASib,qBAAqBja,SAAA,EAC5DC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAQA,EACR+T,KAAY,EACZxU,YAAeb,EAAcZ,GAASkb,2BAC1Cja,EAAAA,EAAAA,KAACkS,EAAAA,EAAc,CAACC,WAAY,CAAClR,EAAM,qBAAqBlB,SACrDqS,IAAM,IAAAiI,EAAA,OACLra,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACiB,YAAd4V,IACC3V,EAAAA,EAAAA,KAACka,GAAiB,CACdzW,WAA0B,QAAhB4W,EAAIjI,EAAOnR,UAAK,IAAAoZ,EAAAA,EAAI,GAC9BnW,YAAemT,GAAkBvQ,EAAoBxF,OAAQ8Q,EAAOkI,sBAEzE,MAGI,GAEP,EC3DRvb,IAAWC,EAAAA,EAAAA,IAAe,CAC9Bub,WAAY,CACVrb,GAAI,2BACJC,YAAa,oBACbC,eAAgB,eAElBob,aAAc,CACZtb,GAAI,6BACJC,YAAa,eACbC,eAAgB,UAElBqb,cAAe,CACbvb,GAAI,8BACJC,YAAa,gBACbC,eAAgB,WAElBsb,cAAe,CACbxb,GAAI,8BACJC,YAAa,gBACbC,eAAgB,WAElBub,WAAY,CACVzb,GAAI,2BACJC,YAAa,aACbC,eAAgB,QAElBwb,gBAAiB,CACf1b,GAAI,gCACJC,YAAa,kBACbC,eAAgB,mBAElByb,mBAAoB,CAClB3b,GAAI,mCACJC,YAAa,qBACbC,eAAgB,sBAElB0b,eAAgB,CACd5b,GAAI,+BACJC,YAAa,iBACbC,eAAgB,YAElB2b,kBAAmB,CACjB7b,GAAI,kCACJC,YAAa,2BACbC,eAAgB,sBAElB4b,wBAAyB,CACvB9b,GAAI,wCACJC,YAAa,iCACbC,eAAgB,qCAElB6b,aAAc,CACZ/b,GAAI,6BACJC,YAAa,sBACbC,eAAgB,UAElB8b,eAAgB,CACdhc,GAAI,+BACJC,YAAa,wBACbC,eAAgB,sCAElB+b,aAAc,CACZjc,GAAI,6BACJC,YAAa,0BACbC,eAAgB,mBAuLpB,GArK+CE,IAES,IAFR,OAC5C8b,EAAM,MAAE1P,EAAK,SAAEsN,EAAQ,gBACvBD,EAAe,SAAElN,GAA6BvM,EAChD,MAAMqC,GAAO/B,EAAAA,EAAAA,MACP,cAAED,GAAkBgC,EAEpBmF,GAAsBM,EAAAA,EAAAA,YAAWC,EAAAA,GAEjCgU,GAAwBvK,EAAAA,EAAAA,QAAgC,MACxDwK,GAAeta,EAAAA,EAAAA,cAAaua,IAA2B,IAADC,EAE1D,OAAiC,QAAjCA,EAAIH,EAAsBtM,eAAO,IAAAyM,GAA7BA,EAA+BtO,gBAAwBuO,QAEpD5P,EAAS,IACX0P,EACHjV,iBAAkB+Q,GAAkBvQ,EAAoBxF,OAAQia,EAAKjB,mBACrE/R,WAAmBuP,GAAiBhR,EAAoBxF,OAAQia,EAAKG,cACrE,GACD,CAAC5U,EAAoBxF,OAAQ+Z,EAAsBtM,UAEhDuK,GAAsDjV,EAAAA,EAAAA,UAAQ,IAC9DqH,IAAU0P,EACL,CACL1U,KAAM,GACNiV,QAAQ,EACRC,SAAU,GAGLR,EACH,IACCA,EACHd,kBAAmBtD,GAAqBrV,EAAMmF,EAAoBzF,UAAW+Z,EAAO9U,kBACpFoV,YAAoB7D,GAAoBlW,EAAMmF,EAAoBzF,UAAW+Z,EAAO7S,kBAChFzG,GAEL,CAACsZ,EAAQ1P,EAAOsN,EAAUrX,EAAKkI,SAIpC,OACE7J,EAAAA,EAAAA,KAAC6b,EAAAA,GAAS,CACNvC,cAAiBA,EACjBzN,SAAYyP,EACZxO,aAAgB,CAAEnB,YAAY,GAC9B0B,OAAU5B,IAAA,IAAC,KAAE8P,EAAMD,aAAcQ,GAAcrQ,EAAA,OAC7C5L,EAAAA,EAAAA,MAACwP,EAAAA,EAAI,CAAC5P,UAAU,cAAcoM,SAAUiQ,EAAa/b,SAAA,EACnDC,EAAAA,EAAAA,KAAC+b,EAAAA,EAAqB,CAACR,KAAMA,EAAMjC,cAAeA,KAClDtZ,EAAAA,EAAAA,KAAC2M,EAAkB,CAACpN,IAAK8b,KACzBxb,EAAAA,EAAAA,MAACmc,EAAAA,EAAS,CAAAjc,SAAA,EACRC,EAAAA,EAAAA,KAACic,EAAAA,EAAY,KACbpc,EAAAA,EAAAA,MAAC4R,EAAAA,EAAG,CAAA1R,SAAA,EACFF,EAAAA,EAAAA,MAAC6R,EAAAA,EAAG,CAACxS,GAAG,cAAcgd,GAAI,EAAGtK,GAAI,EAAE7R,SAAA,EACjCC,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAY,QACZiH,MAAavI,EAAcZ,GAASwb,YACpC4B,UAAa,IACbjb,UAAQ,SAKhBlB,EAAAA,EAAAA,KAAC0Q,GAAkB,KAEnB7Q,EAAAA,EAAAA,MAAC4R,EAAAA,EAAG,CAAA1R,SAAA,EACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAW,WACXmL,KAAW,SACXlE,MAAYvI,EAAcZ,GAAS+b,gBACnCuB,IAAY,EACZC,IAAY,IACZpb,UAAQ,OAEdlB,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACiI,EAAAA,EAAU,CACPhH,KAAY,SACZiH,MAAavI,EAAcZ,GAASoc,sBAI5Ctb,EAAAA,EAAAA,MAAC4R,EAAAA,EAAG,CAAA1R,SAAA,EACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACuc,EAAqB,CAClBtb,KAAW,SACXiH,MAAYvI,EAAcZ,GAASyb,mBAEzCxa,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACwc,EAAsB,CACnBvb,KAAW,UACXiH,MAAYvI,EAAcZ,GAAS0b,oBAEzCza,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAACyc,EAAmB,CAChBxb,KAAW,UACXiH,MAAYvI,EAAcZ,GAAS2b,oBAEzC1a,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAAC0c,EAAgB,CACbzb,KAAW,OACXiH,MAAYvI,EAAcZ,GAAS4b,oBAI3C9a,EAAAA,EAAAA,MAAC4R,EAAAA,EAAG,CAAA1R,SAAA,EACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAW,WACXmL,KAAW,SACXlE,MAAYvI,EAAcZ,GAAS6b,iBACnCyB,IAAY,EACZC,IAAY,SAElBtc,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAIyK,GAAI,EAAErc,UACjBC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAW,WACXmL,KAAW,SACXlE,MAAYvI,EAAcZ,GAAS8b,4BAG3C7a,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAW,SACXiH,MAAYvI,EAAcZ,GAASkc,cACnC/L,QAAYvP,EAAcZ,GAASmc,0BAK7Crb,EAAAA,EAAAA,MAAC6R,EAAAA,EAAG,CAACxS,GAAG,SAASgd,GAAI,EAAGtK,GAAI,EAAE7R,SAAA,EAC5BC,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAACwZ,EAAAA,EAAO,CACJvY,KAAW,OACX+T,KAAY,EACZ9M,MAAYvI,EAAcZ,GAASgc,mBACnCva,YAAeb,EAAcZ,GAASic,gCAG9Chb,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAAC2c,GAAmB,CAChB9D,OAAW,oBACXC,QAAW,cACXC,gBAAmBA,SAG3B/Y,EAAAA,EAAAA,KAACyR,EAAAA,EAAG,CAAA1R,UACFC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAG,CAACC,GAAI,GAAG5R,UACVC,EAAAA,EAAAA,KAAC4c,GAAY,CACT3b,KAAa,oBAIrBjB,EAAAA,EAAAA,KAACsN,EAAiB,eAInB,GACR,E,gDClQT,MA0CA,GA1C4BuP,KAAO,IAADC,EAChC,MAAMC,GAASC,EAAAA,EAAAA,KACTvP,GAAMC,EAAAA,EAAAA,MAENuP,EAA0B,QAAhBH,EAAGC,EAAO3B,cAAM,IAAA0B,EAAAA,EAAI,GAC9BpR,EAAuB,WAAfuR,EAERC,GAAe1T,EAAAA,EAAAA,KAAaC,GAAqBA,EAAM0T,UACvDxP,GAAcnE,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMmE,aACtDwN,EAASzN,EAAYG,MACrB,QAAEsP,GAAYzP,EAAYnL,KAC1B6a,GAAiBvM,EAAAA,EAAAA,SAAgB,GAEjCwM,EAAOJ,EAAapP,KACpByP,EAAkB,MAARD,IAAiB5R,GAAU4R,EAAKpe,MAAa,OAANkc,QAAM,IAANA,OAAM,EAANA,EAAQoC,SAAUF,EAAKG,OAASC,GAAAA,EAASC,OAASL,EAAKG,OAASC,GAAAA,EAASE,QAEhI9c,EAAAA,EAAAA,YAAU,KACI,MAARwc,GAAgBF,IAAYS,GAAAA,EAAaC,WAAuB,MAAV1C,GAAmBmC,GAC3E9P,GAAIzE,EAAAA,EAAAA,IAAa,WAAWiU,KAC9B,GACC,CAACK,EAAM3P,EAAa4P,KAEvBzc,EAAAA,EAAAA,YAAU,KACY,OAAV,OAANsa,QAAM,IAANA,OAAM,EAANA,EAAQ1U,OAAgB0W,IAAYS,GAAAA,EAAaC,WAAapS,GAAS2R,EAAetO,SACxFgP,YAAW,KACTtQ,GAAIzE,EAAAA,EAAAA,IAAa,gBAAgBoS,EAAO1U,QAAQ,GAC/C,KAEL2W,EAAetO,SAAU,CAAI,GAC5B,CAACqO,IAEJ,MAAMY,EAAarQ,EAAYnL,KAQ/B,OANA1B,EAAAA,EAAAA,YAAU,KACkC,MAAtCsJ,GAAAA,EAAM4T,EAAWvb,MAAO,WAC1BgL,GAAIzE,EAAAA,EAAAA,IAAa,aACnB,GACC,CAACgV,EAAWvb,QAER,IAAI,ECcb,GAnDiCwb,KAAO,IAADnB,EACrC,MAAM,cAAEnd,IAAkBC,EAAAA,EAAAA,KACpBb,GAAWC,EAAAA,EAAAA,IAAe,CAC9Bkf,WAAY,CACVhf,GAAI,yBACJC,YAAa,2BACbC,eAAgB,gBAId6J,GAAWC,EAAAA,EAAAA,MACX6T,GAASC,EAAAA,EAAAA,KACThE,GAAWpI,EAAAA,EAAAA,MAEXmI,EAAkBoF,EAAAA,GAClB7C,GAAeta,EAAAA,EAAAA,cAAYod,SAAwBD,EAAAA,GAAuBlV,EAAUxC,IAAO,IAE3FwW,EAA0B,QAAhBH,EAAGC,EAAO3B,cAAM,IAAA0B,EAAAA,EAAI,GAC9BpR,EAAuB,WAAfuR,EAER7B,GAAS5R,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMmE,WAAWE,OAkBlE,OAfAhN,EAAAA,EAAAA,YAAU,KACJmc,GAEAhU,EADEyC,EACOyS,EAAAA,KAEAA,EAAAA,GAAuBlB,GAEpC,GACC,CAACA,EAAYjE,EAASrI,OAGzB7P,EAAAA,EAAAA,YAAU,IAAM,KACdmI,EAASkV,EAAAA,KAA0B,GAClC,KAGDte,EAAAA,EAAAA,MAACwe,GAAAA,EAAW,CAACje,MAAOsL,EAAQ/L,EAAcZ,EAASmf,YAAoB,OAAN9C,QAAM,IAANA,OAAM,EAANA,EAAQhb,MAAML,SAAA,EAC7EC,EAAAA,EAAAA,KAAC6c,GAAS,KACV7c,EAAAA,EAAAA,KAACse,GAAU,CACPlD,OAAUA,EACV1P,MAAUA,EACVsN,SAAYA,EAASrI,IACrBoI,gBAAmBA,EACnBlN,SAAYyP,MACJ,C,qKChDX,MAAMiD,EAAQtB,GAAwBhU,IAC3CA,EAAS,KAAKuV,EAAAA,EAAAA,IAAcC,EAAAA,EAAmBC,EAAAA,EAAOC,cACtDC,EAAAA,EAAAA,MACGC,IAAI,GAAGC,EAAAA,EAAW1D,SAAS6B,MAC3B8B,MAAKjI,IACJ,MAAMsE,GAAS4D,EAAAA,EAAAA,IAASlI,EAAImI,MAC5BhW,EAAS,KACJuV,EAAAA,EAAAA,IACDC,EAAAA,EACAC,EAAAA,EAAOQ,aAETC,QAAS/D,IAGXnS,GAASmW,EAAAA,EAAAA,IAAiBhE,GAAe,IAE1CiE,OAAMC,GAAOrW,GAASlI,EAAAA,EAAAA,IAAYue,EAAKb,EAAAA,KAAoB,EAGnD5Q,EAAWuN,GAA6BnS,IACnDA,EAAS,KAAKuV,EAAAA,EAAAA,IAAcC,EAAAA,EAAmBC,EAAAA,EAAOa,SAAUJ,QAAS/D,GAAS,EAGvEoE,EAAQA,IAAOvW,IAC1BA,EAAS,KAAKuV,EAAAA,EAAAA,IAAcC,EAAAA,EAAmBC,EAAAA,EAAOe,QAAS,EAGpDC,EAAOtB,MAAOnV,EAAuBxC,KAChD,MAAM6L,EAA+B,kBAAf7L,EAAK6L,MAAsB7L,EAAK6L,WAAQxQ,EAExD4J,GAASjF,EAAKvH,GACdygB,EAAIjU,GACJkT,EAAAA,EAAAA,MAAUgB,KAAKd,EAAAA,EAAW1D,SAC1BwD,EAAAA,EAAAA,MAAUiB,MAAM,GAAGf,EAAAA,EAAW1D,SAAS3U,EAAKC,SAElDuC,EAAS,KACJuV,EAAAA,EAAAA,IACDC,EAAAA,EACA/S,EAAQgT,EAAAA,EAAOoB,aAAepB,EAAAA,EAAOqB,gBAIzC,MAAMC,GAAMC,EAAAA,EAAAA,IAAgBxZ,GAC5B,OAAOkZ,EAAEO,KAAKF,GACXjB,MAAKjI,IACJ,GAAIxE,EACF,OAAOsM,EAAAA,EAAAA,MACJiB,MAAM,GAAGf,EAAAA,EAAW1D,SAAStE,EAAImI,KAAKvY,SACtCyZ,OAAO,QAAS7N,GAChByM,MAAKqB,IACJ,MAAMhF,GAAS4D,EAAAA,EAAAA,IAASoB,EAASnB,MACjChW,EAAS,KACJuV,EAAAA,EAAAA,IACDC,EAAAA,EACA/S,EAAQgT,EAAAA,EAAO2B,eAAiB3B,EAAAA,EAAO4B,gBAEzCC,MAAO9Z,EAAKvH,GACZigB,QAAS/D,IAGXnS,GAASmW,EAAAA,EAAAA,IAAiBhE,GAAe,IAE1CiE,OAAMC,IAAOkB,EAAAA,EAAAA,IAAgBvX,EAAUqW,EAAKb,EAAAA,KACxC,CACL,MAAMrD,GAAS4D,EAAAA,EAAAA,IAASlI,EAAImI,MAC5BhW,EAAS,KACJuV,EAAAA,EAAAA,IACDC,EAAAA,EACA/S,EAAQgT,EAAAA,EAAO2B,eAAiB3B,EAAAA,EAAO4B,gBAEzCC,MAAO7U,EAAS,KAAejF,EAAKvH,GACpCigB,QAAS/D,IAGXnS,GAASmW,EAAAA,EAAAA,IAAiBhE,GAC5B,CAGF,OADAnS,EAASwX,EAAyBha,GAAMuY,EAAAA,EAAAA,IAASlI,EAAImI,QAC9C,IAAI,IAEZI,OAAMC,IAAOkB,EAAAA,EAAAA,IAAgBvX,EAAUqW,EAAKb,EAAAA,IAAmB,EAIvDgC,EAA2BA,CAACC,EAAmBC,IAA8B1X,IAAmB,IAAD2X,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACtF,QAAhBP,EAAAF,EAAUU,cAAM,IAAAR,OAAA,EAAhBA,EAAkB1hB,OAAyB,QAAvB2hB,EAAKF,EAAYS,cAAM,IAAAP,OAAA,EAAlBA,EAAoB3hB,KAC/C+J,EAAS,KAAKuV,EAAAA,EAAAA,IAAc6C,EAAAA,GAAe3C,EAAAA,EAAOe,UAE/B,QAAjBqB,EAAAJ,EAAUY,eAAO,IAAAR,OAAA,EAAjBA,EAAmB5hB,OAA0B,QAAxB6hB,EAAKJ,EAAYW,eAAO,IAAAP,OAAA,EAAnBA,EAAqB7hB,KACjD+J,EAAS,KAAKuV,EAAAA,EAAAA,IAAc+C,EAAAA,GAAgB7C,EAAAA,EAAOe,UAEhC,QAAjBuB,EAAAN,EAAUnX,eAAO,IAAAyX,OAAA,EAAjBA,EAAmBnc,KAAI+E,GAAKA,EAAE1K,KAAI4I,KAAK,SAA4B,QAAxBmZ,EAAKN,EAAYpX,eAAO,IAAA0X,OAAA,EAAnBA,EAAqBpc,KAAI+E,GAAKA,EAAE1K,KAAI4I,KAAK,OAC3FmB,EAAS,KAAKuV,EAAAA,EAAAA,IAAcgD,EAAAA,GAAe9C,EAAAA,EAAOe,UAElC,QAAdyB,EAAAR,EAAUjW,YAAI,IAAAyW,OAAA,EAAdA,EAAgBrc,KAAI6F,GAAKA,EAAExL,KAAI4I,KAAK,SAAyB,QAArBqZ,EAAKR,EAAYlW,YAAI,IAAA0W,OAAA,EAAhBA,EAAkBtc,KAAI6F,GAAKA,EAAExL,KAAI4I,KAAK,OACrFmB,EAAS,KAAKuV,EAAAA,EAAAA,IAAciD,EAAAA,GAAY/C,EAAAA,EAAOe,QACjD,EAGW1G,EAAmB2I,IAA6D9C,EAAAA,EAAAA,MACxFC,IAAI,GAAGC,EAAAA,EAAW1D,8CAA8CsG,KAChE3C,MAAKjI,GAAOA,EAAImI,KAAK0C,QAAQ9c,KAAKuW,IAAiB,CAAQzK,IAAKyK,EAAO1U,KAAMzF,KAAMma,EAAO1U,KAAMwR,KAAMkD,EAAOhb,YAC7Gif,OAAM,IAAM,I,uICzGV,MAAMtU,EAAeA,IAAO9B,IACjCA,EAAS,KAAKuV,EAAAA,EAAAA,IAAc6C,EAAAA,GAAe3C,EAAAA,EAAOC,cAElDC,EAAAA,EAAAA,MACGC,IAAIC,EAAAA,EAAWsC,QACfrC,MAAKjI,IACJ7N,EAAS,KACJuV,EAAAA,EAAAA,IACD6C,EAAAA,GACA3C,EAAAA,EAAOQ,aAETC,QAASrI,EAAImI,KAAK0C,QACbhd,QAAQid,GAA6C,MAApBA,EAAUxhB,QAC3CyE,IAAIgd,EAAAA,KACT,IAEHxC,OAAMC,GAAOrW,GAASlI,EAAAA,EAAAA,IAAYue,EAAK+B,EAAAA,MAAgB,EAG/ClW,EAAgBA,IAAOlC,IAClCA,EAAS,KAAKuV,EAAAA,EAAAA,IAAc+C,EAAAA,GAAgB7C,EAAAA,EAAOC,cAEnDC,EAAAA,EAAAA,MACGC,IAAIC,EAAAA,EAAWwC,SACfvC,MAAKjI,IACJ7N,EAAS,KACJuV,EAAAA,EAAAA,IACD+C,EAAAA,GACA7C,EAAAA,EAAOQ,aAETC,QAASrI,EAAImI,KAAK0C,QACbhd,QAAQmd,GAAgD,MAArBA,EAAW1hB,QAC9CyE,IAAIkd,EAAAA,KACT,IAEH1C,OAAMC,GAAOrW,GAASlI,EAAAA,EAAAA,IAAYue,EAAKiC,EAAAA,MAAiB,EAGhDlY,EAAeA,IAAOJ,IACjCA,EAAS,KAAKuV,EAAAA,EAAAA,IAAcgD,EAAAA,GAAe9C,EAAAA,EAAOC,cAElDC,EAAAA,EAAAA,MACGC,IAAIC,EAAAA,EAAW7U,QACf8U,MAAKjI,IACJ7N,EAAS,KACJuV,EAAAA,EAAAA,IACDgD,EAAAA,GACA9C,EAAAA,EAAOQ,aAETC,QAASrI,EAAImI,KAAK0C,QAAQ9c,IAAImd,EAAAA,KAC9B,IAEH3C,OAAMC,GAAOrW,GAASlI,EAAAA,EAAAA,IAAYue,EAAKiC,EAAAA,MAAiB,EAGhD/W,EAAYA,IAAOvB,IAC9BA,EAAS,KAAKuV,EAAAA,EAAAA,IAAciD,EAAAA,GAAY/C,EAAAA,EAAOC,cAE/CC,EAAAA,EAAAA,MACGC,IAAIC,EAAAA,EAAWjU,KACfkU,MAAKjI,IACJ7N,EAAS,KACJuV,EAAAA,EAAAA,IACDiD,EAAAA,GACA/C,EAAAA,EAAOQ,aAETC,QAASrI,EAAImI,KAAK0C,QAAQ9c,IAAIod,EAAAA,KAC9B,IAEH5C,OAAMC,GAAOrW,GAASlI,EAAAA,EAAAA,IAAYue,EAAKmC,EAAAA,MAAa,C","sources":["common/components/HeaderLink.tsx","common/components/Image.tsx","common/components/ReInput/ReSelect.tsx","common/components/WidthHeightRatio.tsx","common/hooks/useSingle.ts","recipe/components/Directions.tsx","recipe/components/IngredientGroups.tsx","recipe/components/Ingredients.tsx","recipe/components/SubRecipes.tsx","recipe_form/containers/SeasonListContainer.tsx","common/components/ReInput/ReCreatableSelect.tsx","recipe_form/containers/TagListContainer.tsx","recipe_form/containers/CourseSelectContainer.tsx","recipe_form/containers/CuisineSelectContainer.tsx","recipe_form/containers/RecipeFormToolbar.tsx","common/components/Input/FileSelect.tsx","common/components/ReInput/ReFileSelect.tsx","recipe_form/components/RecipeFormImageRow.tsx","recipe_form/utilts/parseIngredient.ts","common/components/Input/TextareaAutocomplete.tsx","common/components/ReInput/ReTextareaAutocomplete.tsx","recipe_form/components/TabbedView.tsx","recipe_form/components/IngredientGroupsBox.tsx","recipe_form/components/DirectionBox.tsx","recipe_form/components/RecipeForm.tsx","recipe_form/components/EditGuard.tsx","recipe_form/containers/RecipeFormPage.tsx","recipe_form/store/actions.ts","recipe_groups/store/actions.ts"],"sourcesContent":["import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport '../css/header_link.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport PageScroller from './PageScroller';\n\nconst messages = defineMessages({\n  permalink_tooltip: {\n    id: 'permalink.tooltip',\n    description: 'Tooltip when hovering a permalink.',\n    defaultMessage: 'Permalink to this headline',\n  },\n});\n\nexport interface IHeaderLinkProps extends CommonProps {\n  linkFor: string;\n}\n\nconst HeaderLink = forwardRef<HTMLAnchorElement, IHeaderLinkProps>(({ linkFor, className, ...rest }: IHeaderLinkProps, ref) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <Link\n          className = {classNames('headerlink', className)}\n          to = {`#${linkFor}`}\n          title = {formatMessage(messages.permalink_tooltip)}\n          {...rest}\n          ref = {ref}>\n        ¶\n      </Link>\n      <PageScroller uriFragmentId={linkFor} />\n    </>\n  );\n});\n\nexport default HeaderLink;\n","import { forwardRef, useCallback, useEffect, useState } from 'react';\n\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IImageProps extends CommonProps {\n  src: string;\n  placeholder?: string;\n  alt?: string;\n\n  onError?: () => void;\n}\n\nconst Image = forwardRef<HTMLImageElement, IImageProps>(({\n    src, placeholder, alt, onError, ...rest }: IImageProps, ref) => {\n  const [hasError, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setError(false);\n  }, [src]);\n\n  const handleError = useCallback(() => {\n    setError(true);\n    onError?.();\n  }, [onError]);\n\n  return (\n    <img\n        src = {hasError ? placeholder : src}\n        alt = {alt}\n        onError = {handleError}\n\n        {...rest}\n        ref = {ref} />\n  );\n});\n\nexport default Image;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useCallback } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { ISelectProps, Select, SelectBase } from '../Input/Select';\n\nexport interface IReSelectProps extends ISelectProps {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n\n  parser?: (newValue: any | null) => any | undefined;\n  formatter?: (newValue: Array<any> | any) => any;\n  isMulti?: boolean;\n}\n\nconst ReSelect = forwardRef<SelectBase, IReSelectProps>(({\n    name, required, format, parse,\n    formatter, parser, isMulti,\n    onChange, onFocus, onBlur, ...rest }: IReSelectProps, ref) => {\n  const intl = useIntl();\n\n  const formatValue = useCallback((value: Array<any> | any | undefined) => {\n    if (value == null) {\n      return isMulti ? [] : undefined;\n    } else {\n      return formatter?.(value);\n    }\n  }, [formatter, isMulti]);\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <Select\n            {...rest}\n            required = {required}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            isMulti  = {isMulti}\n\n            name     = {fprops.input.name}\n            value    = {formatValue(fprops.input.value)}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string | undefined) => { fprops.input.onChange(parser?.(value)); onChange?.(namee, parser?.(value)); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReSelect;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/width_height_ratio.css';\nimport { CommonProps } from '../types/OverridableComponent';\n\nexport interface IWidthHeightRatioProps extends CommonProps {\n  height: number;\n  width:  number;\n  children: React.ReactNode;\n}\n\nconst WidthHeightRatio = forwardRef<HTMLDivElement, IWidthHeightRatioProps>(({\n  height, width, children,\n  className, style, ...rest }: IWidthHeightRatioProps, ref) => (\n    <div\n        style = {{\n          paddingTop: `${height}%`,\n          width:      `${width}%`,\n          position:   'relative',\n          ...style,\n        }}\n        className={classNames('width-height-ratio', className)}\n        {...rest}\n        ref = {ref}>\n      {children}\n    </div>\n));\n\nexport default WidthHeightRatio;\n","import { useEffect } from 'react';\n\nexport default function useSingle(getFunction: () => void, obj: unknown) {\n  useEffect(() => {\n    if (obj == null) {\n      getFunction();\n    }\n  }, [getFunction, obj]);\n}\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport '../css/directions.css';\n\nimport HeaderLink from '../../common/components/HeaderLink';\nimport { IngredientGroup } from '../store/RecipeTypes';\nimport IngredientGroups from './IngredientGroups';\nimport { slugify } from '../../common/utility';\n\nexport interface IDirectionsProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\ninterface DirectionWithIngredients {\n  heading?:     string;\n  directions:   Array<string>;\n  ingredients?: Array<IngredientGroup>;\n}\n\ntype DirectionsWithIngredients = Array<DirectionWithIngredients>;\n\nfunction getIngredientsForStep(heading: string, unassignedIngredients: Array<IngredientGroup>): IngredientGroup | undefined {\n  const igIndex = unassignedIngredients.findIndex(ig => ig.title === heading);\n  if (igIndex >= 0) {\n    const igs = unassignedIngredients.splice(igIndex, 1);\n    return igs[0];\n  }\n\n  return undefined;\n}\n\nfunction pushDirections(groups: DirectionsWithIngredients, heading: string, directions: Array<string>, unassignedIngredients: Array<IngredientGroup>) {\n  if (directions.length === 0) return;\n\n  const ig = getIngredientsForStep(heading, unassignedIngredients);\n\n  groups.push({\n    heading:     heading,\n    directions:  directions,\n    ingredients: ig ? [ig] : undefined,\n  });\n}\n\nfunction assignRemainingIngredients(groups: DirectionsWithIngredients, unassignedIngredients: Array<IngredientGroup>) {\n  if (unassignedIngredients.length === 0) return;\n\n  const untitledStep = groups.find(di => !di.heading);\n  if (untitledStep) {\n    if (untitledStep.ingredients) {\n      untitledStep.ingredients.push(...unassignedIngredients);\n    } else {\n      untitledStep.ingredients = [...unassignedIngredients];\n    }\n  } else {\n    groups.unshift({ directions: [], ingredients: [...unassignedIngredients] });\n  }\n\n  unassignedIngredients.splice(0, unassignedIngredients.length);\n}\n\nfunction parseDirections(directionsString: string, ingredients: Array<IngredientGroup>): DirectionsWithIngredients {\n  const unassignedIngredients = [...ingredients];\n  const isMultiStep = directionsString.includes('\\n');\n\n  const directionsGroups: DirectionsWithIngredients = [];\n  let directions: Array<string> = [];\n  let nextHeading = '';\n\n  if (isMultiStep) {\n    directionsString.split('\\n').filter(line => line.length > 0).map(line => line.trimEnd()).forEach(direction => {\n      if (direction.endsWith(':')) {\n        pushDirections(directionsGroups, nextHeading, directions, unassignedIngredients);\n        nextHeading = direction.substring(0, direction.length - 1);\n        directions = [];\n      } else {\n        directions.push(direction);\n      }\n    });\n\n    pushDirections(directionsGroups, nextHeading, directions, unassignedIngredients);\n  } else {\n    pushDirections(directionsGroups, '', [directionsString], unassignedIngredients);\n  }\n\n  assignRemainingIngredients(directionsGroups, unassignedIngredients);\n\n  return directionsGroups;\n}\n\nfunction formatDirections(directions: DirectionsWithIngredients) {\n  return directions\n    .filter(di => di.directions.length > 0 || (di.ingredients != null && di.ingredients.length > 0))\n    .map(di => {\n      let directionsJsx: React.ReactElement | undefined;\n      if (di.directions.length === 1) {\n        directionsJsx = (\n          <div className='direction'>\n            {di.directions[0]}\n          </div>\n        );\n      } else if (di.directions.length > 1) {\n        directionsJsx = (\n          <ol className='directions'>\n            {di.directions.map(direction => (\n              <li className='direction' key={direction}>\n                {direction}\n              </li>\n            ))}\n          </ol>\n        );\n      }\n\n      const isDefaultGroup = !di.heading;\n      const headingSlug = slugify(di.heading ?? '');\n\n      return (\n        <div key={headingSlug} className={classNames('subgroup', headingSlug)}>\n          {/* eslint-disable-next-line react/jsx-one-expression-per-line */}\n          {di.heading && (\n            <h3 id={`direction-${headingSlug}`}>\n              {`${di.heading}:`}\n              <HeaderLink linkFor={`direction-${headingSlug}`} />\n            </h3>\n          )}\n          {di.ingredients && di.ingredients.length > 0 && (\n            <div className='ingredients'>\n              <IngredientGroups groups={di.ingredients} hasSubrecipes={isDefaultGroup && directions.length > 1} />\n            </div>\n          )}\n          {directionsJsx}\n        </div>\n      );\n    });\n}\n\nconst Directions: React.FC<IDirectionsProps> = ({ directions: directionsString, ingredients }: IDirectionsProps) => {\n  const directionGroups: DirectionsWithIngredients = useMemo(() => parseDirections(directionsString, ingredients), [directionsString, ingredients]);\n  const directionsGroupsJsx: Array<React.ReactNode> = useMemo(() => formatDirections(directionGroups), [directionGroups]);\n\n  return (\n    <>\n      {directionsGroupsJsx}\n    </>\n  );\n};\n\nexport default Directions;\n","import '../css/ingredients_panel.css';\n\nimport { IngredientGroup } from '../store/RecipeTypes';\n\nimport Ingredients from './Ingredients';\n\nexport interface IIngredientGroupsProps {\n  groups: Array<IngredientGroup> | undefined;\n  hasSubrecipes: boolean;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nconst IngredientGroups: React.FC<IIngredientGroupsProps> = ({\n    groups, hasSubrecipes, withHeaderLink, selectable }: IIngredientGroupsProps) => {\n  const showCaptions = hasSubrecipes || (groups != null && groups.length > 1);\n  const ingredientGroups = groups?.filter(group => group.title || group.ingredients.length > 0).map(group => (\n    <div className='subgroup ingredient-group' key={group.slug || group.title}>\n      <Ingredients\n          showCaptions = {showCaptions}\n          group = {group}\n          withHeaderLink = {withHeaderLink}\n          data = {group.ingredients}\n          selectable = {selectable}\n          />\n    </div>\n  ));\n\n  return (\n    <>{ingredientGroups}</>\n  );\n};\n\nexport default IngredientGroups;\n","import { useContext } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\n\nimport '../css/ingredients.css';\n\nimport MeasurementContext, { IMeasurementContext } from '../../common/context/MeasurementContext';\nimport HeaderLink from '../../common/components/HeaderLink';\nimport { optionallyFormatMessage, slugify } from '../../common/utility';\nimport { Ingredient, IngredientGroup } from '../store/RecipeTypes';\nimport ReCheckbox from '../../common/components/ReInput/ReCheckbox';\n\nconst messages = defineMessages({\n  quantity: {\n    id: 'ingredients.table.quantity',\n    description: 'Ingredients table quantity header',\n    defaultMessage: 'Quantity',\n  },\n  ingredient: {\n    id: 'ingredients.table.ingredient',\n    description: 'Ingredients table ingredient header',\n    defaultMessage: 'Ingredient',\n  },\n});\n\nexport interface IIngredientsProps {\n  showCaptions: boolean;\n  group: IngredientGroup;\n  data: Array<Ingredient>;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nexport function formatMeasurement(intl: IntlShape, measurementsContext: IMeasurementContext, measurement: string | undefined, quantity: string | undefined): string {\n  let measurementString: string;\n  if (measurement != null) {\n    const measurementParserId = measurementsContext.formatter[measurementsContext.parser[measurement]];\n    if (measurementParserId != null) {\n      measurementString = optionallyFormatMessage(intl, 'measurement.', measurementParserId, { itemCount: quantity });\n    } else {\n      measurementString = measurement;\n    }\n  } else {\n    measurementString = '';\n  }\n\n  return measurementString;\n}\n\nconst Ingredients: React.FC<IIngredientsProps> = ({\n    showCaptions, group, data, withHeaderLink, selectable }: IIngredientsProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n  const caption = showCaptions && group.title ? group.title : undefined;\n  const captionSlug = slugify(caption ?? '');\n\n  const ingredients = data.map((ingredient, index) => {\n    const quantityS   = ingredient.quantity;\n    const msrmtString = formatMeasurement(intl, measurementsContext, ingredient.measurement, ingredient.quantity);\n    const titleString = ingredient.title;\n    const fullString  = [quantityS, msrmtString, titleString].join(' ');\n    const renderQuantity: boolean = Boolean(quantityS) || Boolean(msrmtString);\n\n    return (\n      <tr className='ingredient' key={(ingredient.id ?? index).toString()}>\n        {selectable && (\n          <td className='selection'>\n            <ReCheckbox\n                label = {fullString}\n                className = 'label-sr-only'\n                name  = {`ingredients.${group.slug}.cb-${ingredient.id}`} />\n          </td>\n        )}\n        <td className='quantity'>\n          {renderQuantity && (\n            <span>\n              {quantityS}\n              {quantityS != null && quantityS.length > 0 && msrmtString.length > 0 && ' '}\n              {msrmtString}\n            </span>\n          )}\n        </td>\n        <td className='ingredient'>\n          <span>\n            {titleString}\n          </span>\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <Table striped size='sm' className='table ingredients-table'>\n      {caption && (\n        <caption id={withHeaderLink ? `ingredients-${captionSlug}` : undefined} className='subheading h3'>\n          {`${caption}:`}\n          {withHeaderLink && <HeaderLink linkFor={`ingredients-${captionSlug}`} />}\n        </caption>\n      )}\n      <thead className='hideme'>\n        <tr>\n          {selectable && (\n            <th><span>Selection</span></th>\n          )}\n          <th><span>{formatMessage(messages.quantity)}</span></th>\n          <th><span>{formatMessage(messages.ingredient)}</span></th>\n        </tr>\n      </thead>\n      <tbody>\n        {ingredients}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default Ingredients;\n","import classNames from 'classnames';\nimport { Table } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport HeaderLink from '../../common/components/HeaderLink';\nimport ReCheckbox from '../../common/components/ReInput/ReCheckbox';\nimport { getRoutePath, optionallyFormatMessage } from '../../common/utility';\nimport { SubRecipe } from '../store/RecipeTypes';\n\nconst messages = defineMessages({\n  subrecipes: {\n    id: 'subrecipes.subrecipes heading',\n    description: 'Subrecipes header',\n    defaultMessage: 'Subrecipes',\n  },\n  quantity: {\n    id: 'subrecipes.table.quantity',\n    description: 'Subrecipes table quantity header',\n    defaultMessage: 'Quantity',\n  },\n  subrecipe: {\n    id: 'subrecipes.table.subrecipe',\n    description: 'Subrecipes table ingredient header',\n    defaultMessage: 'Subrecipe',\n  },\n});\n\nexport interface ISubRecipesProps {\n  subRecipes: Array<SubRecipe> | undefined;\n  withHeaderLink?: boolean;\n  selectable?: boolean;\n}\n\nconst SubRecipes: React.FC<ISubRecipesProps> = ({\n    subRecipes, withHeaderLink, selectable }: ISubRecipesProps) => {\n  const intl = useIntl();\n\n  const showQuantityCol = subRecipes == null || subRecipes.filter(sr => (\n    (sr.quantity != null && sr.quantity.length > 0 && sr.quantity !== '0')\n      || (sr.measurement != null && sr.measurement.length > 0)\n  )).length > 0;\n\n  const subRecipesList = subRecipes?.map((subRecipe, index) => {\n    const quantityS   = subRecipe.quantity != null && subRecipe.quantity.length > 0 && subRecipe.quantity !== '0' ? subRecipe.quantity : '';\n    const msrmtString = subRecipe.measurement != null ? optionallyFormatMessage(intl, 'measurement.', subRecipe.measurement, { itemCount: subRecipe.quantity }) : '';\n    const titleString = subRecipe.title;\n    const fullString  = [quantityS, msrmtString, titleString].join(' ');\n\n    return (\n      <tr className='ingredient' key={(subRecipe.child_recipe_id ?? index).toString()}>\n        {selectable && (\n          <td className='selection'>\n            <ReCheckbox\n                label = {fullString}\n                className = 'label-sr-only'\n                name  = {`subrecipes.cb-${subRecipe.child_recipe_id}`} />\n          </td>\n        )}\n        {showQuantityCol && (\n          <td className='quantity first-col'>\n            <span>\n              {quantityS}\n              {quantityS != null && quantityS.length > 0 && msrmtString.length > 0 && ' '}\n              {msrmtString}\n            </span>\n          </td>\n        )}\n        <td className={classNames('ingredient last-col', { 'first-col': showQuantityCol })}>\n          <span>\n            <Link to={getRoutePath(`/recipe/${subRecipe.slug}`)} className='title'>{titleString}</Link>\n          </span>\n        </td>\n      </tr>\n    );\n  });\n\n  if (subRecipesList == null || subRecipesList.length === 0) return null;\n\n  return (\n    <div className='subgroup ingredient-group'>\n      <Table striped size='sm' className='table ingredients-table'>\n        <caption id={withHeaderLink ? 'subrecipes' : undefined} className='subheading h3'>\n          {`${intl.formatMessage(messages.subrecipes)}:`}\n          {withHeaderLink && <HeaderLink linkFor='subrecipes' />}\n        </caption>\n        <thead className='hideme'>\n          <tr>\n            {selectable && (\n              <th><span>Selection</span></th>\n            )}\n            {showQuantityCol && <th><span>{intl.formatMessage(messages.quantity)}</span></th>}\n            <th><span>{intl.formatMessage(messages.subrecipe)}</span></th>\n          </tr>\n        </thead>\n        <tbody>\n          {subRecipesList}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SubRecipes;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage } from '../../common/utility';\nimport { Season } from '../../recipe/store/RecipeTypes';\nimport ReSelect from '../../common/components/ReInput/ReSelect';\nimport useCrash from '../../common/hooks/useCrash';\n\nexport interface ISeasonListContainerProps {\n  name: string;\n  label: string;\n}\n\nconst SeasonListContainer: React.FC<ISeasonListContainerProps> = ({\n    name, label }: ISeasonListContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const crash = useCrash();\n\n  const fetchSeasons = useCallback(() => { dispatch(RecipeGroupActions.fetchSeasons()); }, []);\n  const seasons = useSelector((state: RootState) => state.recipeGroups.seasons.items);\n  useSingle(fetchSeasons, seasons);\n\n  const data = useMemo(() => seasons\n      ?.filter(s => s.title.length > 0)\n      .map(s => ({ value: s.title, label: optionallyFormatMessage(intl, 'season.', s.title) })), [seasons, intl.locale]);\n\n  const parser = useCallback((newValue: Array<string> | undefined): Array<Season> | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      const selected: Array<Season> = [];\n      newValue.forEach(v => {\n        const season = (seasons ?? []).find(s => s.title === v);\n        if (!season) {\n          crash(`Selected season does not exist! season=${JSON.stringify(season)}, seasons=${JSON.stringify(seasons ?? [])}`);\n        } else {\n          selected.push(season);\n        }\n      });\n\n      return selected;\n    }\n  }, [seasons]);\n\n  const formatter = useCallback((value: Array<Season> | Season): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        isMulti\n        />\n  );\n};\n\nexport default SeasonListContainer;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useCallback } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { CreatableSelect, ICreatableSelectValues } from '../Input/Select';\n\nexport interface IReCreatableSelectProps extends Omit<ICreatableSelectValues, 'value' | 'onChange'> {\n  parser: (newValue: any | null) => any | undefined;\n  formatter: (newValue: Array<any> | any) => any;\n}\n\nconst ReCreatableSelect = forwardRef<CreatableSelect, IReCreatableSelectProps>(({\n    parser, formatter,\n    name, required, isMulti,\n    onFocus, onBlur, ...rest }: IReCreatableSelectProps, ref) => {\n  const intl = useIntl();\n\n  const formatValue = useCallback((value: Array<any> | any | undefined) => {\n    if (value == null) {\n      return isMulti ? [] : undefined;\n    } else {\n      return formatter(value);\n    }\n  }, [formatter, isMulti]);\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]}>\n      {fprops => (\n        <CreatableSelect\n            {...rest}\n            isMulti  = {isMulti}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {formatValue(fprops.input.value)}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(_name: string, value: boolean) => { fprops.input.onChange(parser(value)); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReCreatableSelect;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Tag } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReInput/ReCreatableSelect';\n\nexport interface ITagListContainerProps {\n  name: string;\n  label: string;\n}\n\nconst TagListContainer: React.FC<ITagListContainerProps> = ({\n    name, label }: ITagListContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchTags = useCallback(() => { dispatch(RecipeGroupActions.fetchTags()); }, []);\n  const tags = useSelector((state: RootState) => state.recipeGroups.tags.items);\n  useSingle(fetchTags, tags);\n\n  const data = useMemo(() => tags\n      ?.filter(t => t.title.length > 0)\n      .map(t => ({ value: t.title, label: optionallyFormatMessage(intl, 'tag.', t.title) }))\n      .sort(sortByLabel), [tags, intl.locale]);\n\n  const parser = useCallback((newValue: Array<string> | undefined): Array<Tag> | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      const selected: Array<Tag> = [];\n      newValue.forEach(v => {\n        const tag = tags?.find(t => t.title === v);\n        selected.push(tag ?? { title: v } as Tag);\n      });\n\n      return selected;\n    }\n  }, [tags]);\n\n  const formatter = useCallback((value: Array<Tag> | Tag): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        isMulti\n        />\n  );\n};\n\nexport default TagListContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Course } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReInput/ReCreatableSelect';\n\nexport interface ICourseSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CourseSelectContainer: React.FC<ICourseSelectContainerProps> = ({\n    name, label }: ICourseSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCourses = useCallback(() => { dispatch(RecipeGroupActions.fetchCourses()); }, []);\n  const courses = useSelector((state: RootState) => state.recipeGroups.courses.items);\n  useSingle(fetchCourses, courses);\n\n  const data = useMemo(() => courses\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'course.', c.title) }))\n      .sort(sortByLabel), [courses, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Course | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return courses?.find(c => c.title === newValue) ?? { title: newValue } as Course;\n    }\n  }, [courses]);\n\n  const formatter = useCallback((value: Array<Course> | Course): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CourseSelectContainer;\n","import { useCallback, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport * as _ from 'lodash-es';\n\nimport * as RecipeGroupActions from '../../recipe_groups/store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport useSingle from '../../common/hooks/useSingle';\nimport { optionallyFormatMessage, sortByLabel } from '../../common/utility';\nimport { Cuisine } from '../../recipe/store/RecipeTypes';\nimport ReCreatableSelect from '../../common/components/ReInput/ReCreatableSelect';\n\nexport interface ICuisineSelectContainerProps {\n  name: string;\n  label: string;\n}\n\nconst CuisineSelectContainer: React.FC<ICuisineSelectContainerProps> = ({\n    name, label }: ICuisineSelectContainerProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const fetchCuisines = useCallback(() => { dispatch(RecipeGroupActions.fetchCuisines()); }, []);\n  const cuisines = useSelector((state: RootState) => state.recipeGroups.cuisines.items);\n  useSingle(fetchCuisines, cuisines);\n\n  const data = useMemo(() => cuisines\n      ?.map(c => ({ value: c.title, label: optionallyFormatMessage(intl, 'cuisine.', c.title) }))\n      .sort(sortByLabel), [cuisines, intl.locale]);\n\n  const parser = useCallback((newValue: string | undefined): Cuisine | undefined => {\n    if (newValue == null) {\n      return undefined;\n    } else {\n      return cuisines?.find(c => c.title === newValue) ?? { title: newValue ?? '' } as Cuisine;\n    }\n  }, [cuisines]);\n\n  const formatter = useCallback((value: Array<Cuisine> | Cuisine): Array<string> | string => (\n    _.castArray(value).map(v => v.title)\n  ), []);\n\n  return (\n    <ReCreatableSelect\n        name = {name}\n        label = {label}\n        data = {data}\n        parser = {parser}\n        formatter = {formatter}\n        />\n  );\n};\n\nexport default CuisineSelectContainer;\n","import { Component, forwardRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { FormSpy } from 'react-final-form';\n\nimport { RootState } from '../../app/Store';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { getRoutePath, isDemoMode } from '../../common/utility';\nimport LoadingSpinner from '../../common/components/LoadingSpinner';\nimport { Toolbar } from '../../common/components/Toolbar';\nimport * as RecipeActions from '../../recipe/store/RecipeActions';\n\nconst messages = defineMessages({\n  submit: {\n    id: 'recipe.create.submit',\n    description: 'Submit recipe button',\n    defaultMessage: 'Submit recipe',\n  },\n  view: {\n    id: 'recipe.create.view',\n    description: 'View recipe button',\n    defaultMessage: 'View',\n  },\n});\n\nconst RecipeFormToolbar: React.FC = () => {\n  const nav = useNavigate();\n  const dispatch = useDispatch();\n\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n\n  const preload = useCallback(() => { if (recipeState.item) dispatch(RecipeActions.preload(recipeState.item)); }, [recipeState.item]);\n  const onLink = useCallback(() => { nav(getRoutePath(`/recipe/${recipeState.item?.slug}`)); }, [recipeState.item?.slug]);\n\n  const id = recipeState.item?.id;\n  const isNew = id == null || id === 0;\n\n  return (\n    <FormSpy subscription={{ pristine: true, submitting: true }}>\n      {({ pristine, submitting }) => (\n        <SubmitViewButton isNew={isNew} pristine={pristine} submitting={submitting} onSubmit={preload} onLink={onLink} />\n      )}\n    </FormSpy>\n  );\n};\n\ninterface ISubmitViewButtonProps {\n  isNew:      boolean;\n  submitting: boolean;\n  pristine:   boolean;\n\n  onSubmit: () => void;\n  onLink: () => void;\n}\n\nconst SubmitViewButton = forwardRef<HTMLButtonElement, ISubmitViewButtonProps>(({\n    isNew, submitting, pristine, onSubmit, onLink, ...rest }: ISubmitViewButtonProps, ref) => {\n  const { formatMessage } = useIntl();\n\n  const asView = !isNew && pristine;\n\n  const onClick = useCallback(() => {\n    // This seems stupid, and it feels stupid.\n    // But we do not want to replace the button,\n    // to prevent losing focus.\n    if (asView) {\n      onLink();\n    } else {\n      onSubmit();\n    }\n  }, [asView, onLink, onSubmit]);\n\n  return (\n    <Toolbar position='end'>\n      <Button\n          variant  = 'primary'\n          type     = {asView ? 'button' : 'submit'}\n          // Do not disable on submitting, to prevent losing focus\n          disabled = {(isDemoMode() && !asView)}\n          onClick = {onClick}\n          accessKey = {asView ? undefined : 's'}\n          {...rest}\n          className = {submitting ? 'disabled' : undefined}\n          ref = {ref}>\n        <span style={{ visibility: submitting ? 'hidden' : 'initial' }}>{formatMessage(asView ? messages.view : messages.submit)}</span>\n        {submitting && <LoadingSpinner style={{ position: 'absolute', color: 'var(--primaryText)' }} />}\n      </Button>\n    </Toolbar>\n  );\n});\n\nexport const SubmittingObserver = forwardRef<SubmittingObserverClass>((_props, ref) => (\n  <FormSpy subscription={{ pristine: true, submitting: true }}>\n    {({ submitting }) => (\n      <SubmittingObserverClass submitting={submitting} ref={ref} />\n    )}\n  </FormSpy>\n));\n\ninterface ISubmittingObserverClassProps {\n  submitting: boolean;\n}\n\nexport class SubmittingObserverClass extends Component<ISubmittingObserverClassProps> {\n  // eslint-disable-next-line react/no-unused-class-component-methods\n  getSubmitting(): boolean {\n    return this.props.submitting;\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default RecipeFormToolbar;\n","import { createRef } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\n\nimport '../../css/button.css';\n\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\n\nexport interface IFileSelectProps extends IBaseInputComponentProps {\n  accept?: string;\n  value?:  string;\n\n  onChange?: (name: string, newValue: File | undefined) => void;\n}\n\nclass FileSelect extends BaseInputComponent<IFileSelectProps> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  clearValue() { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.value = '';\n    }\n  }\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onChange?.(event.target.name, event?.target.files?.[0]);\n  };\n\n  handleClear = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.props.name, '' as unknown as File);\n      this.clearValue();\n    }\n  };\n\n  render() {\n    // console.log(`[FileSelect] name=${this.props.name}`);\n\n    const { accept, value, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip, readOnly, disabled,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <Form.Control\n                type   = 'file'\n                name   = {name}\n                accept = {accept}\n                readOnly = {readOnly}\n                disabled = {disabled}\n                onChange = {this.handleChange}\n                {...rest}\n                ref = {this.ref} />\n            {!readOnly && !disabled && onChange\n                && (value || (this.ref.current != null && this.ref.current.value)) && (\n                  <InputGroup.Text className='input-adornment-end button'>\n                    <Button onClick={this.handleClear} variant='outline-primary' style={{ borderRadius: 0 }}><Icon icon='x' variant='light' size='2x' /></Button>\n                  </InputGroup.Text>\n            )}\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n\nexport default FileSelect;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport FileSelect, { IFileSelectProps } from '../Input/FileSelect';\n\nexport type IReFileSelectProps = Omit<IFileSelectProps, 'value'>;\n\nconst identity = (value: any) => (value);\n\nconst ReFileSelect = forwardRef<FileSelect, IReFileSelectProps>(({\n    name, required,\n    onChange, onFocus, onBlur,\n    ...rest }: IReFileSelectProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} parse={identity}>\n      {fprops => (\n        <FileSelect\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value ?? false}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: File | undefined) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReFileSelect;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Col, Row } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { getRecipeImage, getRecipeImagePlaceholder } from '../../common/utility';\nimport WidthHeightRatio from '../../common/components/WidthHeightRatio';\nimport Image from '../../common/components/Image';\nimport ReFileSelect from '../../common/components/ReInput/ReFileSelect';\nimport FieldSpyValues from '../../common/components/ReInput/FieldSpyValues';\n\nconst messages = defineMessages({\n  photo_label: {\n    id: 'recipe.create.photo_label',\n    description: 'Photo label',\n    defaultMessage: 'Photo',\n  },\n});\n\nconst RecipeFormImageRow: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const { key } = useLocation();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const photoInputRef = useRef<any>(null);\n  const [imageUrl, setImageUrl] = useState<string | undefined>(undefined);\n  const IMAGE_PLACEHOLDER = useMemo(() => getRecipeImagePlaceholder(), []);\n\n  useEffect(() => {\n    if (photoInputRef.current) {\n      photoInputRef.current.clearValue();\n    }\n    setImageUrl(undefined);\n  }, [key]);\n\n  const handleImageChange = useCallback((_name: string, newValue: File | undefined) => {\n    setImageUrl(newValue ? URL.createObjectURL(newValue) : '');\n  }, []);\n\n  const getDisplayImage = useCallback((recipePhoto: string | undefined) => {\n    if (imageUrl != null) {\n      return imageUrl.length > 0 ? imageUrl : getRecipeImagePlaceholder();\n    } else {\n      return getRecipeImage(recipePhoto || IMAGE_PLACEHOLDER);\n    }\n  }, [imageUrl, IMAGE_PLACEHOLDER]);\n\n  return (\n    <>\n      <Row>\n        <Col xs={12} lg={11} xl={10} xxl={9} style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n          <WidthHeightRatio height={66.67} width={100}>\n            <FieldSpyValues fieldNames={['photo']}>\n              {values => (\n                <Image\n                    src   = {getDisplayImage(values.photo)}\n                    alt   = ''\n                    style = {{ objectFit: 'contain' }} />\n              )}\n            </FieldSpyValues>\n          </WidthHeightRatio>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={12}>\n          <ReFileSelect\n              name     = 'photo'\n              label    = {formatMessage(messages.photo_label)}\n              accept   = 'image/*'\n              onChange = {handleImageChange}\n              ref = {photoInputRef} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RecipeFormImageRow;\n","import { IngredientInput } from '../../recipe/store/RecipeTypes';\nimport { GCD } from '../../recipe/utilts/gcd';\n\n/**\n * Parses a string-number to a float,\n * normalizing the thousands and decimal-separators.\n *\n * @param str - \"1.500,50\"\n *\n * @returns 1500.50\n */\nfunction parseFloatIgnoreLocale(str: string): number {\n  let normalized;\n  const ixDot = str.indexOf('.');\n  const ixComma = str.indexOf(',');\n\n  if (ixDot === -1 && ixComma === -1) {\n    normalized = str;\n  } else if (ixDot === -1) {\n    normalized = str.replace(',', '.');\n  } else if (ixComma === -1) {\n    normalized = str;\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (ixDot < ixComma) {\n      normalized = str.replace('.', '');\n      normalized = normalized.replace(',', '.');\n    } else {\n      normalized = str.replace(',', '');\n    }\n  }\n\n  return parseFloat(normalized);\n}\n\n/**\n * Given an array of text values,\n * Convert them into a single Fraction\n *\n * Examples:\n *   * 1 1/2 sugar -> 3/2\n *   * 2 3 inch pieces ginger -> 6/1\n *   * 1/2 3 inch pieces ginger -> 3/2\n *   * 3 1/2 inch pieces ginger -> 7/2\n *   * 1/2 1/2 inch pieces ginger -> 1/4\n *\n * @param textArray - Quantities-Array.\n *\n * @returns - Merged quantities to a single fraction.\n */\nconst buildFraction = (textArray: Array<string>) => {\n  const { numerator, denominator } = textArray.reduce((fraction, text) => {\n    const split = text.split('/');\n    let n = parseFloatIgnoreLocale(split[0]);\n    let d = split.length > 1 ? parseFloatIgnoreLocale(split[1]) : 1;\n\n    // If this is the first run of the func\n    // return the n/d,\n    if (fraction.denominator === 0) { return { numerator: n, denominator: d }; }\n\n    // Multiple if the next number is an int\n    if (split.length === 1) {\n      n *= fraction.numerator;\n      d *= fraction.denominator;\n      const gcd = GCD(n, d);\n      return { numerator: n / gcd, denominator: d / gcd };\n    }\n\n    // If given a fraction, add them.\n    n = fraction.numerator * d + fraction.denominator * n;\n    d *= fraction.denominator;\n    const gcd = GCD(n, d);\n    return { numerator: n / gcd, denominator: d / gcd };\n  }, { numerator: 0, denominator: 0 });\n\n  return {\n    numerator,\n    denominator,\n  };\n};\n\nconst numberSplit = (number: string): { amount: string, rest: string } => {\n  let last = -1;\n  const length = number.length;\n  const numbers = ['1','2','3','4','5','6','7','8','9','0'];\n\n  numbers.forEach(n => {\n    if (number.lastIndexOf(n) > last) {\n      last = number.lastIndexOf(n);\n    }\n  });\n  if (length === (last + 1)) {\n    return { amount: number, rest: '' };\n  }\n  return { amount: number.substring(0, last + 1), rest: number.substring(last + 1, length) };\n};\n\nconst parseFraction = (fraction: string): Array<string> => {\n  const normalized = fraction.normalize('NFKD');\n  return normalized.split('\\u2044'); // '⁄'\n};\n\n/**\n * Given an Ingredient as text, parse it into an Ingredient object.\n *\n * @param parser - Mapping localized measurement -> normalized measurement.\n * @param line - The actual line of text to parse.\n */\nexport default (parser: Record<string, string>, line: string): IngredientInput => {\n  // Just some examples...\n  // 1g salt -> 1 | gram | salt\n  // 1 cup orange juice -> 1 | cup | orange juice\n  // 1 1/2cup wheat flour -> 1 1/2 | cup | wheat flour\n  // 2 chicken wings -> 2 | | chicken wings\n\n  // Basically, iterate the line.\n  // Accept up to 2 numbers for quantities.\n  // The first non number may be the measurement.\n  // Anything else is the title. Stop parsing.\n\n  // Split the line by the space char\n  const tags = line.split(' ');\n\n  const quantities: Array<string> = [];\n  let measurement: string | undefined;\n\n  let noMoreQuantities = false;\n  let ix;\n  for (ix = 0; ix < tags.length - 1; ++ix) {\n    const nextTag = tags[ix];\n    if (nextTag.length === 0) continue;\n\n    const vulgarFraction = !noMoreQuantities ? parseFraction(nextTag[0]) : [];\n\n    if (!noMoreQuantities && !Number.isNaN(parseInt(nextTag[0]))) {\n      // The next element starts with a number.\n      // Parse the number.\n      // The element may be followed by text, e. g. 1kg. Parse this as measurement, if it is some.\n      let { amount, rest } = numberSplit(nextTag); // eslint-disable-line prefer-const\n      quantities.push(amount);\n      if (rest) {\n        // The first char of the rest could be a fraction, e. g. 1¾cup flour.\n        const restFrac = parseFraction(rest[0]);\n        if (restFrac[1]) {\n          noMoreQuantities = true;\n          quantities.push(`${restFrac[0]}/${restFrac[1]}`);\n          if (rest.length > 1) {\n            rest = rest.substring(1);\n          } else {\n            continue;\n          }\n        }\n        measurement = parser[rest.toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n          break;\n        }\n      }\n      if (quantities.length >= 2) {\n        noMoreQuantities = true;\n      }\n    } else if (!noMoreQuantities && vulgarFraction[1]) {\n      // Parse the fraction.\n      // After the fraction, no more quantities may follow up, but the measurement.\n      // E. g. ¾cup flour.\n      noMoreQuantities = true;\n      quantities.push(`${vulgarFraction[0]}/${vulgarFraction[1]}`);\n      if (nextTag.length > 1) {\n        measurement = parser[nextTag.substring(1).toLocaleLowerCase()];\n        if (measurement) {\n          ++ix;\n        }\n        break;\n      }\n    } else {\n      // No number and no fraction, that is plain old text, maybe a measurement.\n      noMoreQuantities = true;\n      measurement = parser[nextTag.toLocaleLowerCase()];\n      if (measurement) {\n        ++ix;\n      }\n      break;\n    }\n  }\n\n  const { numerator, denominator } = buildFraction(quantities);\n  const title = tags.slice(ix).join(' ');\n  return { numerator: numerator === 0 ? undefined : numerator, denominator: denominator, measurement: measurement, title: title };\n};\n","import { createRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport ReactTextareaAutocomplete, { TriggerType } from '@webscopeio/react-textarea-autocomplete';\n\nimport '../../css/input.css';\nimport '../../css/textarea_autocomplete.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\nimport Icon from '../Icon';\n\nexport type AutocompleteListItem = {\n  name: string;\n  char: string;\n}\n\nexport interface ITextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem> extends IBaseInputComponentProps {\n  value?: string;\n  rows?: number;\n  placeholder?: string;\n\n  trigger: TriggerType<TListItem>;\n\n  onChange?: (name: string, newValue: string) => void;\n}\n\nconst Loading = () => <div className='loading'>Loading...</div>;\n\nexport default class TextareaAutocomplete<TListItem extends string | object = AutocompleteListItem> extends BaseInputComponent<ITextareaAutocompleteProps<TListItem>> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ref = createRef<any>();\n\n  focus(): boolean { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.ref != null && this.ref.current) {\n      this.ref.current.focus();\n      return true;\n    }\n    return false;\n  }\n\n  getLabel(): React.ReactNode | undefined { // eslint-disable-line react/no-unused-class-component-methods\n    if (this.props.label == null) {\n      return null;\n    } else if (this.props.tooltip) {\n      return (\n        <>\n          {this.props.label}\n          &nbsp;\n          <Icon icon='info-circle' className='tooltip-icon' />\n        </>\n      );\n    } else {\n      return this.props.label;\n    }\n  }\n\n  render() {\n    // console.log(`[TextareaAutocomplete] name=${this.props.name}, value=${this.props.value}`);\n\n    const { value = '', rows = 4, onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        name, style, tooltip,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <InputGroup>\n            <ReactTextareaAutocomplete<TListItem>\n                name     = {name}\n                value    = {value}\n                rows     = {rows}\n\n                loadingComponent = {Loading}\n                className = 'form-control'\n                movePopupAsYouType\n\n                onChange  = {this.handleChange}\n\n                {...rest}\n                ref = {this.ref}\n              />\n          </InputGroup>\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef, useMemo } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { composeValidators, formatValidation, requiredValidator, ValueValidatorFunction } from '../../store/Validation';\nimport TextareaAutocomplete, { AutocompleteListItem, ITextareaAutocompleteProps } from '../Input/TextareaAutocomplete';\n\nexport interface IReTextareaAutocompleteProps<TListItem extends string | object = AutocompleteListItem>\n    extends ITextareaAutocompleteProps<TListItem> {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n}\n\nconst ReTextareaAutocomplete = forwardRef<any, IReTextareaAutocompleteProps>(({\n    name, required, format, parse,\n    onChange, onFocus, onBlur, ...rest }: IReTextareaAutocompleteProps, ref) => {\n  const intl = useIntl();\n\n  const validators = useMemo(() => {\n    const vals: Array<ValueValidatorFunction> = [];\n\n    if (required) {\n      vals.push(requiredValidator);\n    }\n\n    return composeValidators(...vals);\n  }, [required]);\n\n  return (\n    <Field name={name} validate={validators} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <TextareaAutocomplete\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref as any} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReTextareaAutocomplete;\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport Icon from '../../common/components/Icon';\nimport Tooltip from '../../common/components/Tooltip';\n\nexport interface ITabbedViewProps {\n  id:          string;\n  labels:      Array<string>;\n  tooltips?:   Array<string>;\n\n  initialTab?: string;\n  activeTab?:  string;\n  onSelect?:   (newActiveTab: string) => void;\n\n  errors?:     string;\n  children:    Array<React.ReactNode>;\n}\n\nconst messages = defineMessages({\n  preview: {\n    id: 'recipe.create.preview',\n    description: 'Preview',\n    defaultMessage: 'Preview',\n  },\n});\n\nconst TabbedView: React.FC<ITabbedViewProps> = ({\n    id, labels, errors, tooltips,\n    initialTab, activeTab, onSelect,\n    children } : ITabbedViewProps) => {\n  const { formatMessage } = useIntl();\n\n  const contentClassName = classNames('content', {\n    'has-error': !!errors,\n  });\n\n  const navClassName = classNames('nav', 'nav-tabs', {\n    'has-error': !!errors,\n  });\n\n  const tabs = children.slice(0, children.length - 1).map((childr, index) => (\n    <Tab\n        // eslint-disable-next-line react/no-array-index-key\n        key = {index.toString()}\n        title = {(\n          <>\n            {labels[index]}\n            {tooltips?.[index] && (\n              <>\n                &nbsp;\n                <Tooltip\n                    id = {`${labels[index]}-tooltip`}\n                    tooltip   = {tooltips[index]}>\n                  <Icon icon='info-circle' className='tooltip-icon' aria-label={tooltips[index]} aria-describedby={undefined} />\n                </Tooltip>\n              </>\n            )}\n          </>\n        )}\n        eventKey  = {index.toString()}\n        className = 'editor'>\n      <div className={contentClassName}>{childr}</div>\n    </Tab>\n  ));\n\n  const handleSelect = useCallback((selectedKey: string | null) => {\n    if (selectedKey) {\n      onSelect?.(selectedKey);\n    }\n  }, [onSelect]);\n\n  return (\n    <div className='live-editor'>\n      <Tabs\n          id = {`${id}-tabs`}\n          defaultActiveKey = {initialTab || '0'}\n          activeKey = {activeTab}\n          onSelect  = {handleSelect}\n          className = {navClassName}>\n        {tabs}\n        <Tab\n            title = {formatMessage(messages.preview)}\n            className = 'preview'\n            eventKey  = 'preview'>\n          <div className={contentClassName}>{children[children.length - 1]}</div>\n        </Tab>\n      </Tabs>\n      <div className='help-text error'>{errors}</div>\n    </div>\n  );\n};\n\nexport default TabbedView;\n","import { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { defineMessages, IntlShape, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\nimport { FormSpy } from 'react-final-form';\nimport { ValidationErrors } from 'final-form';\n\nimport '../css/smart_text_box.css';\n\nimport IngredientGroups from '../../recipe/components/IngredientGroups';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport parseIngredient from '../utilts/parseIngredient';\nimport { Ingredient, IngredientGroup, IngredientInput, SubRecipe } from '../../recipe/store/RecipeTypes';\nimport SubRecipes from '../../recipe/components/SubRecipes';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport ReInput from '../../common/components/ReInput/ReInput';\nimport ReTextareaAutocomplete from '../../common/components/ReInput/ReTextareaAutocomplete';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport FieldSpyValues from '../../common/components/ReInput/FieldSpyValues';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport TabbedView from './TabbedView';\nimport { slugify } from '../../common/utility';\n\nconst messages = defineMessages({\n  ingredients_label: {\n    id: 'recipe.create.ingredients_label',\n    description: 'Recipe ingredients label',\n    defaultMessage: 'Ingredients',\n  },\n  ingredients_tooltip: {\n    id: 'recipe.create.ing.info_desc',\n    description: 'info_desc',\n    defaultMessage: 'Each Ingredient should be on its own line. You can form groups by ending the groups first line with a colon (\":\").',\n  },\n  ingredients_placeholder: {\n    id: 'recipe.create.ing.ingredients_placeholder',\n    description: 'Example for writing ingredients',\n    defaultMessage: 'Dough:\\n300 g flour\\n100 ml milk\\n\\nDip:\\n100 ml olive oil\\n...',\n  },\n\n  subrecipes_label: {\n    id: 'recipe.create.subrecipes_label',\n    description: 'Recipe links label',\n    defaultMessage: 'Recipe links',\n  },\n  subrecipes_tooltip: {\n    id: 'recipe.create.subrecipes.tooltip',\n    description: 'Subrecipes tooltip',\n    defaultMessage: 'If the recipe is made of several subrecipes, then link them here. Each Recipe Link should be on its own line.',\n  },\n  subrecipes_placeholder: {\n    id: 'recipe.create.subrecipes.placeholder',\n    description: 'Subreceipes placeholder',\n    defaultMessage: ':dough-1\\n:olive-oil-dip-1',\n  },\n});\n\nfunction normalizeLine(line: string): string {\n  let res = line.replace(/\\t/g, ' ');\n  res = res.trim();\n  return res;\n}\n\n/* IngredientGroups */\n\nexport function ingredientsFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<IngredientGroup>): string {\n  let tr = '';\n  if (values) {\n    values.filter(ig => ig.title.trim().length > 0 || ig.ingredients.length > 0).forEach(ig => {\n      if (ig.title) {\n        tr += `${ig.title}:\\n`;\n      }\n      ig.ingredients.forEach(i => {\n        const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n        tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n        tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n        tr += `${i.title}\\n`;\n      });\n      tr += '\\n';\n    });\n  }\n  if (tr.endsWith('\\n')) {\n    return tr.substring(0, tr.length - 2);\n  }\n  return tr;\n}\n\nexport function ingredientsParser(parser: Record<string, string>, value: string | undefined): Array<IngredientGroup> {\n  if (!value) return [];\n  const dict = [{ slug: 'default', title: '', ingredients: [] }];\n  let igTitle = '';\n  let ings: Array<IngredientInput> | undefined = dict.find(t => t.title === '')?.ingredients; // Should always exist, as it is the init group.\n  if (ings == null) throw new Error('Invalid state: ings may not be null.');\n  if (value) {\n    const tags = value.split('\\n').map(normalizeLine).filter(t => t.length > 0);\n    tags.forEach(line => {\n      if (line.length > 0) {\n        // Check if the line is an IG title\n        // If line is IG title, update igTitle and continue\n        // Else add ing to the current ig group\n        if (line.endsWith(':') && line.length > 1) {\n          igTitle = line.substring(0, line.length - 1);\n          dict.push({ slug: slugify(igTitle), title: igTitle, ingredients: [] });\n          ings = dict.find(t => t.title === igTitle)?.ingredients; // Should always exist, as we just pushed it.\n          if (ings == null) throw new Error('Invalid state: The create ings may not be null.');\n        } else {\n          if (ings == null) throw new Error('Invalid state: ings may not be null.');\n          ings.push(parseIngredient(parser, line));\n        }\n      }\n    });\n  }\n  return dict;\n}\n\n/* SubRecipe */\n\nexport function subrecipesFormatter(intl: IntlShape, formatter: Record<string, string>, values: Array<SubRecipe>) {\n  let tr = '';\n  if (values) {\n    values.forEach(i => {\n      const locMsrmnt = i.measurement ? formatter[i.measurement] : '';\n      tr += i.numerator ? `${formatQuantity(1, 1, i.numerator, i.denominator)} ` : '';\n      tr += locMsrmnt ? `${(intl as IntlShape).formatMessage({ id: `measurement.${locMsrmnt.toLocaleLowerCase()}` }, { itemCount: i.numerator })} ` : '';\n      tr += `${i.title}\\n`;\n    });\n  }\n  return tr.substring(0, tr.length - 1);\n}\n\nexport function subrecipesParser(parser: Record<string, string>, value: string | undefined): Array<SubRecipe> {\n  if (!value) return [];\n  const ings: Array<SubRecipe> = [];\n  const subRecipes = value.split('\\n').map(normalizeLine).filter(t => t.length > 1 && !t.startsWith(':'));\n  subRecipes.forEach(sr => {\n    if (sr.length > 0) {\n      ings.push(parseIngredient(parser, sr) as SubRecipe);\n    }\n  });\n  return ings;\n}\n\ninterface IItemProps {\n  entity: AutocompleteListItem;\n}\nconst Item = ({ entity: { char } }: IItemProps) => <div>{char}</div>;\n\nexport interface IIngredientGroupsBoxProps {\n  nameIg:   string;\n  nameSub:  string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<Array<AutocompleteListItem>>;\n}\n\nconst IngredientGroupsBox: React.FC<IIngredientGroupsBoxProps> = ({\n    nameIg, nameSub, fetchRecipeList }: IIngredientGroupsBoxProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const location = useLocation();\n\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const checkErrorneous = useCallback((errors: ValidationErrors, touched: Record<string, boolean> | undefined) => {\n    if (touched?.[nameIg] === true && errors?.[nameIg] != null) {\n      return formatValidation(intl, errors?.[nameIg]);\n    } else if (touched?.[nameSub] && errors?.[nameSub] != null) {\n      return formatValidation(intl, errors?.[nameSub]);\n    } else {\n      return undefined;\n    }\n  }, [intl]);\n\n  return (\n    <FormSpy subscription={{ errors: true, touched: true, initialValues: true }}>\n      {({ errors, touched, initialValues }) => (\n        <TabbedView\n            id       = 'ingredients'\n            labels   = {[formatMessage(messages.ingredients_label), formatMessage(messages.subrecipes_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors   = {checkErrorneous(errors, touched)}\n            tooltips = {[formatMessage(messages.ingredients_tooltip), formatMessage(messages.subrecipes_tooltip)]}>\n          <FieldSpyValues fieldNames={[nameSub]}>\n            {values => (\n              <ReInput\n                  name     = {nameIg}\n                  rows     = {8}\n                  placeholder = {formatMessage(messages.ingredients_placeholder)}\n                  required = {initialValues && !values[nameSub]} />\n            )}\n          </FieldSpyValues>\n          <div className='form-group'>\n            <ReTextareaAutocomplete\n                name  = {nameSub}\n                rows = {8}\n                placeholder = {formatMessage(messages.subrecipes_placeholder)}\n                trigger={{\n                ':': {\n                  dataProvider: token => fetchRecipeList(token),\n                  component: Item,\n                  output: item => item.char,\n                },\n              }} />\n          </div>\n          <FieldSpyValues fieldNames={[nameIg, nameSub]}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <IngredientsPreview\n                      igData = {ingredientsParser(measurementsContext.parser, values[nameIg])}\n                      srData = {subrecipesParser(measurementsContext.parser,  values[nameSub])} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IIngredientsPreviewProps {\n  igData: Array<IngredientGroup>;\n  srData: Array<SubRecipe>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst IngredientsPreview: React.FC<IIngredientsPreviewProps> = ({ igData, srData }: IIngredientsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(igData, i => {\n      const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n      return { ...i, quantity: custom };\n    }), [igData]);\n\n  const srDataFormatted = useMemo(() => srData.map(i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [igData]);\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className='ingredients-panel'>\n          <div className='ingredient-groups'>\n            <SubRecipes subRecipes={srDataFormatted} />\n            <IngredientGroups groups={igDataFormatted} hasSubrecipes={srData.length > 0} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientGroupsBox;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { FormSpy } from 'react-final-form';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router';\n\nimport FieldSpyValues from '../../common/components/ReInput/FieldSpyValues';\nimport ReInput from '../../common/components/ReInput/ReInput';\nimport { NEW_ITEM_URL_ID } from '../../common/constants';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport { formatValidation } from '../../common/store/Validation';\nimport Directions from '../../recipe/components/Directions';\nimport { Ingredient, IngredientGroup } from '../../recipe/store/RecipeTypes';\nimport formatQuantity from '../../recipe/utilts/formatQuantity';\nimport { ingredientsParser } from './IngredientGroupsBox';\nimport TabbedView from './TabbedView';\n\nconst messages = defineMessages({\n  directions_label: {\n    id: 'recipe.create.directions_label',\n    description: 'Directions label',\n    defaultMessage: 'Directions',\n  },\n  directions_tooltip: {\n    id: 'recipe.create.dir.tooltip',\n    description: 'Directions Tooltip',\n    defaultMessage: 'Each Direction should be on its own line. You can form chapters by ending the chapters heading with a colon (\":\").',\n  },\n  directions_placeholder: {\n    id: 'recipe.create.dir.placeholder',\n    description: 'Directions Placeholder',\n    defaultMessage: 'Dough:\\nPrepare the dough.\\n\\nDip:\\nPrepare the dip.\\n...',\n  },\n});\n\nexport interface IDirectionBox {\n  name:       string;\n}\n\nconst DirectionBox: React.FC<IDirectionBox> = ({\n    name }: IDirectionBox) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState<string>('0');\n\n  useEffect(() => {\n    if (location.pathname.endsWith(`/${NEW_ITEM_URL_ID}`)) {\n      setActiveTab('0');\n    }\n  }, [location.pathname]);\n\n  return (\n    <FormSpy subscription={{ errors: true }}>\n      {({ errors }) => (\n        <TabbedView\n            id        = 'directions'\n            labels    = {[formatMessage(messages.directions_label)]}\n\n            activeTab = {activeTab}\n            onSelect  = {setActiveTab}\n\n            errors    = {formatValidation(intl, errors?.[name])}\n            tooltips  = {[formatMessage(messages.directions_tooltip)]}>\n          <ReInput\n              name = {name}\n              rows     = {8}\n              placeholder = {formatMessage(messages.directions_placeholder)} />\n          <FieldSpyValues fieldNames={[name, 'ingredientGroupsS']}>\n            {values => (\n              <>\n                {activeTab === 'preview' && (\n                  <DirectionsPreview\n                      directions = {values[name] ?? ''}\n                      ingredients = {ingredientsParser(measurementsContext.parser, values.ingredientGroupsS)} />\n                )}\n              </>\n            )}\n          </FieldSpyValues>\n        </TabbedView>\n      )}\n    </FormSpy>\n  );\n};\n\ninterface IDirectionsPreviewProps {\n  directions: string;\n  ingredients: Array<IngredientGroup>;\n}\n\nconst recurseIngredients = (igs: Array<IngredientGroup>, cb: (ingr: Ingredient) => Ingredient): Array<IngredientGroup> => igs.map(ig => ({\n  ...ig,\n  ingredients: ig.ingredients.map(cb),\n}));\n\nconst DirectionsPreview: React.FC<IDirectionsPreviewProps> = ({ directions, ingredients }: IDirectionsPreviewProps) => {\n  const igDataFormatted = useMemo(() => recurseIngredients(ingredients, i => {\n    const custom = formatQuantity(1, 1, i.numerator, i.denominator);\n    return { ...i, quantity: custom };\n  }), [ingredients]);\n\n  const isMultiDirections = directions.includes(':\\n');\n\n  return (\n    <div className='recipe-details'>\n      <div className='recipe-schema'>\n        <article className={classNames('directions-panel', { 'multi-directions': isMultiDirections })}>\n          <div className='direction-groups'>\n            <Directions directions={directions} ingredients={igDataFormatted} />\n          </div>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default DirectionBox;\n","import { useCallback, useContext, useMemo, useRef } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Col, Container, Form, Row } from 'react-bootstrap';\nimport { Form as ReduxForm } from 'react-final-form';\n\nimport '../../recipe/css/recipe.css';\nimport '../css/recipe_form.css';\n\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport SeasonListContainer from '../containers/SeasonListContainer';\nimport TagListContainer from '../containers/TagListContainer';\nimport CourseSelectContainer from '../containers/CourseSelectContainer';\nimport CuisineSelectContainer from '../containers/CuisineSelectContainer';\nimport RecipeFormToolbar, { SubmittingObserver, SubmittingObserverClass } from '../containers/RecipeFormToolbar';\nimport ReInput from '../../common/components/ReInput/ReInput';\nimport ReCheckbox from '../../common/components/ReInput/ReCheckbox';\nimport InitialValuesResetter from '../../common/components/ReInput/ReInitialValuesResetter';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport MeasurementContext from '../../common/context/MeasurementContext';\nimport ReFormStatus from '../../common/components/ReInput/ReFormStatus';\nimport RecipeFormImageRow from './RecipeFormImageRow';\nimport IngredientGroupsBox, { ingredientsFormatter, ingredientsParser, subrecipesFormatter, subrecipesParser } from './IngredientGroupsBox';\nimport DirectionBox from './DirectionBox';\nimport { ValidationResult } from '../../common/store/Validation';\n\nconst messages = defineMessages({\n  name_label: {\n    id: 'recipe.create.name_label',\n    description: 'Recipe name label',\n    defaultMessage: 'Recipe name',\n  },\n  course_label: {\n    id: 'recipe.create.course_label',\n    description: 'Course label',\n    defaultMessage: 'Course',\n  },\n  cuisine_label: {\n    id: 'recipe.create.cuisine_label',\n    description: 'Cuisine label',\n    defaultMessage: 'Cuisine',\n  },\n  seasons_label: {\n    id: 'recipe.create.seasons_label',\n    description: 'Seasons label',\n    defaultMessage: 'Seasons',\n  },\n  tags_label: {\n    id: 'recipe.create.tags_label',\n    description: 'Tags label',\n    defaultMessage: 'Tags',\n  },\n  prep_time_label: {\n    id: 'recipe.create.prep_time_label',\n    description: 'Prep time label',\n    defaultMessage: 'Prep time (min)',\n  },\n  cooking_time_label: {\n    id: 'recipe.create.cooking_time_label',\n    description: 'Cooking time label',\n    defaultMessage: 'Cooking time (min)',\n  },\n  servings_label: {\n    id: 'recipe.create.servings_label',\n    description: 'Servings label',\n    defaultMessage: 'Servings',\n  },\n  information_label: {\n    id: 'recipe.create.information_label',\n    description: 'Recipe information label',\n    defaultMessage: 'Recipe information',\n  },\n  information_placeholder: {\n    id: 'recipe.create.information_placeholder',\n    description: 'Recipe information placeholder',\n    defaultMessage: 'A quick description of the recipe',\n  },\n  source_label: {\n    id: 'recipe.create.source_label',\n    description: 'Rating source label',\n    defaultMessage: 'Source',\n  },\n  source_tooltip: {\n    id: 'recipe.create.source_tooltip',\n    description: 'Rating source tooltip',\n    defaultMessage: 'Where the original recipe is from.',\n  },\n  public_label: {\n    id: 'recipe.create.public_label',\n    description: 'Recipe set public label',\n    defaultMessage: 'Public Recipe',\n  },\n});\n\nexport interface IRecipeFormProps {\n  recipe: Recipe | undefined;\n  isNew: boolean;\n  location: string;\n\n  fetchRecipeList: (searchTerm: string) => Promise<AutocompleteListItem[]>;\n  onSubmit: (form: Recipe) => Promise<ValidationResult>;\n}\n\ninterface RecipeFormatted extends Recipe {\n  ingredientGroupsS: string;\n  subrecipesS: string;\n}\n\nconst RecipeForm: React.FC<IRecipeFormProps> = ({\n    recipe, isNew, location,\n    fetchRecipeList, onSubmit } : IRecipeFormProps) => {\n  const intl = useIntl();\n  const { formatMessage } = intl;\n\n  const measurementsContext = useContext(MeasurementContext);\n\n  const submittingObserverRef = useRef<SubmittingObserverClass>(null);\n  const handleSubmit = useCallback((form: RecipeFormatted) => {\n    // Do not disable the submit-button on submitting, to prevent losing focus.\n    if (submittingObserverRef.current?.getSubmitting()) return Promise<null>;\n\n    return onSubmit({\n      ...form,\n      ingredientGroups: ingredientsParser(measurementsContext.parser, form.ingredientGroupsS),\n      subrecipes:        subrecipesParser(measurementsContext.parser, form.subrecipesS),\n    });\n  }, [measurementsContext.parser, submittingObserverRef.current]);\n\n  const initialValues: Partial<RecipeFormatted> | undefined = useMemo(() => {\n    if (isNew && !recipe) {\n      return {\n        slug: '',\n        public: true,\n        servings: 1,\n      };\n    } else {\n      return recipe\n        ? {\n        ...recipe,\n        ingredientGroupsS: ingredientsFormatter(intl, measurementsContext.formatter, recipe.ingredientGroups),\n        subrecipesS:        subrecipesFormatter(intl, measurementsContext.formatter, recipe.subrecipes),\n        } : undefined;\n    }\n    }, [recipe, isNew, location, intl.locale]);\n\n  // console.log(`[RecipeForm] recipe=${JSON.stringify(recipe)}, initialValues=${JSON.stringify(initialValues)}`);\n\n  return (\n    <ReduxForm\n        initialValues = {initialValues}\n        onSubmit = {handleSubmit}\n        subscription = {{ submitting: true }}\n        render = {({ form, handleSubmit: renderSubmit }) => (\n          <Form className='recipe-form' onSubmit={renderSubmit}>\n            <InitialValuesResetter form={form} initialValues={initialValues} />\n            <SubmittingObserver ref={submittingObserverRef} />\n            <Container>\n              <ReFormStatus />\n              <Row>\n                <Col id='recipe-meta' md={5} lg={4}>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name      = 'title'\n                          label     = {formatMessage(messages.name_label)}\n                          maxLength = {250}\n                          required\n                          />\n                    </Col>\n                  </Row>\n\n                  <RecipeFormImageRow />\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'servings'\n                          type     = 'number'\n                          label    = {formatMessage(messages.servings_label)}\n                          min      = {1}\n                          max      = {999}\n                          required />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <ReCheckbox\n                          name      = 'public'\n                          label     = {formatMessage(messages.public_label)} />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <CourseSelectContainer\n                          name     = 'course'\n                          label    = {formatMessage(messages.course_label)} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <CuisineSelectContainer\n                          name     = 'cuisine'\n                          label    = {formatMessage(messages.cuisine_label)} />\n                    </Col>\n                    <Col xs={12}>\n                      <SeasonListContainer\n                          name     = 'seasons'\n                          label    = {formatMessage(messages.seasons_label)} />\n                    </Col>\n                    <Col xs={12}>\n                      <TagListContainer\n                          name     = 'tags'\n                          label    = {formatMessage(messages.tags_label)} />\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'prepTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.prep_time_label)}\n                          min      = {1}\n                          max      = {999} />\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      <ReInput\n                          name     = 'cookTime'\n                          type     = 'number'\n                          label    = {formatMessage(messages.cooking_time_label)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'source'\n                          label    = {formatMessage(messages.source_label)}\n                          tooltip  = {formatMessage(messages.source_tooltip)} />\n                    </Col>\n                  </Row>\n\n                </Col>\n                <Col id='recipe' md={7} lg={8}>\n                  <Row>\n                    <Col xs={12}>\n                      <ReInput\n                          name     = 'info'\n                          rows     = {3}\n                          label    = {formatMessage(messages.information_label)}\n                          placeholder = {formatMessage(messages.information_placeholder)} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <IngredientGroupsBox\n                          nameIg   = 'ingredientGroupsS'\n                          nameSub  = 'subrecipesS'\n                          fetchRecipeList = {fetchRecipeList} />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={12}>\n                      <DirectionBox\n                          name       = 'directions' />\n                    </Col>\n                  </Row>\n\n                  <RecipeFormToolbar />\n                </Col>\n              </Row>\n            </Container>\n          </Form>\n    )} />\n  );\n};\n\nexport default RecipeForm;\n","import { useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport * as _ from 'lodash-es';\n\nimport { RootState } from '../../app/Store';\nimport { useSelector } from '../../common/store/redux';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport { getRoutePath } from '../../common/utility';\nimport UserRole from '../../common/types/UserRole';\n\nconst EditGuard: React.FC = () => {\n  const params = useParams();\n  const nav = useNavigate();\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const accountState = useSelector((state: RootState) => state.account);\n  const recipeState = useSelector((state: RootState) => state.recipeForm);\n  const recipe = recipeState.item;\n  const { pending } = recipeState.meta;\n  const wasRenderedRef = useRef<boolean>(false);\n\n  const user = accountState.item;\n  const mayEdit = user != null && (isNew || (user.id === recipe?.author || user.role === UserRole.STAFF || user.role === UserRole.ADMIN));\n\n  useEffect(() => {\n    if (user != null && pending === PendingState.COMPLETED && recipe != null && !mayEdit) {\n      nav(getRoutePath(`/recipe/${recipeSlug}`));\n    }\n  }, [user, recipeState, mayEdit]);\n\n  useEffect(() => {\n    if (recipe?.slug != null && pending === PendingState.COMPLETED && isNew && wasRenderedRef.current) {\n      setTimeout(() => {\n        nav(getRoutePath(`/recipe/edit/${recipe.slug}`));\n      }, 250);\n    }\n    wasRenderedRef.current = true;\n  }, [pending]);\n\n  const recipeMeta = recipeState.meta;\n  // If recipe not found, redirect to NotFound-Page\n  useEffect(() => {\n    if (_.get(recipeMeta.error, 'status') === 404) {\n      nav(getRoutePath('/NotFound'));\n    }\n  }, [recipeMeta.error]);\n\n  return null;\n};\n\nexport default EditGuard;\n","import { useCallback, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport * as RecipeFormActions from '../store/actions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport RecipeForm from '../components/RecipeForm';\nimport { Recipe } from '../../recipe/store/RecipeTypes';\nimport PageWrapper from '../../common/components/PageWrapper';\nimport EditGuard from '../components/EditGuard';\n\nconst RecipeFormPage: React.FC = () => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    new_recipe: {\n      id: 'recipe_form.new_recipe',\n      description: 'New Recipe documentTitle',\n      defaultMessage: 'New Recipe',\n    },\n  });\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  const location = useLocation();\n\n  const fetchRecipeList = RecipeFormActions.fetchRecipeList;\n  const handleSubmit = useCallback(async (data: Recipe) => RecipeFormActions.save(dispatch, data), []);\n\n  const recipeSlug = params.recipe ?? '';\n  const isNew = recipeSlug === 'create';\n\n  const recipe = useSelector((state: RootState) => state.recipeForm.item);\n\n  // Load Recipe / or init.\n  useEffect(() => {\n    if (recipeSlug) {\n      if (isNew) {\n        dispatch(RecipeFormActions.reset());\n      } else {\n        dispatch(RecipeFormActions.load(recipeSlug));\n      }\n    }\n  }, [recipeSlug, location.key]);\n\n  // componentWillUnmount\n  useEffect(() => () => {\n    dispatch(RecipeFormActions.reset());\n  }, []);\n\n  return (\n    <PageWrapper title={isNew ? formatMessage(messages.new_recipe) : recipe?.title}>\n      <EditGuard />\n      <RecipeForm\n          recipe = {recipe}\n          isNew  = {isNew}\n          location = {location.key}\n          fetchRecipeList = {fetchRecipeList}\n          onSubmit = {handleSubmit} />\n    </PageWrapper>\n  );\n};\n\nexport default RecipeFormPage;\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { AnyDispatch, toBasicAction } from '../../common/store/redux';\nimport { AutocompleteListItem } from '../../common/components/Input/TextareaAutocomplete';\nimport { handleError, handleFormError } from '../../common/requestUtils';\nimport { Recipe, RecipeDto, toRecipe, toRecipeRequest } from '../../recipe/store/RecipeTypes';\nimport { COURSES_STORE, CUISINES_STORE, SEASONS_STORE, TAGS_STORE } from '../../recipe_groups/store/types';\nimport { getRecipeSuccess } from '../../recipe/store/RecipeActions';\nimport { RecipeFormDispatch, RECIPE_FORM_STORE } from './types';\n\nexport const load = (recipeSlug: string) => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.GET_START) });\n  request()\n    .get(`${serverURLs.recipe}${recipeSlug}/`)\n    .then(res => {\n      const recipe = toRecipe(res.body);\n      dispatch({\n        ...toBasicAction(\n          RECIPE_FORM_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: recipe,\n      });\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      dispatch(getRecipeSuccess(recipe) as any);\n    })\n    .catch(err => dispatch(handleError(err, RECIPE_FORM_STORE)));\n};\n\nexport const preload = (recipe: Partial<Recipe>) => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.PRELOAD), payload: recipe });\n};\n\nexport const reset = () => (dispatch: RecipeFormDispatch) => {\n  dispatch({ ...toBasicAction(RECIPE_FORM_STORE, ACTION.RESET) });\n};\n\nexport const save = async (dispatch: AnyDispatch, data: Recipe) => {\n  const photo = (typeof data.photo === 'object') ? data.photo : undefined;\n\n  const isNew = !data.id;\n  const r = isNew\n      ? request().post(serverURLs.recipe)\n      : request().patch(`${serverURLs.recipe}${data.slug}/`);\n\n  dispatch({\n    ...toBasicAction(\n      RECIPE_FORM_STORE,\n      isNew ? ACTION.CREATE_START : ACTION.UPDATE_START\n    ),\n  });\n\n  const dto = toRecipeRequest(data);\n  return r.send(dto)\n    .then(res => {\n      if (photo) {\n        return request()\n          .patch(`${serverURLs.recipe}${res.body.slug}/`)\n          .attach('photo', photo)\n          .then(resPhoto => {\n            const recipe = toRecipe(resPhoto.body);\n            dispatch({\n              ...toBasicAction(\n                RECIPE_FORM_STORE,\n                isNew ? ACTION.CREATE_SUCCESS : ACTION.UPDATE_SUCCESS\n              ),\n              oldId: data.id,\n              payload: recipe,\n            });\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            dispatch(getRecipeSuccess(recipe) as any);\n          })\n          .catch(err => handleFormError(dispatch, err, RECIPE_FORM_STORE));\n        } else {\n          const recipe = toRecipe(res.body);\n          dispatch({\n            ...toBasicAction(\n              RECIPE_FORM_STORE,\n              isNew ? ACTION.CREATE_SUCCESS : ACTION.UPDATE_SUCCESS\n            ),\n            oldId: isNew ? (null as any) : data.id, // eslint-disable-line @typescript-eslint/no-explicit-any\n            payload: recipe,\n          });\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          dispatch(getRecipeSuccess(recipe) as any);\n        }\n      // OPT HACK: Move this to recipe_groups\n      dispatch(invalidateCreatableLists(data, toRecipe(res.body)));\n      return null;\n    })\n    .catch(err => handleFormError(dispatch, err, RECIPE_FORM_STORE));\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invalidateCreatableLists = (oldRecipe: Recipe, savedRecipe: Recipe): any => (dispatch: any) => {\n  if (oldRecipe.course?.id !== savedRecipe.course?.id) {\n    dispatch({ ...toBasicAction(COURSES_STORE, ACTION.RESET) });\n  }\n  if (oldRecipe.cuisine?.id !== savedRecipe.cuisine?.id) {\n    dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.RESET) });\n  }\n  if (oldRecipe.seasons?.map(s => s.id).join('/') !== savedRecipe.seasons?.map(s => s.id).join('/')) {\n    dispatch({ ...toBasicAction(SEASONS_STORE, ACTION.RESET) });\n  }\n  if (oldRecipe.tags?.map(t => t.id).join('/') !== savedRecipe.tags?.map(t => t.id).join('/')) {\n    dispatch({ ...toBasicAction(TAGS_STORE, ACTION.RESET) });\n  }\n};\n\nexport const fetchRecipeList = (searchTerm: string): Promise<Array<AutocompleteListItem>> => request()\n    .get(`${serverURLs.recipe}?fields=id,title,slug&limit=5&search=${searchTerm}`)\n    .then(res => res.body.results.map((recipe: RecipeDto) => ({ key: recipe.slug, name: recipe.slug, char: recipe.title } as AutocompleteListItem)))\n    .catch(() => []);\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { CourseDto, toCourse, CuisineDto, toCuisine, toSeason, toTag } from '../../recipe/store/RecipeTypes';\nimport { toBasicAction } from '../../common/store/redux';\nimport { handleError } from '../../common/requestUtils';\nimport { COURSES_STORE, CUISINES_STORE, RecipeGroupsDispatch, SEASONS_STORE, TAGS_STORE } from './types';\n\nexport const fetchCourses = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(COURSES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.course)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          COURSES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((courseDto: CourseDto) => courseDto.title !== '-')\n            .map(toCourse),\n      });\n    })\n    .catch(err => dispatch(handleError(err, COURSES_STORE)));\n};\n\nexport const fetchCuisines = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(CUISINES_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.cuisine)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          CUISINES_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results\n            .filter((cuisineDto: CuisineDto) => cuisineDto.title !== '-')\n            .map(toCuisine),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchSeasons = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(SEASONS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.season)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          SEASONS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toSeason),\n      });\n    })\n    .catch(err => dispatch(handleError(err, CUISINES_STORE)));\n};\n\nexport const fetchTags = () => (dispatch: RecipeGroupsDispatch) => {\n  dispatch({ ...toBasicAction(TAGS_STORE, ACTION.GET_START) });\n\n  request()\n    .get(serverURLs.tag)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          TAGS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map(toTag),\n      });\n    })\n    .catch(err => dispatch(handleError(err, TAGS_STORE)));\n};\n"],"names":["messages","defineMessages","permalink_tooltip","id","description","defaultMessage","forwardRef","_ref","ref","linkFor","className","rest","formatMessage","useIntl","_jsxs","_Fragment","children","_jsx","Link","classNames","to","title","PageScroller","uriFragmentId","src","placeholder","alt","onError","hasError","setError","useState","useEffect","handleError","useCallback","name","required","format","parse","formatter","parser","isMulti","onChange","onFocus","onBlur","intl","formatValue","value","undefined","Field","validate","requiredValidator","validateFields","fprops","Select","input","errors","formatValidation","meta","error","dirtySinceLastSubmit","submitError","namee","event","height","width","style","paddingTop","position","useSingle","getFunction","obj","pushDirections","groups","heading","directions","unassignedIngredients","length","ig","igIndex","findIndex","splice","getIngredientsForStep","push","ingredients","directionsString","directionGroups","useMemo","isMultiStep","includes","directionsGroups","nextHeading","split","filter","line","map","trimEnd","forEach","direction","endsWith","substring","untitledStep","find","di","unshift","assignRemainingIngredients","parseDirections","directionsGroupsJsx","formatDirections","_di$heading","directionsJsx","isDefaultGroup","headingSlug","slugify","HeaderLink","IngredientGroups","hasSubrecipes","withHeaderLink","selectable","showCaptions","ingredientGroups","group","Ingredients","data","slug","quantity","ingredient","formatMeasurement","measurementsContext","measurement","measurementString","measurementParserId","optionallyFormatMessage","itemCount","useContext","MeasurementContext","caption","captionSlug","index","_ingredient$id","quantityS","msrmtString","titleString","fullString","join","renderQuantity","Boolean","ReCheckbox","label","toString","Table","striped","size","subrecipes","subrecipe","subRecipes","showQuantityCol","sr","subRecipesList","subRecipe","_subRecipe$child_reci","child_recipe_id","getRoutePath","dispatch","useDispatch","crash","useCrash","fetchSeasons","RecipeGroupActions","seasons","useSelector","state","recipeGroups","items","s","locale","newValue","selected","v","season","JSON","stringify","_","ReSelect","CreatableSelect","_name","fetchTags","tags","t","sort","sortByLabel","tag","ReCreatableSelect","fetchCourses","courses","c","_courses$find","fetchCuisines","cuisines","_cuisines$find","submit","view","SubmitViewButton","_ref2","isNew","submitting","pristine","onSubmit","onLink","asView","onClick","Toolbar","Button","variant","type","disabled","isDemoMode","accessKey","visibility","LoadingSpinner","color","SubmittingObserver","_props","FormSpy","subscription","_ref3","SubmittingObserverClass","Component","getSubmitting","this","props","render","RecipeFormToolbar","_recipeState$item2","_recipeState$item3","nav","useNavigate","recipeState","recipeForm","preload","item","RecipeActions","_recipeState$item","FileSelect","BaseInputComponent","constructor","arguments","createRef","handleChange","_this$props$onChange","_this$props","_event$target$files","call","target","files","handleClear","clearValue","current","focus","accept","tooltip","readOnly","helpText","Form","Group","getGroupProps","controlId","getFormGroupClassNames","ConditionalWrapper","condition","childr","Tooltip","getLabel","getHelpText","getErrorMessage","InputGroup","Control","Text","borderRadius","Icon","icon","identity","_fprops$input$value","photo_label","RecipeFormImageRow","key","useLocation","photoInputRef","useRef","imageUrl","setImageUrl","IMAGE_PLACEHOLDER","getRecipeImagePlaceholder","handleImageChange","URL","createObjectURL","getDisplayImage","recipePhoto","getRecipeImage","Row","Col","xs","lg","xl","xxl","marginLeft","marginRight","WidthHeightRatio","FieldSpyValues","fieldNames","values","Image","photo","objectFit","ReFileSelect","parseFloatIgnoreLocale","str","normalized","ixDot","indexOf","ixComma","replace","parseFloat","numberSplit","number","last","n","lastIndexOf","amount","parseFraction","fraction","normalize","quantities","ix","noMoreQuantities","nextTag","vulgarFraction","Number","isNaN","parseInt","toLocaleLowerCase","restFrac","numerator","denominator","textArray","reduce","text","d","gcd","GCD","buildFraction","slice","Loading","TextareaAutocomplete","rows","ReactTextareaAutocomplete","loadingComponent","movePopupAsYouType","validators","vals","composeValidators","preview","labels","tooltips","initialTab","activeTab","onSelect","contentClassName","navClassName","tabs","Tab","eventKey","handleSelect","selectedKey","Tabs","defaultActiveKey","activeKey","ingredients_label","ingredients_tooltip","ingredients_placeholder","subrecipes_label","subrecipes_tooltip","subrecipes_placeholder","normalizeLine","res","trim","ingredientsFormatter","tr","i","locMsrmnt","formatQuantity","ingredientsParser","_dict$find","dict","igTitle","ings","Error","_dict$find2","parseIngredient","subrecipesFormatter","subrecipesParser","startsWith","Item","entity","char","IngredientsPreview","_ref4","igData","srData","igDataFormatted","recurseIngredients","cb","custom","srDataFormatted","SubRecipes","nameIg","nameSub","fetchRecipeList","location","setActiveTab","pathname","NEW_ITEM_URL_ID","checkErrorneous","touched","initialValues","TabbedView","ReInput","ReTextareaAutocomplete","trigger","dataProvider","token","component","output","directions_label","directions_tooltip","directions_placeholder","DirectionsPreview","isMultiDirections","Directions","_values$name","ingredientGroupsS","name_label","course_label","cuisine_label","seasons_label","tags_label","prep_time_label","cooking_time_label","servings_label","information_label","information_placeholder","source_label","source_tooltip","public_label","recipe","submittingObserverRef","handleSubmit","form","_submittingObserverRe","Promise","subrecipesS","public","servings","ReduxForm","renderSubmit","InitialValuesResetter","Container","ReFormStatus","md","maxLength","sm","min","max","CourseSelectContainer","CuisineSelectContainer","SeasonListContainer","TagListContainer","IngredientGroupsBox","DirectionBox","EditGuard","_params$recipe","params","useParams","recipeSlug","accountState","account","pending","wasRenderedRef","user","mayEdit","author","role","UserRole","STAFF","ADMIN","PendingState","COMPLETED","setTimeout","recipeMeta","RecipeFormPage","new_recipe","RecipeFormActions","async","PageWrapper","RecipeForm","load","toBasicAction","RECIPE_FORM_STORE","ACTION","GET_START","request","get","serverURLs","then","toRecipe","body","GET_SUCCESS","payload","getRecipeSuccess","catch","err","PRELOAD","reset","RESET","save","r","post","patch","CREATE_START","UPDATE_START","dto","toRecipeRequest","send","attach","resPhoto","CREATE_SUCCESS","UPDATE_SUCCESS","oldId","handleFormError","invalidateCreatableLists","oldRecipe","savedRecipe","_oldRecipe$course","_savedRecipe$course","_oldRecipe$cuisine","_savedRecipe$cuisine","_oldRecipe$seasons","_savedRecipe$seasons","_oldRecipe$tags","_savedRecipe$tags","course","COURSES_STORE","cuisine","CUISINES_STORE","SEASONS_STORE","TAGS_STORE","searchTerm","results","courseDto","toCourse","cuisineDto","toCuisine","toSeason","toTag"],"sourceRoot":""}