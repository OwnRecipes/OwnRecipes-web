{"version":3,"file":"static/js/732.8d6be631.chunk.js","mappings":"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","sources":["header/components/LanguageDialog.tsx","../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { ListGroup } from 'react-bootstrap';\n\nimport Modal from '../../common/components/Modal';\nimport { Settings } from '../../account/store/settings/types';\nimport { getMessagesFromLang, LanguageCode } from '../../common/language';\n\nexport interface ILanguageDialogProps {\n  show:     boolean;\n  settings: Settings;\n  onChangeLanguage: (language: LanguageCode) => void;\n  onClose:  () => void;\n}\n\nconst messages = defineMessages({\n  language_modal_title: {\n    id: 'nav.accountmenu.language_modal_title',\n    description: 'Change language dialog title',\n    defaultMessage: 'Choose language',\n  },\n});\n\nexport const LanguageDialog: React.FC<ILanguageDialogProps> = ({\n    show, settings, onChangeLanguage, onClose }: ILanguageDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal\n        show = {show}\n        title = {formatMessage(messages.language_modal_title)}\n        onClose = {onClose}\n        size = 'sm'\n        noCloseButton>\n      <LanguageDialogContent\n          settings = {settings}\n          onChangeLanguage = {onChangeLanguage}\n          onClose = {onClose} />\n    </Modal>\n  );\n};\n\ninterface ILanguageDialogContentProps {\n  settings: Settings;\n  onChangeLanguage: (language: LanguageCode) => void;\n  onClose: () => void;\n}\n\nconst LanguageDialogContent: React.FC<ILanguageDialogContentProps> = ({\n    settings, onChangeLanguage, onClose }: ILanguageDialogContentProps) => {\n  const handleChangeLanguage = useCallback((lang: LanguageCode) => {\n    if (settings.language !== lang) {\n      onChangeLanguage(lang);\n    }\n    onClose();\n  }, [onChangeLanguage, onClose, settings.language]);\n\n  const languageButtons = Object.values(LanguageCode).map(l => (\n    <ListGroup.Item key={l} role='listitem' action active={settings.language === l} aria-current={settings.language === l} onClick={() => handleChangeLanguage(l)}>{getMessagesFromLang(l)['1.display_name']}</ListGroup.Item>\n  ));\n\n  return (\n    <ListGroup as='ol' role='list'>\n      {languageButtons}\n    </ListGroup>\n  );\n};\n\nexport default LanguageDialog;\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport warning from 'warning';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroupItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  disabled,\n  eventKey,\n  className,\n  variant,\n  action,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    ...props\n  });\n  const handleClick = useEventCallback(event => {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n    navItemProps.onClick(event);\n  });\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  }\n\n  // eslint-disable-next-line no-nested-ternary\n  const Component = as || (action ? props.href ? 'a' : 'button' : 'div');\n  process.env.NODE_ENV !== \"production\" ? warning(as || !(!action && props.href), '`action=false` and `href` should not be used together.') : void 0;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    ...navItemProps,\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)\n  });\n});\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport BaseNav from '@restart/ui/Nav';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ListGroupItem from './ListGroupItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    className,\n    bsPrefix: initialBsPrefix,\n    variant,\n    horizontal,\n    numbered,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as = 'div',\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  let horizontalVariant;\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : `horizontal-${horizontal}`;\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/_jsx(BaseNav, {\n    ref: ref,\n    ...controlledProps,\n    as: as,\n    className: classNames(className, bsPrefix, variant && `${bsPrefix}-${variant}`, horizontalVariant && `${bsPrefix}-${horizontalVariant}`, numbered && `${bsPrefix}-numbered`)\n  });\n});\nListGroup.displayName = 'ListGroup';\nexport default Object.assign(ListGroup, {\n  Item: ListGroupItem\n});"],"names":["messages","defineMessages","language_modal_title","id","description","defaultMessage","LanguageDialog","_ref","show","settings","onChangeLanguage","onClose","formatMessage","useIntl","_jsx","Modal","title","size","noCloseButton","children","LanguageDialogContent","_ref2","handleChangeLanguage","useCallback","lang","language","languageButtons","Object","values","LanguageCode","map","l","ListGroup","Item","role","action","active","onClick","getMessagesFromLang","as","ListGroupItem","React","ref","bsPrefix","disabled","eventKey","className","variant","props","useBootstrapPrefix","navItemProps","meta","useNavItem","key","makeEventKey","href","handleClick","useEventCallback","event","preventDefault","stopPropagation","undefined","tabIndex","Component","classNames","isActive","concat","displayName","initialBsPrefix","horizontal","numbered","controlledProps","useUncontrolled","activeKey","horizontalVariant","BaseNav","assign"],"sourceRoot":""}