{"version":3,"file":"static/js/165.85b452c0.chunk.js","mappings":"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","sources":["common/components/Modal.tsx","header/components/ThemeDialog.tsx"],"sourcesContent":["import { forwardRef, useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Button, Modal as BootstrapModal } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport '../css/modal.css';\n\nimport Icon from './Icon';\nimport { CommonProps } from '../types/OverridableComponent';\nimport ErrorBoundary from './ErrorBoundary';\n\nexport interface IModalHeaderCloseButtonProps extends CommonProps {\n  onClose: (event: React.MouseEvent) => void;\n}\n\nconst messages = defineMessages({\n  accept: {\n    id: 'modal.accept',\n    description: 'Default modal accept button',\n    defaultMessage: 'Accept',\n  },\n  close: {\n    id: 'modal.close',\n    description: 'Default modal close button',\n    defaultMessage: 'Close',\n  },\n});\n\nexport const ModalHeaderCloseButton = forwardRef<HTMLButtonElement, IModalHeaderCloseButtonProps>(({\n  onClose, className, ...rest }: IModalHeaderCloseButtonProps, ref) => {\n    const { formatMessage } = useIntl();\n\n    return (\n      <Button type='button' onClick={onClose} variant='transparent' className={classNames('close-button', className)} aria-label={formatMessage(messages.close)} {...rest} ref={ref}>\n        <Icon icon='x' variant='light' size='2x' />\n      </Button>\n    );\n  });\n\nexport interface IModalProps extends CommonProps {\n  show: boolean;\n  title: string;\n\n  acceptTitle?: React.ReactNode;\n  closeTitle?: React.ReactNode;\n\n  onAccept?: () => void;\n  onClose?: (autoClose: boolean) => void;\n  noCloseButton?: boolean;\n\n  /**\n   * @defaultValue `lg`\n   */\n  size?: 'sm' | 'lg' | 'xl';\n\n  acceptButtonProps?: Partial<unknown>;\n  children: React.ReactNode;\n}\n\nconst Modal = forwardRef<HTMLDivElement, IModalProps>(({\n    show, title,\n    acceptTitle, closeTitle,\n    onAccept, onClose, noCloseButton,\n    size = 'lg', acceptButtonProps, children,\n    ...rest }: IModalProps, ref) => {\n  const { formatMessage } = useIntl();\n\n  const handleClose = useCallback(() => {\n    onClose?.(false);\n  }, [onClose]);\n\n  const handleAccept = useCallback(() => {\n    onClose?.(true);\n    onAccept?.();\n  }, [onClose, onAccept]);\n\n  const hasButton = onAccept != null || (onClose != null && !noCloseButton);\n\n  return (\n    <BootstrapModal\n        show = {show}\n        backdrop = 'static'\n        size = {size}\n        centered\n        onHide = {handleClose}\n        keyboard = {false}\n        {...rest}\n        ref = {ref}>\n      <BootstrapModal.Header>\n        <BootstrapModal.Title>{title}</BootstrapModal.Title>\n        {onClose != null && (\n          <ModalHeaderCloseButton onClose={handleClose} />\n        )}\n      </BootstrapModal.Header>\n\n      <BootstrapModal.Body>\n        <ErrorBoundary verbose printStack>\n          {children}\n        </ErrorBoundary>\n      </BootstrapModal.Body>\n\n      {hasButton && (\n        <BootstrapModal.Footer>\n          {onClose != null && !noCloseButton && (\n            <Button variant='outline-primary' onClick={handleClose}>\n              {closeTitle ?? formatMessage(messages.close)}\n            </Button>\n          )}\n          {onAccept != null && (\n            <Button variant='primary' onClick={handleAccept} {...acceptButtonProps}>\n              {acceptTitle ?? formatMessage(messages.accept)}\n            </Button>\n          )}\n        </BootstrapModal.Footer>\n      )}\n    </BootstrapModal>\n  );\n});\n\nexport default Modal;\n","import { useCallback } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { ListGroup } from 'react-bootstrap';\n\nimport Modal from '../../common/components/Modal';\nimport { Settings, ThemeMode } from '../../account/store/settings/types';\n\nconst messages = defineMessages({\n  theme_modal_title: {\n    id: 'nav.accountmenu.theme_modal_title',\n    description: 'Change theme mode dialog title',\n    defaultMessage: 'Choose theme',\n  },\n  theme_mode_dark: {\n    id: 'theme.mode.dark',\n    description: 'Dark mode',\n    defaultMessage: 'Dark',\n  },\n  theme_mode_light: {\n    id: 'theme.mode.light',\n    description: 'Light mode',\n    defaultMessage: 'Light',\n  },\n});\n\nexport interface IThemeDialogProps {\n  show:  boolean;\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nexport const ThemeDialog: React.FC<IThemeDialogProps> = ({\n    show, settings, onChangeTheme, onClose }: IThemeDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal\n        show = {show}\n        title = {formatMessage(messages.theme_modal_title)}\n        onClose = {onClose}\n        size = 'sm'\n        noCloseButton>\n      <ThemeDialogContent\n          settings = {settings}\n          onChangeTheme = {onChangeTheme}\n          onClose = {onClose} />\n    </Modal>\n  );\n};\n\ninterface IThemeDialogContentProps {\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nconst ThemeDialogContent: React.FC<IThemeDialogContentProps> = ({\n    settings, onChangeTheme, onClose }: IThemeDialogContentProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChangeTheme = useCallback((theme: ThemeMode) => {\n    if (settings.themeMode !== theme) {\n      onChangeTheme(theme);\n    }\n    onClose();\n  }, [onChangeTheme, onClose, settings.themeMode]);\n\n  const themeButtons = Object.values(ThemeMode).map(t => (\n    <ListGroup.Item key={t} role='listitem' action active={settings.themeMode === t} aria-current={settings.themeMode === t} onClick={() => handleChangeTheme(t)}>{formatMessage(messages[`theme_mode_${t}`])}</ListGroup.Item>\n  ));\n\n  return (\n    <ListGroup as='ol' role='list'>\n      {themeButtons}\n    </ListGroup>\n  );\n};\n\nexport default ThemeDialog;\n"],"names":["messages","defineMessages","accept","id","description","defaultMessage","close","ModalHeaderCloseButton","forwardRef","_ref","ref","onClose","className","rest","_objectWithoutProperties","_excluded","formatMessage","useIntl","_jsx","Button","_objectSpread","type","onClick","variant","classNames","children","Icon","icon","size","Modal","_ref2","show","title","acceptTitle","closeTitle","onAccept","noCloseButton","_ref2$size","acceptButtonProps","_excluded2","handleClose","useCallback","handleAccept","hasButton","_jsxs","BootstrapModal","backdrop","centered","onHide","keyboard","ErrorBoundary","verbose","printStack","theme_modal_title","theme_mode_dark","theme_mode_light","ThemeDialog","settings","onChangeTheme","ThemeDialogContent","handleChangeTheme","theme","themeMode","themeButtons","Object","values","ThemeMode","map","t","ListGroup","role","action","active","concat","as"],"sourceRoot":""}