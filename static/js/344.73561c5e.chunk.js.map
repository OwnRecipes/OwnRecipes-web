{"version":3,"file":"static/js/344.73561c5e.chunk.js","mappings":"qOAcaA,EAA2C,SAAC,GACY,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,QACzBC,GAAkBC,EAAAA,EAAAA,KAAlBD,cACFE,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,kBAAmB,CACjBC,GAAI,oCACJC,YAAa,iCACbC,eAAgB,kBAIdC,EAAmB,WAAQT,GAAY,EAE7C,OACE,SAAC,IAAD,CACIH,KAAQA,EACRa,MAAST,EAAcE,EAASE,mBAChCL,QAAWS,EACXE,KAAO,KACPC,eAAa,EALjB,UAME,SAACC,EAAD,CACIf,SAAYA,EACZC,cAAiBA,EACjBC,QAAWS,KAGpB,EASKI,EAAyD,SAAC,GACM,IAAlEf,EAAiE,EAAjEA,SAAUC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,QACnBC,GAAkBC,EAAAA,EAAAA,KAAlBD,cACFE,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,kBAAmB,CACjBC,GAAI,oCACJC,YAAa,iCACbC,eAAgB,gBAElBM,gBAAiB,CACfR,GAAI,kBACJC,YAAa,YACbC,eAAgB,QAElBO,iBAAkB,CAChBT,GAAI,mBACJC,YAAa,aACbC,eAAgB,WASdQ,EAAeC,OAAOC,OAAOC,EAAAA,IAAWC,KAAI,SAAAC,GAAC,OACjD,SAAC,SAAD,CAAwBC,QAAM,EAACC,SAAUzB,EAAS0B,YAAcH,EAAGI,QAAS,kBAL5E1B,EAKoGsB,QAJpGrB,GAI4E,EAA5E,SAAyGC,EAAcE,EAAS,cAAD,OAAekB,MAAzHA,EAD4B,IAInD,OACE,SAAC,IAAD,UACGL,GAGN,EAED,W","sources":["header/components/ThemeDialog.tsx"],"sourcesContent":["import { defineMessages, useIntl } from 'react-intl';\nimport { ListGroup } from 'react-bootstrap';\n\nimport Modal from '../../common/components/Modal';\nimport { Settings, ThemeMode } from '../../account/store/settings/types';\n\nexport interface IThemeDialogProps {\n  show:  boolean;\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nexport const ThemeDialog: React.FC<IThemeDialogProps> = ({\n    show, settings, onChangeTheme, onClose }: IThemeDialogProps) => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    theme_modal_title: {\n      id: 'nav.accountmenu.theme_modal_title',\n      description: 'Change theme mode dialog title',\n      defaultMessage: 'Choose theme',\n    },\n  });\n\n  const handleCloseClick = () => { onClose(); };\n\n  return (\n    <Modal\n        show = {show}\n        title = {formatMessage(messages.theme_modal_title)}\n        onClose = {handleCloseClick}\n        size = 'sm'\n        noCloseButton>\n      <ThemeDialogContent\n          settings = {settings}\n          onChangeTheme = {onChangeTheme}\n          onClose = {handleCloseClick} />\n    </Modal>\n  );\n};\n\ninterface IThemeDialogContentProps {\n  settings: Settings;\n\n  onChangeTheme: (theme: ThemeMode) => void;\n  onClose: () => void;\n}\n\nconst ThemeDialogContent: React.FC<IThemeDialogContentProps> = ({\n    settings, onChangeTheme, onClose }: IThemeDialogContentProps) => {\n  const { formatMessage } = useIntl();\n  const messages = defineMessages({\n    theme_modal_title: {\n      id: 'nav.accountmenu.theme_modal_title',\n      description: 'Change theme mode dialog title',\n      defaultMessage: 'Choose theme',\n    },\n    theme_mode_dark: {\n      id: 'theme.mode.dark',\n      description: 'Dark mode',\n      defaultMessage: 'Dark',\n    },\n    theme_mode_light: {\n      id: 'theme.mode.light',\n      description: 'Light mode',\n      defaultMessage: 'Light',\n    },\n  });\n\n  const handleChangeTheme = (theme: ThemeMode) => {\n    onChangeTheme(theme);\n    onClose();\n  };\n\n  const themeButtons = Object.values(ThemeMode).map(t => (\n    <ListGroup.Item key={t} action disabled={settings.themeMode === t} onClick={() => handleChangeTheme(t)}>{formatMessage(messages[`theme_mode_${t}`])}</ListGroup.Item>\n  ));\n\n  return (\n    <ListGroup>\n      {themeButtons}\n    </ListGroup>\n  );\n};\n\nexport default ThemeDialog;\n"],"names":["ThemeDialog","show","settings","onChangeTheme","onClose","formatMessage","useIntl","messages","defineMessages","theme_modal_title","id","description","defaultMessage","handleCloseClick","title","size","noCloseButton","ThemeDialogContent","theme_mode_dark","theme_mode_light","themeButtons","Object","values","ThemeMode","map","t","action","disabled","themeMode","onClick"],"sourceRoot":""}