{"version":3,"file":"static/js/289.c559780a.chunk.js","mappings":"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","sources":["browse/components/ListTags.tsx","browse/components/ListRecipes.tsx","common/components/Button.tsx","common/components/Loading.tsx","common/components/ReInput/ReAsyncSelect.tsx","common/components/Input/DateTime.tsx","common/components/ReInput/ReDateTime.tsx","menu_plan/components/MenuItemModal.tsx","menu_plan/components/SaveMenuItemSuccessToast.tsx","menu_plan/store/MenuItemActions.ts","menu_plan/store/MenuItemsActions.ts","rating/components/Ratings.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport '../css/list-tags.css';\n\nimport Icon from '../../common/components/Icon';\nimport { optionallyFormatMessage } from '../../common/utility';\nimport { RecipeList } from '../../recipe/store/RecipeTypes';\nimport Chip from '../../common/components/Chip';\n\nexport interface IListTagsProps {\n  recipe: RecipeList;\n}\n\ntype renderTagType = {\n  tag: string;\n  icon: string;\n  variant: 'light' | 'filled';\n}\n\nconst RENDER_TAGS: Array<renderTagType> = [\n  {\n    tag: 'easy',\n    icon: 'bar-chart',\n    variant: 'light',\n  },\n  {\n    tag: 'vegetarian',\n    icon: 'tree',\n    variant: 'light',\n  },\n  {\n    tag: 'vegan',\n    icon: 'tree',\n    variant: 'filled',\n  },\n];\n\nconst ListTags: React.FC<IListTagsProps> = ({\n    recipe }: IListTagsProps) => {\n  const intl = useIntl();\n\n  const renderTagsJsx: Array<React.ReactElement> = useMemo(() => {\n    if (!recipe.oTags) return [];\n\n    const res: Array<React.ReactElement> = [];\n\n    const recipeTags = { ...recipe.oTags };\n    if (recipeTags.vegetarian && recipeTags.vegan) {\n      delete recipeTags.vegetarian;\n    }\n\n    RENDER_TAGS.forEach(t => {\n      if (recipeTags?.[t.tag]) {\n        res.push(\n          <Chip key={`${recipe.id}-${t.tag}`}>\n            <Icon icon={t.icon} variant={t.variant} />\n            {optionallyFormatMessage(intl, 'tag.', t.tag)}\n          </Chip>\n        );\n      }\n    });\n\n    return res;\n  }, [recipe.oTags, intl.locale]);\n\n  if (renderTagsJsx.length === 0) return null;\n\n  return (\n    <div className='tags-list'>\n      {renderTagsJsx}\n    </div>\n  );\n};\n\nexport default ListTags;\n","import { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport '../css/list-recipes.css';\n\nimport ListTags from './ListTags';\nimport Ratings from '../../rating/components/Ratings';\nimport { RecipeList } from '../../recipe/store/RecipeTypes';\nimport { getRecipeImagePlaceholder, getResourcePath, getRoutePath } from '../../common/utility';\nimport Tooltip from '../../common/components/Tooltip';\n\nexport interface IListRecipe extends RecipeList {\n  key?: string;\n  className?: string;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nexport interface IListRecipesProps {\n  data:   Array<IListRecipe> | undefined;\n  lg?:    3 | 4;\n  onOpenRecipe: (rec: IListRecipe) => void;\n}\n\nfunction hashCode(str: string): number {\n  // Code by Barak (https://stackoverflow.com/a/8831937).\n\n  let hash = 0;\n  for (let i = 0; i < str.length; ++i) {\n    const char = str.charCodeAt(i);\n    // eslint-disable-next-line no-bitwise\n    hash = ((hash << 5) - hash) + char;\n    // eslint-disable-next-line no-bitwise\n    hash &= hash;\n  }\n\n  return hash;\n}\n\nfunction getRecipeImage(recipe: RecipeList) {\n  if (recipe.photoThumbnail) {\n    return recipe.photoThumbnail ?? getRecipeImagePlaceholder();\n  } else {\n    const images = ['fish', 'fried-eggs', 'pizza', 'soup', 'steak'];\n    const recipeImageHash = Math.abs(hashCode(recipe.title));\n    return getResourcePath(`/images/${images[recipeImageHash % 5]}.jpg`);\n  }\n}\n\nconst ListRecipes: React.FC<IListRecipesProps> = ({ data, lg = 4, onOpenRecipe }: IListRecipesProps) => {\n  const IMAGE_PLACEHOLDER = useMemo(() => getRecipeImagePlaceholder(), []);\n  const PLACEHOLDER_STYLE = useMemo(() => ({ background: `url(${IMAGE_PLACEHOLDER}) 100% center / cover` }), [IMAGE_PLACEHOLDER]);\n\n  const recipes = data?.map(recipe => {\n    const link = getRoutePath(`/recipe/${recipe.slug}`);\n    return (\n      <Col key={recipe.key || recipe.id}>\n        <Card className={classNames('recipe', recipe.className)}>\n          {recipe.header && <Card.Header>{recipe.header}</Card.Header>}\n          <Link to={link} onClick={() => onOpenRecipe(recipe)}>\n            <Card.Img variant='top' src={getRecipeImage(recipe)} alt='' style={PLACEHOLDER_STYLE} />\n            <Ratings stars={recipe.rating} count={recipe.ratingCount} collapsed />\n            <Card.Title as='h3'><Tooltip id={recipe.slug} tooltip={recipe.title} placement='bottom' className='card-title-tooltip'>{recipe.title}</Tooltip></Card.Title>\n            {recipe.oTags && <ListTags recipe={recipe} />}\n            <Card.Text>{recipe.info}</Card.Text>\n          </Link>\n          {recipe.footer && <Card.Footer>{recipe.footer}</Card.Footer>}\n        </Card>\n      </Col>\n    );\n  });\n\n  return (\n    <Row xs={1} sm={2} lg={lg} className='g-3 recipes-list'>\n      {recipes}\n    </Row>\n  );\n};\n\nexport default ListRecipes;\n","import { forwardRef } from 'react';\nimport { Button as BootstrapButton } from 'react-bootstrap';\nimport { Placement } from 'react-bootstrap/esm/types';\n\nimport '../css/button.css';\n\nimport { CommonProps } from '../types/OverridableComponent';\nimport ConditionalWrapper from './ConditionalWrapper';\nimport Tooltip from './Tooltip';\n\nexport interface IButtonProps extends CommonProps {\n  id:         string;\n  type?:      'button' | 'reset' | 'submit';\n  variant?:   'primary' | 'secondary' | 'danger' | 'outline-primary' | 'outline-secondary' | 'outline-danger' | 'transparent';\n  size?:      'sm' | 'lg';\n  disabled?:  boolean;\n  onClick?:   (event: React.MouseEvent<HTMLButtonElement>) => void;\n\n  tooltip?:   string;\n  tooltipPlacement?: Placement;\n\n  children:   React.ReactNode;\n}\n\nconst Button = forwardRef<HTMLButtonElement, IButtonProps>(({\n  id,\n  tooltip, tooltipPlacement,\n  children, ...rest }: IButtonProps, ref) => (\n    <ConditionalWrapper\n        condition = {Boolean(tooltip)}\n        render = {childr => <Tooltip id={`${id}-tooltip`} tooltip={tooltip} placement={tooltipPlacement}>{childr}</Tooltip>}>\n      <BootstrapButton id={id} aria-label={tooltip || undefined} aria-describedby={undefined} {...rest} ref={ref}>\n        {children}\n      </BootstrapButton>\n    </ConditionalWrapper>\n));\n\nexport default Button;\n","import CircularProgress from './CircularProgress';\n\ninterface ILoadingProps {\n  message?: string;\n}\n\nconst Loading = ({ message }: ILoadingProps) => (\n  <div className='spinner'>\n    {message && <span className='h3 no-results'>{ message }</span>}\n    <CircularProgress />\n  </div>\n);\n\nexport default Loading;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport { AsyncSelect, AsyncSelectBase, IAsyncSelectProps } from '../Input/Select';\n\nexport interface IReAsyncSelectProps extends IAsyncSelectProps {\n  format?: (value: any, name: string) => string;\n  parse?:  (value: any, name: string) => any;\n}\n\nconst ReAsyncSelect = forwardRef<AsyncSelectBase, IReAsyncSelectProps>(({\n    parse, format,\n    name, required,\n    onChange, onFocus, onBlur, ...rest }: IReAsyncSelectProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <AsyncSelect\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: string | undefined) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReAsyncSelect;\n","import Datetime from 'react-datetime';\nimport moment, { Moment } from 'moment';\nimport { Form } from 'react-bootstrap';\n\nimport '../../css/datetime.css';\n\nimport BaseInputComponent, { IBaseInputComponentProps } from './BaseInputComponent';\nimport Tooltip from '../Tooltip';\nimport ConditionalWrapper from '../ConditionalWrapper';\n\nrequire('react-datetime/css/react-datetime.css');\n\nexport interface IDateTimeProps extends IBaseInputComponentProps {\n  value?: string | Date | Moment | null;\n  timeFormat?: string | boolean;\n  dateFormat?: string | boolean;\n\n  onChange?: (name: string, value: moment.MomentInput) => void;\n}\n\ninterface IDateTimeState {\n  value: moment.MomentInput,\n}\n\nexport default class DateTime extends BaseInputComponent<IDateTimeProps, IDateTimeState> {\n  handleChange = (date: moment.MomentInput) => {\n    this.props.onChange?.(this.props.name, date);\n  };\n\n  render() {\n    const { onChange, // eslint-disable-line @typescript-eslint/no-unused-vars\n        value, timeFormat, dateFormat,\n        name, style, tooltip,\n        label, className, helpText, errors, meta, ...rest } = this.props; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    return (\n      <Form.Group\n          {...this.getGroupProps()}\n          controlId = {name}\n          className = {this.getFormGroupClassNames()}\n          style     = {style}>\n        <ConditionalWrapper\n            condition = {tooltip != null}\n            render    = {childr => <Tooltip id={`${name}-tooltip`} tooltip={tooltip}>{childr}</Tooltip>}>\n          {this.getLabel()}\n          {this.getHelpText()}\n          {this.getErrorMessage()}\n          <Datetime\n              value  = {value ?? ''}\n              inputProps = {{\n                name:       name,\n                className: 'form-control',\n                ...rest,\n              }}\n              dateFormat = {dateFormat || 'ddd, ll'}\n              timeFormat = {timeFormat}\n              closeOnSelect\n              className = 'form-datetime'\n              onChange   = {this.handleChange} />\n        </ConditionalWrapper>\n      </Form.Group>\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport moment, { Moment } from 'moment';\nimport { forwardRef } from 'react';\nimport { Field } from 'react-final-form';\nimport { useIntl } from 'react-intl';\n\nimport { formatValidation, requiredValidator } from '../../store/Validation';\nimport DateTime, { IDateTimeProps } from '../Input/DateTime';\n\nexport interface IReDateTimeProps extends Omit<IDateTimeProps, 'value'> {\n  format?: (value: any, name: string) => string | Date | Moment | null | undefined;\n  parse?:  (value: any, name: string) => any;\n}\n\nfunction parsee(value: moment.MomentInput): number | null | undefined {\n  if (value == null) {\n    return value;\n  } else {\n    return moment(value).unix();\n  }\n}\nfunction formattee(value: number | null | undefined): Moment | null | undefined {\n  return value != null ? moment.unix(value) : value;\n}\n\nconst ReDateTime = forwardRef<DateTime, IReDateTimeProps>(({\n    name, required, format = formattee, parse = parsee,\n    onChange, onFocus, onBlur, ...rest }: IReDateTimeProps, ref) => {\n  const intl = useIntl();\n\n  return (\n    <Field name={name} validate={required ? requiredValidator : undefined} validateFields={[]} format={format} parse={parse}>\n      {fprops => (\n        <DateTime\n            {...rest}\n            required = {required}\n\n            name     = {fprops.input.name}\n            value    = {fprops.input.value}\n            errors   = {formatValidation(intl, fprops.meta.error || (!fprops.meta.dirtySinceLastSubmit ? fprops.meta.submitError : undefined))}\n            meta     = {fprops.meta}\n            onChange = {(namee: string, value: moment.MomentInput) => { fprops.input.onChange(value); onChange?.(namee, value); }}\n            onFocus  = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onFocus(event); onFocus?.(event); }}\n            onBlur   = {(event: React.FocusEvent<HTMLElement, Element>) => { fprops.input.onBlur(event);  onBlur?.(event); }}\n            ref = {ref} />\n      )}\n    </Field>\n  );\n});\n\nexport default ReDateTime;\n","import { forwardRef, RefObject, useCallback, useRef, useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { Form as ReduxForm } from 'react-final-form';\nimport moment from 'moment';\n\nimport { create, update } from '../store/MenuItemActions';\nimport { useDispatch, useSelector } from '../../common/store/redux';\nimport { RootState } from '../../app/Store';\nimport { PendingState } from '../../common/store/GenericReducerType';\nimport Modal from '../../common/components/Modal';\nimport { ValidationResult } from '../../common/store/Validation';\nimport ReFormStatus from '../../common/components/ReInput/ReFormStatus';\nimport InitialValuesResetter from '../../common/components/ReInput/ReInitialValuesResetter';\nimport ReAsyncSelect from '../../common/components/ReInput/ReAsyncSelect';\nimport { fetchRecipeList } from '../store/MenuItemsActions';\nimport ReCheckbox from '../../common/components/ReInput/ReCheckbox';\nimport ReDateTime from '../../common/components/ReInput/ReDateTime';\nimport { SelectDataType } from '../../common/components/Input/Select';\nimport { MenuItem, MenuItemUpdate } from '../store/MenuItemTypes';\nimport { Recipe } from '../../recipe/store/RecipeTypes';\n\nconst messages = defineMessages({\n  start_date: {\n    id: 'menu_item_modal.start_date',\n    description: 'Start Date',\n    defaultMessage: 'Start Date',\n  },\n  recipe: {\n    id: 'menu_item_modal.recipe',\n    description: 'Recipe',\n    defaultMessage: 'Recipe',\n  },\n  complete: {\n    id: 'menu_item_modal.complete',\n    description: 'Complete',\n    defaultMessage: 'Complete',\n  },\n});\n\nexport interface IMenuItemModalProps {\n  show: boolean;\n  item?: Partial<MenuItem>;\n  recipe?: Recipe;\n  recipeReadonly?: boolean;\n  onSaveSuccess: () => void;\n  onClose: () => void;\n}\n\nconst MenuItemModal: React.FC<IMenuItemModalProps> = ({\n  show, item, recipe, recipeReadonly, onSaveSuccess, onClose }: IMenuItemModalProps) => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n\n    const modalTitle = intl.messages['recipe.add_to_menu_tooltip'] as string;\n\n    const handleModalClose = useCallback((autoClose: boolean) => {\n      if (!autoClose) {\n        onClose();\n      }\n    }, [onClose]);\n\n    const savePending = useSelector((state: RootState) => state.menuItem.meta.pending);\n\n    const submitRef = useRef<HTMLButtonElement>(null);\n\n    const handleEditSubmit = useCallback(() => {\n      submitRef.current?.click();\n    }, [submitRef.current]);\n    const handleSubmit = useCallback(async (form: IMenuItemModalFormDataProps) => {\n      const data: MenuItemUpdate = {\n        recipe: form.recipe || 0,\n        complete: form.complete,\n        start_date: moment.unix(form.start_date).toISOString(),\n      };\n      if (item?.id == null) {\n        return create(dispatch, data);\n      } else {\n        return update(dispatch, item?.id, data);\n      }\n    }, [item?.id]);\n    const handleSubmitSuccess = useCallback(() => {\n      onSaveSuccess();\n      onClose();\n    }, [onSaveSuccess, onClose]);\n\n    if (!show) return null;\n\n    return (\n      <Modal\n          show = {show}\n          title = {modalTitle}\n          onAccept = {handleEditSubmit}\n          acceptButtonProps = {{ disabled: savePending === PendingState.SAVING }}\n          onClose = {handleModalClose}>\n        <MenuItemModalForm\n            item = {item}\n            recipe = {recipe}\n            recipeReadonly = {recipeReadonly}\n            fetchRecipes = {fetchRecipeList}\n            onSubmit = {handleSubmit}\n            onSubmitSuccess = {handleSubmitSuccess}\n            submitRef = {submitRef}\n            />\n      </Modal>\n    );\n};\n\ninterface IMenuItemModalFormProps {\n  item?: Partial<MenuItem>;\n  recipe?: Recipe;\n  recipeReadonly?: boolean;\n  fetchRecipes: (searchTerm: string) => Promise<Array<SelectDataType>>;\n  onSubmit: (upd: IMenuItemModalFormDataProps) => Promise<ValidationResult>;\n  onSubmitSuccess: () => void;\n  submitRef: RefObject<HTMLButtonElement>;\n}\n\ninterface IMenuItemModalFormDataProps {\n  recipe: number | undefined;\n  complete: boolean;\n  start_date: number;\n}\n\nconst MenuItemModalForm = forwardRef<HTMLFormElement, IMenuItemModalFormProps>(({\n  item, recipe, recipeReadonly, fetchRecipes, onSubmit, onSubmitSuccess, submitRef }: IMenuItemModalFormProps, ref) => {\n    const intl = useIntl();\n    const { formatMessage } = intl;\n    const recipeId = item?.recipe_data?.id || recipe?.id;\n\n    const [initialValues] = useState<Partial<IMenuItemModalFormDataProps>>({\n      recipe: recipeId,\n      start_date: moment(item?.start_date || new Date()).unix(),\n      complete: false,\n    });\n    // console.log(`initialValues=${JSON.stringify(initialValues, undefined, 2)}`);\n\n    return (\n      <ReduxForm\n          initialValues = {initialValues}\n          onSubmit = {onSubmit}\n          subscription = {{}}\n          render = {({ form, handleSubmit: renderSubmit }) => (\n            <Form onSubmit={renderSubmit} ref={ref}>\n              <ReFormStatus onSubmitSuccess={onSubmitSuccess} />\n              <InitialValuesResetter form={form} initialValues={initialValues} />\n\n              <Row>\n                <Col xs={12}>\n                  <ReAsyncSelect\n                      name   = 'recipe'\n                      initialValueLabel = {item?.recipe_data?.title || recipe?.title}\n                      label  = {formatMessage(messages.recipe)}\n                      loadOptions = {fetchRecipes}\n                      readOnly = {recipeReadonly}\n                      required\n                      />\n                </Col>\n                <Col xs={12}>\n                  <ReDateTime\n                      label      = {formatMessage(messages.start_date)}\n                      name       = 'start_date'\n                      timeFormat = {false}\n                      required />\n                </Col>\n                <Col xs={12}>\n                  <ReCheckbox\n                      name    = 'complete'\n                      label   = {formatMessage(messages.complete)} />\n                </Col>\n              </Row>\n\n              <button type='submit' ref={submitRef} className='visibility-hidden'>Submit</button>\n            </Form>\n          )} />\n    );\n});\n\nexport default MenuItemModal;\n","import { defineMessages, useIntl } from 'react-intl';\n\nimport Toast from '../../common/components/Toast';\n\nconst messages = defineMessages({\n  add_menu_item_success_toast: {\n    id: 'menu_item_modal.add_success_toast',\n    description: 'Add menu item success toast',\n    defaultMessage: 'Recipe added to your menu.',\n  },\n  save_menu_item_success_toast: {\n    id: 'menu_item_modal.save_success_toast',\n    description: 'Save menu item success toast',\n    defaultMessage: 'Change saved.',\n  },\n});\n\nexport interface ISaveMenuItemSuccessToastProps {\n  show: boolean;\n  created?: boolean;\n  onClose: () => void;\n}\n\nconst SaveMenuItemSuccessToast: React.FC<ISaveMenuItemSuccessToastProps> = ({\n  show, created, onClose,\n}: ISaveMenuItemSuccessToastProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Toast\n        show = {show}\n        variant = 'success'\n        anchorOrigin = {{ horizontal: 'center', vertical: 'bottom' }}\n        onClose = {onClose}>\n      {created ? formatMessage(messages.add_menu_item_success_toast) : formatMessage(messages.save_menu_item_success_toast)}\n    </Toast>\n  );\n};\n\nexport default SaveMenuItemSuccessToast;\n","import { request } from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { handleError, handleFormError } from '../../common/requestUtils';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { AnyDispatch, toBasicAction } from '../../common/store/redux';\nimport { MENU_ITEM_STORE, MenuItemDispatch, MenuItemUpdate, toMenuItem, MenuItemActionTypes } from './MenuItemTypes';\n\nexport const create = async (dispatch: AnyDispatch, item: MenuItemUpdate) => {\n  dispatch({ ...toBasicAction(MENU_ITEM_STORE, ACTION.CREATE_START) });\n\n  return request()\n    .post(serverURLs.menu_item)\n    .send(item)\n    .then(res => {\n      const menuItem = toMenuItem(res.body);\n      dispatch({\n        ...toBasicAction(\n          MENU_ITEM_STORE,\n          ACTION.CREATE_SUCCESS\n        ),\n        payload: menuItem,\n      });\n    })\n    .catch(err => handleFormError(dispatch, err, MENU_ITEM_STORE));\n};\n\nexport const update = async (dispatch: AnyDispatch, id: number, item: Partial<MenuItemUpdate>) => {\n  dispatch({ ...toBasicAction(MENU_ITEM_STORE, ACTION.UPDATE_START) });\n\n  return request()\n    .patch(`${serverURLs.menu_item}${id}/`)\n    .send(item)\n    .then(res => {\n      const menuItem = toMenuItem(res.body);\n      dispatch({\n        ...toBasicAction(\n          MENU_ITEM_STORE,\n          ACTION.UPDATE_SUCCESS\n        ),\n        payload: menuItem,\n      });\n    })\n    .catch(err => handleFormError(dispatch, err, MENU_ITEM_STORE));\n};\n\nexport const updateComplete = async (dispatch: AnyDispatch, id: number) => {\n  dispatch({ ...toBasicAction(MENU_ITEM_STORE, ACTION.UPDATE_START) });\n\n  return request()\n    .patch(`${serverURLs.menu_item}${id}/`)\n    .send({ complete: true })\n    .then(res => {\n      const menuItem = toMenuItem(res.body);\n      dispatch({\n        ...toBasicAction(\n          MENU_ITEM_STORE,\n          ACTION.UPDATE_SUCCESS\n        ),\n        payload: menuItem,\n      });\n    })\n    .catch(err => handleFormError(dispatch, err, MENU_ITEM_STORE));\n};\n\nexport const hideCompleted = (id: number) => (dispatch: MenuItemDispatch) => {\n  dispatch({ ...toBasicAction(MENU_ITEM_STORE, MenuItemActionTypes.HIDE_COMPLETED), payload: id });\n};\n\nexport const remove = (id: number) => (dispatch: MenuItemDispatch) => {\n  dispatch({ ...toBasicAction(MENU_ITEM_STORE, ACTION.DELETE_START) });\n\n  request()\n    .delete(`${serverURLs.menu_item}${id}/`)\n    .then(() => {\n      dispatch({\n        ...toBasicAction(\n          MENU_ITEM_STORE,\n          ACTION.DELETE_SUCCESS\n        ),\n        payload: { id: id },\n      });\n    })\n    .catch(err => dispatch(handleError(err, MENU_ITEM_STORE)));\n};\n","import request from '../../common/CustomSuperagent';\nimport { serverURLs } from '../../common/config';\nimport { toBasicAction } from '../../common/store/redux';\nimport { ACTION } from '../../common/store/ReduxHelper';\nimport { handleError } from '../../common/requestUtils';\nimport { MENU_ITEMS_STORE, MenuItemsDispatch } from './MenuItemsTypes';\nimport { MenuItemDto, toMenuItem } from './MenuItemTypes';\nimport { RecipeDto } from '../../recipe/store/RecipeTypes';\nimport { SelectDataType } from '../../common/components/Input/Select';\n\nexport const load = () => (dispatch: MenuItemsDispatch) => {\n  dispatch({ ...toBasicAction(MENU_ITEMS_STORE, ACTION.GET_START) });\n  request()\n    .get(`${serverURLs.menu_item}?complete=false`)\n    .then(res => {\n      dispatch({\n        ...toBasicAction(\n          MENU_ITEMS_STORE,\n          ACTION.GET_SUCCESS\n        ),\n        payload: res.body.results.map((i: MenuItemDto) => toMenuItem(i)),\n      });\n    })\n    .catch(err => dispatch(handleError(err, MENU_ITEMS_STORE)));\n};\n\nexport const reset = () => (dispatch: MenuItemsDispatch) => {\n  dispatch({ ...toBasicAction(MENU_ITEMS_STORE, ACTION.RESET) });\n};\n\nexport const fetchRecipeList = (searchTerm: string) => request()\n    .get(`${serverURLs.recipe}?fields=id,title&limit=5&search=${searchTerm}`)\n    .then(res => {\n      const titles: Array<SelectDataType> = [];\n      res.body.results.map((recipe: RecipeDto) => {\n        titles.push({ value: String(recipe.id), label: recipe.title });\n        return recipe;\n      });\n      return titles;\n    })\n    .catch(() => []);\n","import { useCallback, useMemo } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport { Button } from 'react-bootstrap';\n\nimport '../css/ratings.css';\n\nimport Icon from '../../common/components/Icon';\nimport ConditionalWrapper from '../../common/components/ConditionalWrapper';\n\nconst messages = defineMessages({\n  star_alt: {\n    id: 'rating_comments.star_alt',\n    description: 'Alt text for star button, for screen reader.',\n    defaultMessage: 'Select to rate item {stars, plural, one {# star} other {# stars}}',\n  },\n  stars_alt: {\n    id: 'rating_comments.stars_alt',\n    description: 'Alt text for read-only stars (view).',\n    defaultMessage: '{stars} out of 5 stars',\n  },\n  rating_count: {\n    id: 'rating_comments.rating_count',\n    description: 'Rating count (view).',\n    defaultMessage: '{count} ratings',\n  },\n});\n\nexport interface IRatingsProps {\n  stars:      number;\n  count?:     number;\n  showCount?: boolean;\n  collapsed?: boolean;\n  onChange?:  (stars: number) => void;\n}\n\ninterface IStarProps {\n  stars: number;\n  num:   number;\n  onChange?: (stars: number) => void;\n}\n\nconst Star: React.FC<IStarProps> = ({ stars, num, onChange }: IStarProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleClick = useCallback(() => {\n    onChange?.(num);\n  }, [onChange, num]);\n\n  const isHalfFilled = stars > (num - 1) && stars < num;\n  const icon = isHalfFilled ? 'star-half' : 'star';\n  const variant = num > stars || isHalfFilled ? 'light' : 'filled';\n\n  return (\n    <ConditionalWrapper\n        condition = {onChange != null}\n        render    = {childr => <Button variant='transparent' className='rating' onClick={handleClick}>{childr}</Button>}\n        key={num}>\n      <Icon key={num} icon={icon} variant={variant} size={onChange != null ? '2x' : '1x'} ariaLabel={onChange ? formatMessage(messages.star_alt, { stars: num }) : undefined} />\n    </ConditionalWrapper>\n  );\n};\n\ninterface ICollapsedStarProps {\n  stars: number;\n}\n\nconst CollapsedStar: React.FC<ICollapsedStarProps> = ({ stars }: ICollapsedStarProps) => {\n  const isHalfFilled = stars > 0 && stars < 4;\n  const icon = isHalfFilled ? 'star-half' : 'star';\n  const variant = stars === 0 || isHalfFilled ? 'light' : 'filled';\n\n  return (\n    <Icon key={stars} icon={icon} variant={variant} size='1x' />\n  );\n};\n\nconst Ratings: React.FC<IRatingsProps> = ({ stars, count, showCount = true, collapsed = false, onChange }: IRatingsProps) => {\n  const { formatMessage } = useIntl();\n\n  let starss = stars;\n  if (stars > 5) {\n    starss = 5;\n  } else if (stars < 0) {\n    starss = 0;\n  }\n\n  const starsList: React.ReactNode | Array<React.ReactNode> = useMemo(() => {\n    if (collapsed) {\n      return <CollapsedStar stars={starss} />;\n    } else {\n      return Array.from({ length: 5 }, (_, i) => i + 1).map(num => (\n        <Star key={num} stars={starss} num={num} onChange={onChange} />\n      ));\n    }\n  }, [starss, collapsed, onChange]);\n\n  const starsText = stars > 0 ? `${stars}/5` : '';\n  const ratingCount = (showCount && (stars === 0 || count) && !onChange) ? (count ?? 0) : undefined;\n\n  return (\n    <div className='rating-stars'>\n      <span className={classNames('stars-icons', { active: stars > 0 })} aria-hidden>{starsList}</span>\n      {starsText   && <span className='rating-text'  aria-hidden>{starsText}</span>}\n      <span className='sr-only'>{formatMessage(messages.stars_alt, { stars: starss })}</span>\n      {ratingCount != null && (\n        <span className='rating-count'>\n          {`(${collapsed ? ratingCount : formatMessage(messages.rating_count, { count: ratingCount })})`}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Ratings;\n"],"names":["RENDER_TAGS","tag","icon","variant","_ref","recipe","intl","useIntl","renderTagsJsx","useMemo","oTags","res","recipeTags","vegetarian","vegan","forEach","t","push","_jsxs","Chip","children","_jsx","Icon","optionallyFormatMessage","id","locale","length","className","getRecipeImage","_recipe$photoThumbnai","photoThumbnail","getRecipeImagePlaceholder","images","recipeImageHash","Math","abs","str","hash","i","charCodeAt","hashCode","title","getResourcePath","data","lg","onOpenRecipe","IMAGE_PLACEHOLDER","PLACEHOLDER_STYLE","background","recipes","map","link","getRoutePath","slug","Col","Card","classNames","header","Header","Link","to","onClick","Img","src","alt","style","Ratings","stars","rating","count","ratingCount","collapsed","Title","as","Tooltip","tooltip","placement","ListTags","Text","info","footer","Footer","key","Row","xs","sm","forwardRef","ref","tooltipPlacement","rest","ConditionalWrapper","condition","Boolean","render","childr","BootstrapButton","undefined","message","CircularProgress","parse","format","name","required","onChange","onFocus","onBlur","Field","validate","requiredValidator","validateFields","fprops","AsyncSelect","input","value","errors","formatValidation","meta","error","dirtySinceLastSubmit","submitError","namee","event","require","DateTime","BaseInputComponent","constructor","arguments","handleChange","date","_this$props$onChange","_this$props","this","props","call","timeFormat","dateFormat","label","helpText","Form","Group","getGroupProps","controlId","getFormGroupClassNames","getLabel","getHelpText","getErrorMessage","Datetime","inputProps","closeOnSelect","parsee","moment","unix","formattee","messages","defineMessages","start_date","description","defaultMessage","complete","MenuItemModalForm","_ref2","_item$recipe_data","item","recipeReadonly","fetchRecipes","onSubmit","onSubmitSuccess","submitRef","formatMessage","recipeId","recipe_data","initialValues","useState","Date","ReduxForm","subscription","_ref3","_item$recipe_data2","form","handleSubmit","renderSubmit","ReFormStatus","InitialValuesResetter","ReAsyncSelect","initialValueLabel","loadOptions","readOnly","ReDateTime","ReCheckbox","type","show","onSaveSuccess","onClose","dispatch","useDispatch","modalTitle","handleModalClose","useCallback","autoClose","savePending","useSelector","state","menuItem","pending","useRef","handleEditSubmit","_submitRef$current","current","click","async","toISOString","create","update","handleSubmitSuccess","Modal","onAccept","acceptButtonProps","disabled","PendingState","SAVING","fetchRecipeList","add_menu_item_success_toast","save_menu_item_success_toast","created","Toast","anchorOrigin","horizontal","vertical","toBasicAction","MENU_ITEM_STORE","ACTION","CREATE_START","request","post","serverURLs","menu_item","send","then","toMenuItem","body","CREATE_SUCCESS","payload","catch","err","handleFormError","UPDATE_START","patch","UPDATE_SUCCESS","updateComplete","hideCompleted","MenuItemActionTypes","HIDE_COMPLETED","remove","DELETE_START","delete","DELETE_SUCCESS","handleError","load","MENU_ITEMS_STORE","GET_START","get","GET_SUCCESS","results","searchTerm","titles","String","star_alt","stars_alt","rating_count","Star","num","handleClick","isHalfFilled","Button","size","ariaLabel","CollapsedStar","showCount","starss","starsList","Array","from","_","starsText","active"],"sourceRoot":""}